name: End-to-End Tests

on:
  push:
    branches: ["main", "rc-*"]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  schedule:
    - cron: "0 8 * * *"
  workflow_dispatch:

jobs:
  playwright-shiny:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.12", "3.11", "3.10", "3.9", "3.8"]
        os: [ubuntu-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Setup py-shiny
        uses: ./.github/py-shiny/setup
        with:
          python-version: ${{ matrix.python-version }}

      - name: Determine browsers for testing
        uses: ./.github/py-shiny/pytest-browsers
        id: browsers
        with:
          all-browsers: ${{ startsWith(github.head_ref, 'playwright') }}
      - name: Display browser
        shell: bash
        run: echo '${{ steps.browsers.outputs.browsers }}'
      - name: Run End-to-End tests
        timeout-minutes: 20
        run: |
          make playwright-shiny SUB_FILE=". -vv" ${{ steps.browsers.outputs.browsers }}
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: "playright-shiny-${{ matrix.os }}-${{ matrix.python-version }}-results"
          path: test-results/
          retention-days: 5

  playwright-examples:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.12", "3.11", "3.10", "3.9", "3.8"]
        os: [ubuntu-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Setup py-shiny
        uses: ./.github/py-shiny/setup
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: npm
          cache-dependency-path: examples/brownian/shinymediapipe/package-lock.json
      - name: Install node.js package
        working-directory: examples/brownian/shinymediapipe
        run: |
          npm ci

      - name: Determine browsers for testing
        uses: ./.github/py-shiny/pytest-browsers
        id: browsers
        with:
          all-browsers: ${{ startsWith(github.head_ref, 'playwright') }}
      - name: Run example app tests
        timeout-minutes: 20
        run: |
          make playwright-examples SUB_FILE=". -vv" ${{ steps.browsers.outputs.browsers }}
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: "playright-examples-${{ matrix.os }}-${{ matrix.python-version }}-results"
          path: test-results/
          retention-days: 5

  playwright-deploys-precheck:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # Matches deploy server python version
        python-version: ["3.10"]
        os: [ubuntu-latest]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Setup py-shiny
        uses: ./.github/py-shiny/setup
        with:
          python-version: ${{ matrix.python-version }}

      - name: Test that deployable example apps work
        timeout-minutes: 5 # ~10s locally
        env:
          DEPLOY_APPS: "false"
        run: |
          make playwright-deploys SUB_FILE=". -vv"

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: "playright-examples-${{ matrix.os }}-${{ matrix.python-version }}-results"
          path: test-results/
          retention-days: 5
