name: Run tests

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # "3.10" must be a string; otherwise it is interpreted as 3.1.
        python-version: [3.7, 3.8, 3.9, "3.10"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Start ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null

      - name: Setup SSH key for htmltools
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-add -D
          ssh-add - <<< "${{ secrets.HTMLTOOLS_SSH_KEY }}"

      - name: Check out and install htmltools
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          cd ..
          git clone git@github.com:rstudio/py-htmltools.git
          cd py-htmltools
          pip install -r requirements-dev.txt
          make install

      # - name: Setup SSH key for fontawesome
      #   env:
      #     SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      #   run: |
      #     ssh-add -D
      #     ssh-add - <<< "${{ secrets.FONTAWESOME_SSH_KEY }}"

      # - name: Check out and install fontawesome
      #   env:
      #     SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      #   run: |
      #     cd ..
      #     git clone git@github.com:rstudio/py-fontawesome.git
      #     cd py-fontawesome
      #     pip install -r requirements-dev.txt
      #     make install

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Install
        id: install
        run: |
          make install

      - name: Run unit tests
        if: steps.install.outcome == 'success' && (success() || failure())
        run: |
          pwd
          cd tests
          pytest

      - name: Type check with pyright
        if: steps.install.outcome == 'success' && (success() || failure())
        run: |
          make check

      - name: Build API docs
        if: steps.install.outcome == 'success' && (success() || failure())
        env:
          SHINYLIVE_SRC: ""
        run: |
          cd docs && make html

      - name: Lint with flake8
        if: steps.install.outcome == 'success' && (success() || failure())
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
