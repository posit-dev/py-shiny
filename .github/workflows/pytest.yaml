name: Run tests

on:
  workflow_dispatch:
  push:
    branches: ["main", "rc-*"]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  release:
    types: [published]
  schedule:
    - cron: "0 8 * * *"

jobs:
  check:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # "3.10" must be a string; otherwise it is interpreted as 3.1.
        python-version: ["3.12", "3.11", "3.10", "3.9", "3.8"]
        os: [ubuntu-latest, windows-latest, macOS-latest]
        exclude:
          - python-version: ${{ github.event.pull_request.draft && '3.11' }}
          - python-version: ${{ github.event.pull_request.draft && '3.10' }}
          - python-version: ${{ github.event.pull_request.draft && '3.9' }}
          - os: ${{ github.event.pull_request.draft && 'windows-latest' }}
          - os: ${{ github.event.pull_request.draft && 'macOS-latest' }}

      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Setup py-shiny
        id: install
        uses: ./.github/py-shiny/setup
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run unit tests
        if: steps.install.outcome == 'success' && (success() || failure())
        run: |
          make check-tests

      - name: Type check
        if: steps.install.outcome == 'success' && (success() || failure())
        run: |
          make check-types

      - name: Lint code
        if: steps.install.outcome == 'success' && (success() || failure())
        run: |
          make check-lint

      - name: Verify code formatting
        if: steps.install.outcome == 'success' && (success() || failure())
        run: |
          make check-format

  pypi:
    name: "Deploy to PyPI"
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    needs: [check]
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Python 3.10"
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install https://github.com/rstudio/py-htmltools/tarball/main
          make install-deps
          make install
      - name: "Build Package"
        run: |
          make dist

      # test deploy ----
      - name: "Test Deploy to PyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        if: startsWith(github.event.release.name, 'TEST')
        with:
          user: __token__
          password: ${{ secrets.PYPI_TEST_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      ## prod deploy ----
      - name: "Deploy to PyPI"
        uses: pypa/gh-action-pypi-publish@release/v1
        if: startsWith(github.event.release.name, 'shiny')
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  playwright-shiny:
    if: github.event_name != 'release'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12", "3.11", "3.10", "3.9", "3.8"]
        browser: ["chromium", "firefox", "webkit"]
        exclude:
          - python-version: ${{ github.event.pull_request.draft && '3.11' }}
          - python-version: ${{ github.event.pull_request.draft && '3.10' }}
          - python-version: ${{ github.event.pull_request.draft && '3.9' }}
          - browser: ${{ github.event.pull_request.draft && 'firefox' }}
          - browser: ${{ github.event.pull_request.draft && 'webkit' }}
          # There are many unexplained tests that fail on webkit w/ python 3.8, 3.9
          # Given the more recent versions of python work, we will exclude this combination
          - browser: "webkit"
            python-version: "3.8"
          - browser: "webkit"
            python-version: "3.9"
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Setup py-shiny
        uses: ./.github/py-shiny/setup
        with:
          python-version: ${{ matrix.python-version }}

      - name: Determine browsers for testing
        uses: ./.github/py-shiny/pytest-browsers
        id: browsers
        with:
          browser: ${{ matrix.browser }}
          # If anything other than `true`, it will heavily reduce webkit performance
          # Related: https://github.com/microsoft/playwright/issues/18119
          disable-playwright-diagnostics: ${{ matrix.browser == 'webkit' || matrix.browser == 'firefox' }}

      - name: Run End-to-End tests
        timeout-minutes: 60
        run: |
          make playwright-shiny SUB_FILE=". --numprocesses 3 ${{ steps.browsers.outputs.playwright-diagnostic-args }}" ${{ steps.browsers.outputs.browsers }}
      - uses: actions/upload-artifact@v4
        if: failure() && steps.browsers.outputs.has-playwright-diagnostics
        with:
          name: "playright-shiny-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }}-results"
          path: test-results/
          retention-days: 5

  playwright-examples:
    if: github.event_name != 'release'
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.12", "3.11", "3.10", "3.9", "3.8"]
        browser: ["chromium", "firefox", "webkit"]
        exclude:
          - python-version: ${{ github.event.pull_request.draft && '3.11' }}
          - python-version: ${{ github.event.pull_request.draft && '3.10' }}
          - python-version: ${{ github.event.pull_request.draft && '3.9' }}
          - browser: ${{ github.event.pull_request.draft && 'firefox' }}
          - browser: ${{ github.event.pull_request.draft && 'webkit' }}
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Setup py-shiny
        uses: ./.github/py-shiny/setup
        with:
          python-version: ${{ matrix.python-version }}
      - name: Determine browsers for testing
        uses: ./.github/py-shiny/pytest-browsers
        id: browsers
        with:
          browser: ${{ matrix.browser }}
          # If anything other than `true`, it will heavily reduce webkit performance
          # Related: https://github.com/microsoft/playwright/issues/18119
          disable-playwright-diagnostics: ${{ matrix.browser == 'webkit' || matrix.browser == 'firefox' }}

      - name: Install node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: npm
          cache-dependency-path: examples/brownian/shinymediapipe/package-lock.json
      - name: Install node.js package
        working-directory: examples/brownian/shinymediapipe
        run: |
          npm ci

      - name: Run example app tests
        timeout-minutes: 60
        run: |
          make playwright-examples SUB_FILE=". --numprocesses 3 ${{ steps.browsers.outputs.playwright-diagnostic-args }}" ${{ steps.browsers.outputs.browsers }}
      - uses: actions/upload-artifact@v4
        if: failure() && steps.browsers.outputs.has-playwright-diagnostics
        with:
          name: "playright-examples-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.browser }}-results"
          path: test-results/
          retention-days: 5

  playwright-deploys-precheck:
    if: github.event_name != 'release'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Matches deploy server python version
        python-version: ["3.10"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
      - name: Setup py-shiny
        uses: ./.github/py-shiny/setup
        with:
          python-version: ${{ matrix.python-version }}
      - name: Determine browsers for testing
        uses: ./.github/py-shiny/pytest-browsers
        id: browsers
        with:
          all-browsers: ${{ ! github.event.pull_request.draft }}

      - name: Test that deployable example apps work
        timeout-minutes: 5 # ~10s locally
        env:
          DEPLOY_APPS: "false"
        run: |
          make playwright-deploys

      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: "playright-examples-${{ runner.os }}-${{ matrix.python-version }}-results"
          path: test-results/
          retention-days: 5
