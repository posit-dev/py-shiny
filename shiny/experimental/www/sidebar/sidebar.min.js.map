{
  "version": 3,
  "sources": ["../../srcts/src/components/_utils.ts", "../../srcts/src/components/sidebar.ts"],
  "sourcesContent": ["import type { HtmlDep } from \"rstudio-shiny/srcts/types/src/shiny/render\";\n\nimport type { InputBinding as InputBindingType } from \"rstudio-shiny/srcts/types/src/bindings/input\";\n\n// Exclude undefined from T\ntype NotUndefined<T> = T extends undefined ? never : T;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst InputBinding = (\n  window.Shiny ? Shiny.InputBinding : class {}\n) as typeof InputBindingType;\n\nfunction registerBinding(\n  inputBindingClass: new () => InputBindingType,\n  name: string\n): void {\n  if (window.Shiny) {\n    Shiny.inputBindings.register(new inputBindingClass(), \"bslib.\" + name);\n  }\n}\n\n// Return true if the key exists on the object and the value is not undefined.\n//\n// This method is mainly used in input bindings' `receiveMessage` method.\n// Since we know that the values are sent by Shiny via `{jsonlite}`,\n// then we know that there are no `undefined` values. `null` is possible, but not `undefined`.\nfunction hasDefinedProperty<\n  Prop extends keyof X,\n  X extends { [key: string]: any }\n>(\n  obj: X,\n  prop: Prop\n): obj is X & { [key in NonNullable<Prop>]: NotUndefined<X[key]> } {\n  return (\n    Object.prototype.hasOwnProperty.call(obj, prop) && obj[prop] !== undefined\n  );\n}\n\n// TODO: Shiny should trigger resize events when the output\n// https://github.com/rstudio/shiny/pull/3682\nfunction doWindowResizeOnElementResize(el: HTMLElement): void {\n  if ($(el).data(\"window-resize-observer\")) {\n    return;\n  }\n  const resizeEvent = new Event(\"resize\");\n  const ro = new ResizeObserver(() => {\n    window.dispatchEvent(resizeEvent);\n  });\n  ro.observe(el);\n  $(el).data(\"window-resize-observer\", ro);\n}\n\nexport {\n  InputBinding,\n  registerBinding,\n  hasDefinedProperty,\n  doWindowResizeOnElementResize,\n};\nexport type { HtmlDep };\n", "import {\n  InputBinding,\n  registerBinding,\n  doWindowResizeOnElementResize,\n} from \"./_utils\";\n\ntype MessageData = {\n  method: \"close\" | \"open\";\n};\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst COLLAPSE_CLASS = \"sidebar-collapsed\";\n\nclass SidebarInputBinding extends InputBinding {\n  find(scope: HTMLElement) {\n    return $(scope).find(\".bslib-sidebar-layout > .bslib-sidebar-input\");\n  }\n\n  getValue(el: HTMLElement): boolean {\n    return !$(el).parent().hasClass(COLLAPSE_CLASS);\n  }\n\n  setValue(el: HTMLElement, value: boolean): void {\n    const method = value ? \"open\" : \"close\";\n    this.receiveMessage(el, { method });\n  }\n\n  subscribe(el: HTMLElement, callback: (x: boolean) => void) {\n    $(el).on(\n      \"toggleCollapse.sidebarInputBinding\",\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      function (event) {\n        callback(true);\n      }\n    );\n  }\n\n  unsubscribe(el: HTMLElement) {\n    $(el).off(\".sidebarInputBinding\");\n  }\n\n  receiveMessage(el: HTMLElement, data: MessageData) {\n    const method = data.method;\n    const $parent = $(el).parent();\n\n    if (method === \"open\") {\n      $parent.removeClass(COLLAPSE_CLASS);\n    } else if (method === \"close\") {\n      $parent.addClass(COLLAPSE_CLASS);\n    } else {\n      throw new Error(`Unknown method ${method}`);\n    }\n\n    $(el).trigger(\"toggleCollapse.sidebarInputBinding\");\n  }\n}\n\nregisterBinding(SidebarInputBinding, \"sidebar\");\n\n$(document).on(\"click\", \".bslib-sidebar-layout > .collapse-toggle\", (e) => {\n  e.preventDefault();\n\n  const $toggle = $(e.target).closest(\".collapse-toggle\"),\n    $container = $toggle.parent(),\n    $main = $container.children(\".main\"),\n    $side = $container.children(\".sidebar\");\n\n  // Make sure outputs resize properly when the sidebar is opened/closed\n  doWindowResizeOnElementResize($main[0]);\n\n  // Add a transitioning class just before adding COLLAPSE_CLASS since we want\n  // some of the transitioning styles to apply before the collapse state\n  $container.addClass(\"transitioning\");\n  $container.toggleClass(COLLAPSE_CLASS);\n\n  // Update the aria-expanded attribute\n  $toggle.attr(\n    \"aria-expanded\",\n    $container.hasClass(COLLAPSE_CLASS) ? \"false\" : \"true\"\n  );\n\n  $side.trigger(\"toggleCollapse.sidebarInputBinding\");\n});\n\n// Once the collapse transition completes (on the collapse toggle, which is\n// always guaranteed to transition), then remove the transitioning class\n$(document).on(\n  \"transitionend\",\n  \".bslib-sidebar-layout > .collapse-toggle > .collapse-icon\",\n  (e) => {\n    $(e.target).closest(\".bslib-sidebar-layout\").removeClass(\"transitioning\");\n  }\n);\n"],
  "mappings": ";mBAQA,IAAMA,EACJ,OAAO,MAAQ,MAAM,aAAe,KAAM,CAAC,EAG7C,SAASC,EACPC,EACAC,EACM,CACF,OAAO,OACT,MAAM,cAAc,SAAS,IAAID,EAAqB,SAAWC,CAAI,CAEzE,CAqBA,SAASC,EAA8BC,EAAuB,CAC5D,GAAI,EAAEA,CAAE,EAAE,KAAK,wBAAwB,EACrC,OAEF,IAAMC,EAAc,IAAI,MAAM,QAAQ,EAChCC,EAAK,IAAI,eAAe,IAAM,CAClC,OAAO,cAAcD,CAAW,CAClC,CAAC,EACDC,EAAG,QAAQF,CAAE,EACb,EAAEA,CAAE,EAAE,KAAK,yBAA0BE,CAAE,CACzC,CCvCA,IAAMC,EAAiB,oBAEjBC,EAAN,cAAkCC,CAAa,CAC7C,KAAKC,EAAoB,CACvB,OAAO,EAAEA,CAAK,EAAE,KAAK,8CAA8C,CACrE,CAEA,SAASC,EAA0B,CACjC,MAAO,CAAC,EAAEA,CAAE,EAAE,OAAO,EAAE,SAASJ,CAAc,CAChD,CAEA,SAASI,EAAiBC,EAAsB,CAC9C,IAAMC,EAASD,EAAQ,OAAS,QAChC,KAAK,eAAeD,EAAI,CAAE,OAAAE,CAAO,CAAC,CACpC,CAEA,UAAUF,EAAiBG,EAAgC,CACzD,EAAEH,CAAE,EAAE,GACJ,qCAEA,SAAUI,EAAO,CACfD,EAAS,EAAI,CACf,CACF,CACF,CAEA,YAAYH,EAAiB,CAC3B,EAAEA,CAAE,EAAE,IAAI,sBAAsB,CAClC,CAEA,eAAeA,EAAiBK,EAAmB,CACjD,IAAMH,EAASG,EAAK,OACdC,EAAU,EAAEN,CAAE,EAAE,OAAO,EAE7B,GAAIE,IAAW,OACbI,EAAQ,YAAYV,CAAc,UACzBM,IAAW,QACpBI,EAAQ,SAASV,CAAc,MAE/B,OAAM,IAAI,MAAM,kBAAkBM,GAAQ,EAG5C,EAAEF,CAAE,EAAE,QAAQ,oCAAoC,CACpD,CACF,EAEAO,EAAgBV,EAAqB,SAAS,EAE9C,EAAE,QAAQ,EAAE,GAAG,QAAS,2CAA6CW,GAAM,CACzEA,EAAE,eAAe,EAEjB,IAAMC,EAAU,EAAED,EAAE,MAAM,EAAE,QAAQ,kBAAkB,EACpDE,EAAaD,EAAQ,OAAO,EAC5BE,EAAQD,EAAW,SAAS,OAAO,EACnCE,EAAQF,EAAW,SAAS,UAAU,EAGxCG,EAA8BF,EAAM,CAAC,CAAC,EAItCD,EAAW,SAAS,eAAe,EACnCA,EAAW,YAAYd,CAAc,EAGrCa,EAAQ,KACN,gBACAC,EAAW,SAASd,CAAc,EAAI,QAAU,MAClD,EAEAgB,EAAM,QAAQ,oCAAoC,CACpD,CAAC,EAID,EAAE,QAAQ,EAAE,GACV,gBACA,4DACCJ,GAAM,CACL,EAAEA,EAAE,MAAM,EAAE,QAAQ,uBAAuB,EAAE,YAAY,eAAe,CAC1E,CACF",
  "names": ["InputBinding", "registerBinding", "inputBindingClass", "name", "doWindowResizeOnElementResize", "el", "resizeEvent", "ro", "COLLAPSE_CLASS", "SidebarInputBinding", "InputBinding", "scope", "el", "value", "method", "callback", "event", "data", "$parent", "registerBinding", "e", "$toggle", "$container", "$main", "$side", "doWindowResizeOnElementResize"]
}
