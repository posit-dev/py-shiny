{
  "version": 3,
  "sources": ["../../../../js/page-output/page-output.ts"],
  "sourcesContent": ["import type { ErrorsMessageValue } from \"rstudio-shiny/srcts/types/src/shiny/shinyapp\";\n\nclass PageOutputBinding extends window.Shiny.OutputBinding {\n  originalBodyTagAttrs: Array<Attr> | null = null;\n\n  find(scope: HTMLElement | JQuery<HTMLElement>): JQuery<HTMLElement> {\n    return $(scope).find(\".shiny-page-output\");\n  }\n\n  onValueError(el: HTMLElement, err: ErrorsMessageValue): void {\n    if (window.Shiny.unbindAll) window.Shiny.unbindAll(el);\n    this.renderError(el, err);\n  }\n\n  async renderValue(\n    el: HTMLElement,\n    data: Parameters<typeof window.Shiny.renderContentAsync>[1]\n  ): Promise<void> {\n    if (data === null) return;\n    if (el !== document.body) {\n      throw new Error(\n        'Output with class \"shiny-page-output\" must be a <body> tag.'\n      );\n    }\n\n    if (this.originalBodyTagAttrs === null) {\n      // On the first run, store el's attributes so that on later runs we can clear\n      // any added attributes and reset this element to its original state.\n      this.originalBodyTagAttrs = Array.from(el.attributes);\n    } else {\n      // This is a later run. Reset attributes to their inital state.\n      for (const attr of this.originalBodyTagAttrs) {\n        el.setAttribute(attr.name, attr.value);\n      }\n    }\n\n    let content = typeof data === \"string\" ? data : data.html;\n\n    // Parse the HTML\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(content, \"text/html\");\n\n    // Copy the <html> tag's lang attribute, if present.\n    if (doc.documentElement.lang) {\n      document.documentElement.lang = doc.documentElement.lang;\n    }\n\n    // Copy the <title>, if present.\n    if (doc.title) {\n      document.title = doc.title;\n    }\n\n    // Copy attributes from parsed <body> to the output element (which should be a\n    // <body>)\n    for (const attr of Array.from(doc.body.attributes)) {\n      if (attr.name === \"class\") el.classList.add(...attr.value.split(\" \"));\n      else el.setAttribute(attr.name, attr.value);\n    }\n\n    content = content\n      .replace(/<html>.*<body[^>]*>/gis, \"\")\n      .replace(/<\\/body>.*<\\/html>/gis, \"\");\n\n    if (typeof data === \"string\") {\n      data = content;\n    } else {\n      data.html = content;\n    }\n\n    await window.Shiny.renderContentAsync(el, data);\n  }\n}\n\nwindow.Shiny.outputBindings.register(\n  new PageOutputBinding(),\n  \"shinyPageOutputBinding\"\n);\n\nexport { PageOutputBinding };\n"],
  "mappings": "AAEA,IAAMA,EAAN,cAAgC,OAAO,MAAM,aAAc,CAA3D,kCACE,0BAA2C,KAE3C,KAAKC,EAA+D,CAClE,OAAO,EAAEA,CAAK,EAAE,KAAK,oBAAoB,CAC3C,CAEA,aAAaC,EAAiBC,EAA+B,CACvD,OAAO,MAAM,WAAW,OAAO,MAAM,UAAUD,CAAE,EACrD,KAAK,YAAYA,EAAIC,CAAG,CAC1B,CAEA,MAAM,YACJD,EACAE,EACe,CACf,GAAIA,IAAS,KAAM,OACnB,GAAIF,IAAO,SAAS,KAClB,MAAM,IAAI,MACR,6DACF,EAGF,GAAI,KAAK,uBAAyB,KAGhC,KAAK,qBAAuB,MAAM,KAAKA,EAAG,UAAU,MAGpD,SAAWG,KAAQ,KAAK,qBACtBH,EAAG,aAAaG,EAAK,KAAMA,EAAK,KAAK,EAIzC,IAAIC,EAAU,OAAOF,GAAS,SAAWA,EAAOA,EAAK,KAI/CG,EADS,IAAI,UAAU,EACV,gBAAgBD,EAAS,WAAW,EAGnDC,EAAI,gBAAgB,OACtB,SAAS,gBAAgB,KAAOA,EAAI,gBAAgB,MAIlDA,EAAI,QACN,SAAS,MAAQA,EAAI,OAKvB,QAAWF,KAAQ,MAAM,KAAKE,EAAI,KAAK,UAAU,EAC3CF,EAAK,OAAS,QAASH,EAAG,UAAU,IAAI,GAAGG,EAAK,MAAM,MAAM,GAAG,CAAC,EAC/DH,EAAG,aAAaG,EAAK,KAAMA,EAAK,KAAK,EAG5CC,EAAUA,EACP,QAAQ,yBAA0B,EAAE,EACpC,QAAQ,wBAAyB,EAAE,EAElC,OAAOF,GAAS,SAClBA,EAAOE,EAEPF,EAAK,KAAOE,EAGd,MAAM,OAAO,MAAM,mBAAmBJ,EAAIE,CAAI,CAChD,CACF,EAEA,OAAO,MAAM,eAAe,SAC1B,IAAIJ,EACJ,wBACF",
  "names": ["PageOutputBinding", "scope", "el", "err", "data", "attr", "content", "doc"]
}
