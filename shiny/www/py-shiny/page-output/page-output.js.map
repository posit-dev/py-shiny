{
  "version": 3,
  "sources": ["../../../../js/page-output/page-output.ts"],
  "sourcesContent": ["import type { ErrorsMessageValue } from \"rstudio-shiny/srcts/types/src/shiny/shinyapp\";\n\nclass PageOutputBinding extends window.Shiny.OutputBinding {\n  originalBodyTagAttrs: Array<Attr> | null = null;\n\n  find(scope: HTMLElement | JQuery<HTMLElement>): JQuery<HTMLElement> {\n    return $(scope).find(\".shiny-page-output\");\n  }\n\n  onValueError(el: HTMLElement, err: ErrorsMessageValue): void {\n    if (window.Shiny.unbindAll) window.Shiny.unbindAll(el);\n    this.renderError(el, err);\n  }\n\n  async renderValue(\n    el: HTMLElement,\n    data: Parameters<typeof window.Shiny.renderContentAsync>[1]\n  ): Promise<void> {\n    if (data === null) return;\n    if (el !== document.body) {\n      throw new Error(\n        'Output with class \"shiny-page-output\" must be a <body> tag.'\n      );\n    }\n\n    if (this.originalBodyTagAttrs === null) {\n      // On the first run, store el's attributes so that on later runs we can clear\n      // any added attributes and reset this element to its original state.\n      this.originalBodyTagAttrs = Array.from(el.attributes);\n    } else {\n      // This is a later run. Reset attributes to their inital state.\n      for (const attr of this.originalBodyTagAttrs) {\n        el.setAttribute(attr.name, attr.value);\n      }\n    }\n\n    let content = typeof data === \"string\" ? data : data.html;\n\n    // Parse the HTML\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(content, \"text/html\");\n\n    // Copy the <html> tag's lang attribute, if present.\n    if (doc.documentElement.lang) {\n      document.documentElement.lang = doc.documentElement.lang;\n    }\n\n    // Copy the <title>, if present.\n    if (doc.title) {\n      document.title = doc.title;\n    }\n\n    // Copy attributes from parsed <body> to the output element (which should be a\n    // <body>)\n    for (const attr of Array.from(doc.body.attributes)) {\n      if (attr.name === \"class\") el.classList.add(...attr.value.split(\" \"));\n      else el.setAttribute(attr.name, attr.value);\n    }\n\n    content = content\n      .replace(/<html>.*<body[^>]*>/gis, \"\")\n      .replace(/<\\/body>.*<\\/html>/gis, \"\");\n\n    if (typeof data === \"string\") {\n      data = content;\n    } else {\n      data.html = content;\n    }\n\n    await window.Shiny.renderContentAsync(el, data);\n  }\n}\n\nwindow.Shiny.outputBindings.register(\n  new PageOutputBinding(),\n  \"shinyPageOutputBinding\"\n);\n\nexport { PageOutputBinding };\n"],
  "mappings": ";AAEA,IAAM,oBAAN,cAAgC,OAAO,MAAM,cAAc;AAAA,EAA3D;AAAA;AACE,gCAA2C;AAAA;AAAA,EAE3C,KAAK,OAA+D;AAClE,WAAO,EAAE,KAAK,EAAE,KAAK,oBAAoB;AAAA,EAC3C;AAAA,EAEA,aAAa,IAAiB,KAA+B;AAC3D,QAAI,OAAO,MAAM;AAAW,aAAO,MAAM,UAAU,EAAE;AACrD,SAAK,YAAY,IAAI,GAAG;AAAA,EAC1B;AAAA,EAEA,MAAM,YACJ,IACA,MACe;AACf,QAAI,SAAS;AAAM;AACnB,QAAI,OAAO,SAAS,MAAM;AACxB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,QAAI,KAAK,yBAAyB,MAAM;AAGtC,WAAK,uBAAuB,MAAM,KAAK,GAAG,UAAU;AAAA,IACtD,OAAO;AAEL,iBAAW,QAAQ,KAAK,sBAAsB;AAC5C,WAAG,aAAa,KAAK,MAAM,KAAK,KAAK;AAAA,MACvC;AAAA,IACF;AAEA,QAAI,UAAU,OAAO,SAAS,WAAW,OAAO,KAAK;AAGrD,UAAM,SAAS,IAAI,UAAU;AAC7B,UAAM,MAAM,OAAO,gBAAgB,SAAS,WAAW;AAGvD,QAAI,IAAI,gBAAgB,MAAM;AAC5B,eAAS,gBAAgB,OAAO,IAAI,gBAAgB;AAAA,IACtD;AAGA,QAAI,IAAI,OAAO;AACb,eAAS,QAAQ,IAAI;AAAA,IACvB;AAIA,eAAW,QAAQ,MAAM,KAAK,IAAI,KAAK,UAAU,GAAG;AAClD,UAAI,KAAK,SAAS;AAAS,WAAG,UAAU,IAAI,GAAG,KAAK,MAAM,MAAM,GAAG,CAAC;AAAA;AAC/D,WAAG,aAAa,KAAK,MAAM,KAAK,KAAK;AAAA,IAC5C;AAEA,cAAU,QACP,QAAQ,0BAA0B,EAAE,EACpC,QAAQ,yBAAyB,EAAE;AAEtC,QAAI,OAAO,SAAS,UAAU;AAC5B,aAAO;AAAA,IACT,OAAO;AACL,WAAK,OAAO;AAAA,IACd;AAEA,UAAM,OAAO,MAAM,mBAAmB,IAAI,IAAI;AAAA,EAChD;AACF;AAEA,OAAO,MAAM,eAAe;AAAA,EAC1B,IAAI,kBAAkB;AAAA,EACtB;AACF;",
  "names": []
}
