{
  "version": 3,
  "sources": ["../../../../js/node_modules/preact/src/constants.js", "../../../../js/node_modules/preact/src/util.js", "../../../../js/node_modules/preact/src/options.js", "../../../../js/node_modules/preact/src/create-element.js", "../../../../js/node_modules/preact/src/component.js", "../../../../js/node_modules/preact/src/diff/props.js", "../../../../js/node_modules/preact/src/create-context.js", "../../../../js/node_modules/preact/src/diff/children.js", "../../../../js/node_modules/preact/src/diff/index.js", "../../../../js/node_modules/preact/src/render.js", "../../../../js/node_modules/preact/src/clone-element.js", "../../../../js/node_modules/preact/src/diff/catch-error.js", "../../../../js/node_modules/preact/hooks/src/index.js", "../../../../js/node_modules/preact/compat/src/util.js", "../../../../js/node_modules/preact/compat/src/PureComponent.js", "../../../../js/node_modules/preact/compat/src/memo.js", "../../../../js/node_modules/preact/compat/src/forwardRef.js", "../../../../js/node_modules/preact/compat/src/Children.js", "../../../../js/node_modules/preact/compat/src/suspense.js", "../../../../js/node_modules/preact/compat/src/suspense-list.js", "../../../../js/node_modules/preact/src/constants.js", "../../../../js/node_modules/preact/compat/src/portals.js", "../../../../js/node_modules/preact/compat/src/render.js", "../../../../js/node_modules/preact/compat/src/index.js", "../../../../js/node_modules/@tanstack/table-core/src/columnHelper.ts", "../../../../js/node_modules/@tanstack/table-core/src/utils.ts", "../../../../js/node_modules/@tanstack/table-core/src/core/cell.ts", "../../../../js/node_modules/@tanstack/table-core/src/core/column.ts", "../../../../js/node_modules/@tanstack/table-core/src/core/headers.ts", "../../../../js/node_modules/@tanstack/table-core/src/core/row.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/ColumnFaceting.ts", "../../../../js/node_modules/@tanstack/table-core/src/filterFns.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/ColumnFiltering.ts", "../../../../js/node_modules/@tanstack/table-core/src/aggregationFns.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/ColumnGrouping.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/ColumnOrdering.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/ColumnPinning.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/ColumnSizing.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/ColumnVisibility.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/GlobalFaceting.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/GlobalFiltering.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/RowExpanding.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/RowPagination.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/RowPinning.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/RowSelection.ts", "../../../../js/node_modules/@tanstack/table-core/src/sortingFns.ts", "../../../../js/node_modules/@tanstack/table-core/src/features/RowSorting.ts", "../../../../js/node_modules/@tanstack/table-core/src/core/table.ts", "../../../../js/node_modules/@tanstack/table-core/src/utils/getCoreRowModel.ts", "../../../../js/node_modules/@tanstack/table-core/src/utils/getExpandedRowModel.ts", "../../../../js/node_modules/@tanstack/table-core/src/utils/getFacetedMinMaxValues.ts", "../../../../js/node_modules/@tanstack/table-core/src/utils/filterRowsUtils.ts", "../../../../js/node_modules/@tanstack/table-core/src/utils/getFacetedRowModel.ts", "../../../../js/node_modules/@tanstack/table-core/src/utils/getFacetedUniqueValues.ts", "../../../../js/node_modules/@tanstack/table-core/src/utils/getFilteredRowModel.ts", "../../../../js/node_modules/@tanstack/table-core/src/utils/getGroupedRowModel.ts", "../../../../js/node_modules/@tanstack/table-core/src/utils/getPaginationRowModel.ts", "../../../../js/node_modules/@tanstack/table-core/src/utils/getSortedRowModel.ts", "../../../../js/node_modules/@tanstack/react-table/src/index.tsx", "../../../../js/node_modules/@tanstack/virtual-core/src/utils.ts", "../../../../js/node_modules/@tanstack/virtual-core/src/index.ts", "../../../../js/node_modules/@tanstack/react-virtual/src/index.tsx", "../../../../js/node_modules/preact/compat/client.mjs", "../../../../js/node_modules/immer/src/utils/env.ts", "../../../../js/node_modules/immer/src/utils/errors.ts", "../../../../js/node_modules/immer/src/utils/common.ts", "../../../../js/node_modules/immer/src/utils/plugins.ts", "../../../../js/node_modules/immer/src/core/scope.ts", "../../../../js/node_modules/immer/src/core/finalize.ts", "../../../../js/node_modules/immer/src/core/proxy.ts", "../../../../js/node_modules/immer/src/core/immerClass.ts", "../../../../js/node_modules/immer/src/core/current.ts", "../../../../js/node_modules/immer/src/plugins/patches.ts", "../../../../js/node_modules/immer/src/plugins/mapset.ts", "../../../../js/node_modules/immer/src/immer.ts", "../../../../js/node_modules/use-immer/src/index.ts", "../../../../js/data-frame/request.ts", "../../../../js/data-frame/data-update.tsx", "../../../../js/data-frame/cell.tsx", "../../../../js/data-frame/cell-edit-map.tsx", "../../../../js/data-frame/dom-utils.tsx", "../../../../js/data-frame/filter-numeric.tsx", "../../../../js/data-frame/filter.tsx", "../../../../js/data-frame/immutable-set.tsx", "../../../../js/data-frame/selection.tsx", "../../../../js/data-frame/sort.ts", "../../../../js/data-frame/sort-arrows.tsx", "../../../../js/data-frame/style-info.ts", "../../../../js/data-frame/styles.scss", "../../../../js/data-frame/tabindex-group.ts", "../../../../js/data-frame/table-summary.tsx", "../../../../js/data-frame/index.tsx"],
  "sourcesContent": ["/** Normal hydration that attaches to a DOM tree but does not diff it. */\nexport const MODE_HYDRATE = 1 << 5;\n/** Signifies this VNode suspended on the previous render */\nexport const MODE_SUSPENDED = 1 << 7;\n/** Indicates that this node needs to be inserted while patching children */\nexport const INSERT_VNODE = 1 << 16;\n/** Indicates a VNode has been matched with another VNode in the diff */\nexport const MATCHED = 1 << 17;\n\n/** Reset all mode flags */\nexport const RESET_MODE = ~(MODE_HYDRATE | MODE_SUSPENDED);\n\nexport const EMPTY_OBJ = /** @type {any} */ ({});\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL =\n\t/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { EMPTY_ARR } from './constants';\n\nexport const isArray = Array.isArray;\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-expect-error We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {preact.ContainerNode} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n", "import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n", "import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {VNode[\"type\"]} type The node name or Component constructor for this\n * virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the\n * virtual node\n * @returns {VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\t/** @type {VNode} */\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original,\n\t\t_index: -1,\n\t\t_flags: 0\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor == undefined;\n", "import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\nimport { MODE_HYDRATE } from './constants';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function BaseComponent(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nBaseComponent.prototype.setState = function (update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) {\n\t\t\tthis._stateCallbacks.push(callback);\n\t\t}\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nBaseComponent.prototype.forceUpdate = function (callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {ComponentChildren | void}\n */\nBaseComponent.prototype.render = Fragment;\n\n/**\n * @param {VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._index + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet oldVNode = component._vnode,\n\t\toldDom = oldVNode._dom,\n\t\tcommitQueue = [],\n\t\trefQueue = [];\n\n\tif (component._parentDom) {\n\t\tconst newVNode = assign({}, oldVNode);\n\t\tnewVNode._original = oldVNode._original + 1;\n\t\tif (options.vnode) options.vnode(newVNode);\n\n\t\tdiff(\n\t\t\tcomponent._parentDom,\n\t\t\tnewVNode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tcomponent._parentDom.namespaceURI,\n\t\t\toldVNode._flags & MODE_HYDRATE ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(oldVNode) : oldDom,\n\t\t\t!!(oldVNode._flags & MODE_HYDRATE),\n\t\t\trefQueue\n\t\t);\n\n\t\tnewVNode._original = oldVNode._original;\n\t\tnewVNode._parent._children[newVNode._index] = newVNode;\n\t\tcommitRoot(commitQueue, newVNode, refQueue);\n\n\t\tif (newVNode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(newVNode);\n\t\t}\n\t}\n}\n\n/**\n * @param {VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<Component>}\n */\nlet rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\nconst defer =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\n\n/**\n * Enqueue a rerender of a component\n * @param {Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/**\n * @param {Component} a\n * @param {Component} b\n */\nconst depthSort = (a, b) => a._vnode._depth - b._vnode._depth;\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet c;\n\trerenderQueue.sort(depthSort);\n\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t// process() calls from getting scheduled while `queue` is still being consumed.\n\twhile ((c = rerenderQueue.shift())) {\n\t\tif (c._dirty) {\n\t\t\tlet renderQueueLength = rerenderQueue.length;\n\t\t\trenderComponent(c);\n\t\t\tif (rerenderQueue.length > renderQueueLength) {\n\t\t\t\t// When i.e. rerendering a provider additional new items can be injected, we want to\n\t\t\t\t// keep the order from top to bottom with those new items so we can handle them in a\n\t\t\t\t// single pass\n\t\t\t\trerenderQueue.sort(depthSort);\n\t\t\t}\n\t\t}\n\t}\n\tprocess._rerenderCount = 0;\n}\n\nprocess._rerenderCount = 0;\n", "import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value == null ? '' : value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n// A logical clock to solve issues like https://github.com/preactjs/preact/issues/3927.\n// When the DOM performs an event it leaves micro-ticks in between bubbling up which means that\n// an event can trigger on a newly reated DOM-node while the event bubbles up.\n//\n// Originally inspired by Vue\n// (https://github.com/vuejs/core/blob/caeb8a68811a1b0f79/packages/runtime-dom/src/modules/events.ts#L90-L101),\n// but modified to use a logical clock instead of Date.now() in case event handlers get attached\n// and events get dispatched during the same millisecond.\n//\n// The clock is incremented after each new event dispatch. This allows 1 000 000 new events\n// per second for over 280 years before the value reaches Number.MAX_SAFE_INTEGER (2**53 - 1).\nlet eventClock = 0;\n\n/**\n * Set a property value on a DOM node\n * @param {PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {string} namespace Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, namespace) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture =\n\t\t\tname !== (name = name.replace(/(PointerCapture)$|Capture$/i, '$1'));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (\n\t\t\tname.toLowerCase() in dom ||\n\t\t\tname === 'onFocusOut' ||\n\t\t\tname === 'onFocusIn'\n\t\t)\n\t\t\tname = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tvalue._attached = eventClock;\n\t\t\t\tdom.addEventListener(\n\t\t\t\t\tname,\n\t\t\t\t\tuseCapture ? eventProxyCapture : eventProxy,\n\t\t\t\t\tuseCapture\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tvalue._attached = oldValue._attached;\n\t\t\t}\n\t\t} else {\n\t\t\tdom.removeEventListener(\n\t\t\t\tname,\n\t\t\t\tuseCapture ? eventProxyCapture : eventProxy,\n\t\t\t\tuseCapture\n\t\t\t);\n\t\t}\n\t} else {\n\t\tif (namespace == 'http://www.w3.org/2000/svg') {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname != 'width' &&\n\t\t\tname != 'height' &&\n\t\t\tname != 'href' &&\n\t\t\tname != 'list' &&\n\t\t\tname != 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname != 'tabIndex' &&\n\t\t\tname != 'download' &&\n\t\t\tname != 'rowSpan' &&\n\t\t\tname != 'colSpan' &&\n\t\t\tname != 'role' &&\n\t\t\tname != 'popover' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// aria- and data- attributes have no boolean representation.\n\t\t// A `false` value is different from the attribute not being\n\t\t// present, so we can't remove it. For non-boolean aria\n\t\t// attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost too many bytes. On top of\n\t\t// that other frameworks generally stringify `false`.\n\n\t\tif (typeof value == 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (value != null && (value !== false || name[4] === '-')) {\n\t\t\tdom.setAttribute(name, name == 'popover' && value == true ? '' : value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Create an event proxy function.\n * @param {boolean} useCapture Is the event handler for the capture phase.\n * @private\n */\nfunction createEventProxy(useCapture) {\n\t/**\n\t * Proxy an event to hooked event handlers\n\t * @param {PreactEvent} e The event object from the browser\n\t * @private\n\t */\n\treturn function (e) {\n\t\tif (this._listeners) {\n\t\t\tconst eventHandler = this._listeners[e.type + useCapture];\n\t\t\tif (e._dispatched == null) {\n\t\t\t\te._dispatched = eventClock++;\n\n\t\t\t\t// When `e._dispatched` is smaller than the time when the targeted event\n\t\t\t\t// handler was attached we know we have bubbled up to an element that was added\n\t\t\t\t// during patching the DOM.\n\t\t\t} else if (e._dispatched < eventHandler._attached) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn eventHandler(options.event ? options.event(e) : e);\n\t\t}\n\t};\n}\n\nconst eventProxy = createEventProxy(false);\nconst eventProxyCapture = createEventProxy(true);\n", "import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\t/** @type {Component[] | null} */\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.componentWillUnmount = () => {\n\t\t\t\t\tsubs = null;\n\t\t\t\t};\n\n\t\t\t\tthis.shouldComponentUpdate = function (_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\tsubs.some(c => {\n\t\t\t\t\t\t\tc._force = true;\n\t\t\t\t\t\t\tenqueueRender(c);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tif (subs) {\n\t\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType =\n\t\tcontext);\n}\n", "import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR, INSERT_VNODE, MATCHED } from '../constants';\nimport { isArray } from '../util';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {PreactElement} parentDom The DOM element whose children are being\n * diffed\n * @param {ComponentChildren[]} renderResult\n * @param {VNode} newParentVNode The new virtual node whose children should be\n * diff'ed against oldParentVNode\n * @param {VNode} oldParentVNode The old virtual node whose children should be\n * diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by\n * getChildContext\n * @param {string} namespace Current namespace of the DOM node (HTML, SVG, or MathML)\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {PreactElement} oldDom The current attached DOM element any new dom\n * elements should be placed around. Likely `null` on first render (except when\n * hydrating). Can be a sibling DOM element when diffing Fragments that have\n * siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tnamespace,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating,\n\trefQueue\n) {\n\tlet i,\n\t\t/** @type {VNode} */\n\t\toldVNode,\n\t\t/** @type {VNode} */\n\t\tchildVNode,\n\t\t/** @type {PreactElement} */\n\t\tnewDom,\n\t\t/** @type {PreactElement} */\n\t\tfirstChildDom;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\t/** @type {VNode[]} */\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet newChildrenLength = renderResult.length;\n\n\tnewParentVNode._nextDom = oldDom;\n\tconstructNewChildrenArray(newParentVNode, renderResult, oldChildren);\n\toldDom = newParentVNode._nextDom;\n\n\tfor (i = 0; i < newChildrenLength; i++) {\n\t\tchildVNode = newParentVNode._children[i];\n\t\tif (\n\t\t\tchildVNode == null ||\n\t\t\ttypeof childVNode == 'boolean' ||\n\t\t\ttypeof childVNode == 'function'\n\t\t) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// At this point, constructNewChildrenArray has assigned _index to be the\n\t\t// matchingIndex for this VNode's oldVNode (or -1 if there is no oldVNode).\n\t\tif (childVNode._index === -1) {\n\t\t\toldVNode = EMPTY_OBJ;\n\t\t} else {\n\t\t\toldVNode = oldChildren[childVNode._index] || EMPTY_OBJ;\n\t\t}\n\n\t\t// Update childVNode._index to its final index\n\t\tchildVNode._index = i;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tnamespace,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating,\n\t\t\trefQueue\n\t\t);\n\n\t\t// Adjust DOM nodes\n\t\tnewDom = childVNode._dom;\n\t\tif (childVNode.ref && oldVNode.ref != childVNode.ref) {\n\t\t\tif (oldVNode.ref) {\n\t\t\t\tapplyRef(oldVNode.ref, null, childVNode);\n\t\t\t}\n\t\t\trefQueue.push(\n\t\t\t\tchildVNode.ref,\n\t\t\t\tchildVNode._component || newDom,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t}\n\n\t\tif (firstChildDom == null && newDom != null) {\n\t\t\tfirstChildDom = newDom;\n\t\t}\n\n\t\tif (\n\t\t\tchildVNode._flags & INSERT_VNODE ||\n\t\t\toldVNode._children === childVNode._children\n\t\t) {\n\t\t\tif (\n\t\t\t\toldDom &&\n\t\t\t\ttypeof childVNode.type == 'string' &&\n\t\t\t\t// @ts-expect-error olDom should be present on a DOM node\n\t\t\t\t!parentDom.contains(oldDom)\n\t\t\t) {\n\t\t\t\toldDom = getDomSibling(oldVNode);\n\t\t\t}\n\t\t\toldDom = insert(childVNode, oldDom, parentDom);\n\t\t} else if (\n\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\tchildVNode._nextDom !== undefined\n\t\t) {\n\t\t\t// Since Fragments or components that return Fragment like VNodes can\n\t\t\t// contain multiple DOM nodes as the same level, continue the diff from\n\t\t\t// the sibling of last DOM child of this child VNode\n\t\t\toldDom = childVNode._nextDom;\n\t\t} else if (newDom) {\n\t\t\toldDom = newDom.nextSibling;\n\t\t}\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because it\n\t\t// is only used by `diffChildren` to determine where to resume the diff\n\t\t// after diffing Components and Fragments. Once we store it the nextDOM\n\t\t// local var, we can clean up the property. Also prevents us hanging on to\n\t\t// DOM nodes that may have been unmounted.\n\t\tchildVNode._nextDom = undefined;\n\n\t\t// Unset diffing flags\n\t\tchildVNode._flags &= ~(INSERT_VNODE | MATCHED);\n\t}\n\n\t// TODO: With new child diffing algo, consider alt ways to diff Fragments.\n\t// Such as dropping oldDom and moving fragments in place\n\t//\n\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t// _nextDom property to the nextSibling of its last child DOM node.\n\t//\n\t// `oldDom` contains the correct value here because if the last child\n\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t// node's nextSibling.\n\tnewParentVNode._nextDom = oldDom;\n\tnewParentVNode._dom = firstChildDom;\n}\n\n/**\n * @param {VNode} newParentVNode\n * @param {ComponentChildren[]} renderResult\n * @param {VNode[]} oldChildren\n */\nfunction constructNewChildrenArray(newParentVNode, renderResult, oldChildren) {\n\t/** @type {number} */\n\tlet i;\n\t/** @type {VNode} */\n\tlet childVNode;\n\t/** @type {VNode} */\n\tlet oldVNode;\n\n\tconst newChildrenLength = renderResult.length;\n\tlet oldChildrenLength = oldChildren.length,\n\t\tremainingOldChildren = oldChildrenLength;\n\n\tlet skew = 0;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < newChildrenLength; i++) {\n\t\t// @ts-expect-error We are reusing the childVNode variable to hold both the\n\t\t// pre and post normalized childVNode\n\t\tchildVNode = renderResult[i];\n\n\t\tif (\n\t\t\tchildVNode == null ||\n\t\t\ttypeof childVNode == 'boolean' ||\n\t\t\ttypeof childVNode == 'function'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint' ||\n\t\t\tchildVNode.constructor == String\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode.constructor === undefined && childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tchildVNode.ref ? childVNode.ref : null,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\tconst skewedIndex = i + skew;\n\n\t\t// Handle unmounting null placeholders, i.e. VNode => null in unkeyed children\n\t\tif (childVNode == null) {\n\t\t\toldVNode = oldChildren[skewedIndex];\n\t\t\tif (\n\t\t\t\toldVNode &&\n\t\t\t\toldVNode.key == null &&\n\t\t\t\toldVNode._dom &&\n\t\t\t\t(oldVNode._flags & MATCHED) === 0\n\t\t\t) {\n\t\t\t\tif (oldVNode._dom == newParentVNode._nextDom) {\n\t\t\t\t\tnewParentVNode._nextDom = getDomSibling(oldVNode);\n\t\t\t\t}\n\n\t\t\t\tunmount(oldVNode, oldVNode, false);\n\n\t\t\t\t// Explicitly nullify this position in oldChildren instead of just\n\t\t\t\t// setting `_match=true` to prevent other routines (e.g.\n\t\t\t\t// `findMatchingIndex` or `getDomSibling`) from thinking VNodes or DOM\n\t\t\t\t// nodes in this position are still available to be used in diffing when\n\t\t\t\t// they have actually already been unmounted. For example, by only\n\t\t\t\t// setting `_match=true` here, the unmounting loop later would attempt\n\t\t\t\t// to unmount this VNode again seeing `_match==true`.  Further,\n\t\t\t\t// getDomSibling doesn't know about _match and so would incorrectly\n\t\t\t\t// assume DOM nodes in this subtree are mounted and usable.\n\t\t\t\toldChildren[skewedIndex] = null;\n\t\t\t\tremainingOldChildren--;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\tconst matchingIndex = findMatchingIndex(\n\t\t\tchildVNode,\n\t\t\toldChildren,\n\t\t\tskewedIndex,\n\t\t\tremainingOldChildren\n\t\t);\n\n\t\t// Temporarily store the matchingIndex on the _index property so we can pull\n\t\t// out the oldVNode in diffChildren. We'll override this to the VNode's\n\t\t// final index after using this property to get the oldVNode\n\t\tchildVNode._index = matchingIndex;\n\n\t\toldVNode = null;\n\t\tif (matchingIndex !== -1) {\n\t\t\toldVNode = oldChildren[matchingIndex];\n\t\t\tremainingOldChildren--;\n\t\t\tif (oldVNode) {\n\t\t\t\toldVNode._flags |= MATCHED;\n\t\t\t}\n\t\t}\n\n\t\t// Here, we define isMounting for the purposes of the skew diffing\n\t\t// algorithm. Nodes that are unsuspending are considered mounting and we detect\n\t\t// this by checking if oldVNode._original === null\n\t\tconst isMounting = oldVNode == null || oldVNode._original === null;\n\n\t\tif (isMounting) {\n\t\t\tif (matchingIndex == -1) {\n\t\t\t\tskew--;\n\t\t\t}\n\n\t\t\t// If we are mounting a DOM VNode, mark it for insertion\n\t\t\tif (typeof childVNode.type != 'function') {\n\t\t\t\tchildVNode._flags |= INSERT_VNODE;\n\t\t\t}\n\t\t} else if (matchingIndex !== skewedIndex) {\n\t\t\tif (matchingIndex == skewedIndex - 1) {\n\t\t\t\tskew = matchingIndex - skewedIndex;\n\t\t\t} else if (matchingIndex == skewedIndex + 1) {\n\t\t\t\tskew++;\n\t\t\t} else if (matchingIndex > skewedIndex) {\n\t\t\t\t// Our matched DOM-node is further in the list of children than\n\t\t\t\t// where it's at now.\n\n\t\t\t\t// When the remaining old children is bigger than the new-children\n\t\t\t\t// minus our skewed index we know we are dealing with a shrinking list\n\t\t\t\t// we have to increase our skew with the matchedIndex - the skewed index\n\t\t\t\tif (remainingOldChildren > newChildrenLength - skewedIndex) {\n\t\t\t\t\tskew += matchingIndex - skewedIndex;\n\t\t\t\t} else {\n\t\t\t\t\t// If we have matched all the children just decrease the skew\n\t\t\t\t\tskew--;\n\t\t\t\t}\n\t\t\t} else if (matchingIndex < skewedIndex) {\n\t\t\t\t// When our new position is in front of our old position than we increase the skew\n\t\t\t\tskew++;\n\t\t\t}\n\n\t\t\t// Move this VNode's DOM if the original index (matchingIndex) doesn't\n\t\t\t// match the new skew index (i + new skew)\n\t\t\tif (matchingIndex !== i + skew) {\n\t\t\t\tchildVNode._flags |= INSERT_VNODE;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove remaining oldChildren if there are any. Loop forwards so that as we\n\t// unmount DOM from the beginning of the oldChildren, we can adjust oldDom to\n\t// point to the next child, which needs to be the first DOM node that won't be\n\t// unmounted.\n\tif (remainingOldChildren) {\n\t\tfor (i = 0; i < oldChildrenLength; i++) {\n\t\t\toldVNode = oldChildren[i];\n\t\t\tif (oldVNode != null && (oldVNode._flags & MATCHED) === 0) {\n\t\t\t\tif (oldVNode._dom == newParentVNode._nextDom) {\n\t\t\t\t\tnewParentVNode._nextDom = getDomSibling(oldVNode);\n\t\t\t\t}\n\n\t\t\t\tunmount(oldVNode, oldVNode);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {VNode} parentVNode\n * @param {PreactElement} oldDom\n * @param {PreactElement} parentDom\n * @returns {PreactElement}\n */\nfunction insert(parentVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\n\tif (typeof parentVNode.type == 'function') {\n\t\tlet children = parentVNode._children;\n\t\tfor (let i = 0; children && i < children.length; i++) {\n\t\t\tif (children[i]) {\n\t\t\t\t// If we enter this code path on sCU bailout, where we copy\n\t\t\t\t// oldVNode._children to newVNode._children, we need to update the old\n\t\t\t\t// children's _parent pointer to point to the newVNode (parentVNode\n\t\t\t\t// here).\n\t\t\t\tchildren[i]._parent = parentVNode;\n\t\t\t\toldDom = insert(children[i], oldDom, parentDom);\n\t\t\t}\n\t\t}\n\n\t\treturn oldDom;\n\t} else if (parentVNode._dom != oldDom) {\n\t\tparentDom.insertBefore(parentVNode._dom, oldDom || null);\n\t\toldDom = parentVNode._dom;\n\t}\n\n\tdo {\n\t\toldDom = oldDom && oldDom.nextSibling;\n\t} while (oldDom != null && oldDom.nodeType === 8);\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {ComponentChildren} children The unflattened children of a virtual\n * node\n * @returns {VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\n/**\n * @param {VNode} childVNode\n * @param {VNode[]} oldChildren\n * @param {number} skewedIndex\n * @param {number} remainingOldChildren\n * @returns {number}\n */\nfunction findMatchingIndex(\n\tchildVNode,\n\toldChildren,\n\tskewedIndex,\n\tremainingOldChildren\n) {\n\tconst key = childVNode.key;\n\tconst type = childVNode.type;\n\tlet x = skewedIndex - 1;\n\tlet y = skewedIndex + 1;\n\tlet oldVNode = oldChildren[skewedIndex];\n\n\t// We only need to perform a search if there are more children\n\t// (remainingOldChildren) to search. However, if the oldVNode we just looked\n\t// at skewedIndex was not already used in this diff, then there must be at\n\t// least 1 other (so greater than 1) remainingOldChildren to attempt to match\n\t// against. So the following condition checks that ensuring\n\t// remainingOldChildren > 1 if the oldVNode is not already used/matched. Else\n\t// if the oldVNode was null or matched, then there could needs to be at least\n\t// 1 (aka `remainingOldChildren > 0`) children to find and compare against.\n\tlet shouldSearch =\n\t\tremainingOldChildren >\n\t\t(oldVNode != null && (oldVNode._flags & MATCHED) === 0 ? 1 : 0);\n\n\tif (\n\t\toldVNode === null ||\n\t\t(oldVNode &&\n\t\t\tkey == oldVNode.key &&\n\t\t\ttype === oldVNode.type &&\n\t\t\t(oldVNode._flags & MATCHED) === 0)\n\t) {\n\t\treturn skewedIndex;\n\t} else if (shouldSearch) {\n\t\twhile (x >= 0 || y < oldChildren.length) {\n\t\t\tif (x >= 0) {\n\t\t\t\toldVNode = oldChildren[x];\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\t(oldVNode._flags & MATCHED) === 0 &&\n\t\t\t\t\tkey == oldVNode.key &&\n\t\t\t\t\ttype === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\treturn x;\n\t\t\t\t}\n\t\t\t\tx--;\n\t\t\t}\n\n\t\t\tif (y < oldChildren.length) {\n\t\t\t\toldVNode = oldChildren[y];\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\t(oldVNode._flags & MATCHED) === 0 &&\n\t\t\t\t\tkey == oldVNode.key &&\n\t\t\t\t\ttype === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\treturn y;\n\t\t\t\t}\n\t\t\t\ty++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn -1;\n}\n", "import {\n\tEMPTY_OBJ,\n\tMODE_HYDRATE,\n\tMODE_SUSPENDED,\n\tRESET_MODE\n} from '../constants';\nimport { BaseComponent, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { setProperty } from './props';\nimport { assign, isArray, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {PreactElement} parentDom The parent of the DOM element\n * @param {VNode} newVNode The new virtual node\n * @param {VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by\n * getChildContext\n * @param {string} namespace Current namespace of the DOM node (HTML, SVG, or MathML)\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {PreactElement} oldDom The current attached DOM element any new dom\n * elements should be placed around. Likely `null` on first render (except when\n * hydrating). Can be a sibling DOM element when diffing Fragments that have\n * siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tnamespace,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating,\n\trefQueue\n) {\n\t/** @type {any} */\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._flags & MODE_SUSPENDED) {\n\t\tisHydrating = !!(oldVNode._flags & MODE_HYDRATE);\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\touter: if (typeof newType == 'function') {\n\t\ttry {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\t\t\tconst isClassComponent =\n\t\t\t\t'prototype' in newType && newType.prototype.render;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif (isClassComponent) {\n\t\t\t\t\t// @ts-expect-error The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-expect-error Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new BaseComponent(\n\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (isClassComponent && c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\n\t\t\tif (isClassComponent && newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\t\t\tc._vnode = newVNode;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tisClassComponent &&\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (isClassComponent && c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tisClassComponent &&\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t!c._force &&\n\t\t\t\t\t((c.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\t\tnewVNode._original === oldVNode._original)\n\t\t\t\t) {\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) {\n\t\t\t\t\t\t// When we are dealing with a bail because of sCU we have to update\n\t\t\t\t\t\t// the props, state and dirty-state.\n\t\t\t\t\t\t// when we are dealing with strict-equality we don't as the child could still\n\t\t\t\t\t\t// be dirtied see #3883\n\t\t\t\t\t\tc.props = newProps;\n\t\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t\tc._dirty = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\n\t\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t\t}\n\t\t\t\t\tc._stateCallbacks = [];\n\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (isClassComponent && c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc._parentDom = parentDom;\n\t\t\tc._force = false;\n\n\t\t\tlet renderHook = options._render,\n\t\t\t\tcount = 0;\n\t\t\tif (isClassComponent) {\n\t\t\t\tc.state = c._nextState;\n\t\t\t\tc._dirty = false;\n\n\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t}\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\tc._dirty = false;\n\t\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\t\t// Handle setState called in render, see #2553\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t} while (c._dirty && ++count < 25);\n\t\t\t}\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (isClassComponent && !isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tisArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tnamespace,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating,\n\t\t\t\trefQueue\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._flags &= RESET_MODE;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tnewVNode._original = null;\n\t\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\t\tnewVNode._dom = oldDom;\n\t\t\t\tnewVNode._flags |= isHydrating\n\t\t\t\t\t? MODE_HYDRATE | MODE_SUSPENDED\n\t\t\t\t\t: MODE_HYDRATE;\n\t\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t\t// ^ could possibly be simplified to:\n\t\t\t\t// excessDomChildren.length = 0;\n\t\t\t} else {\n\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t}\n\t\t\toptions._catchError(e, newVNode, oldVNode);\n\t\t}\n\t} else if (\n\t\texcessDomChildren == null &&\n\t\tnewVNode._original === oldVNode._original\n\t) {\n\t\tnewVNode._children = oldVNode._children;\n\t\tnewVNode._dom = oldVNode._dom;\n\t} else {\n\t\tnewVNode._dom = diffElementNodes(\n\t\t\toldVNode._dom,\n\t\t\tnewVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tnamespace,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\tisHydrating,\n\t\t\trefQueue\n\t\t);\n\t}\n\n\tif ((tmp = options.diffed)) tmp(newVNode);\n}\n\n/**\n * @param {Array<Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {VNode} root\n */\nexport function commitRoot(commitQueue, root, refQueue) {\n\troot._nextDom = undefined;\n\n\tfor (let i = 0; i < refQueue.length; i++) {\n\t\tapplyRef(refQueue[i], refQueue[++i], refQueue[++i]);\n\t}\n\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-expect-error Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-expect-error See above comment on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {PreactElement} dom The DOM element representing the virtual nodes\n * being diffed\n * @param {VNode} newVNode The new virtual node\n * @param {VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {string} namespace Current namespace of the DOM node (HTML, SVG, or MathML)\n * @param {Array<PreactElement>} excessDomChildren\n * @param {Array<Component>} commitQueue List of components which have callbacks\n * to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @param {any[]} refQueue an array of elements needed to invoke refs\n * @returns {PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tnamespace,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating,\n\trefQueue\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = /** @type {string} */ (newVNode.type);\n\t/** @type {any} */\n\tlet i;\n\t/** @type {{ __html?: string }} */\n\tlet newHtml;\n\t/** @type {{ __html?: string }} */\n\tlet oldHtml;\n\t/** @type {ComponentChildren} */\n\tlet newChildren;\n\tlet value;\n\tlet inputValue;\n\tlet checked;\n\n\t// Tracks entering and exiting namespaces when descending through the tree.\n\tif (nodeType === 'svg') namespace = 'http://www.w3.org/2000/svg';\n\telse if (nodeType === 'math')\n\t\tnamespace = 'http://www.w3.org/1998/Math/MathML';\n\telse if (!namespace) namespace = 'http://www.w3.org/1999/xhtml';\n\n\tif (excessDomChildren != null) {\n\t\tfor (i = 0; i < excessDomChildren.length; i++) {\n\t\t\tvalue = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tvalue &&\n\t\t\t\t'setAttribute' in value === !!nodeType &&\n\t\t\t\t(nodeType ? value.localName === nodeType : value.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = value;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tdom = document.createElementNS(\n\t\t\tnamespace,\n\t\t\tnodeType,\n\t\t\tnewProps.is && newProps\n\t\t);\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in\n\t\t// case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\t// If we are in a situation where we are not hydrating but are using\n\t\t// existing DOM (e.g. replaceNode) we should read the existing DOM\n\t\t// attributes to diff them\n\t\tif (!isHydrating && excessDomChildren != null) {\n\t\t\toldProps = {};\n\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\tvalue = dom.attributes[i];\n\t\t\t\toldProps[value.name] = value.value;\n\t\t\t}\n\t\t}\n\n\t\tfor (i in oldProps) {\n\t\t\tvalue = oldProps[i];\n\t\t\tif (i == 'children') {\n\t\t\t} else if (i == 'dangerouslySetInnerHTML') {\n\t\t\t\toldHtml = value;\n\t\t\t} else if (i !== 'key' && !(i in newProps)) {\n\t\t\t\tif (\n\t\t\t\t\t(i == 'value' && 'defaultValue' in newProps) ||\n\t\t\t\t\t(i == 'checked' && 'defaultChecked' in newProps)\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tsetProperty(dom, i, null, value, namespace);\n\t\t\t}\n\t\t}\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tfor (i in newProps) {\n\t\t\tvalue = newProps[i];\n\t\t\tif (i == 'children') {\n\t\t\t\tnewChildren = value;\n\t\t\t} else if (i == 'dangerouslySetInnerHTML') {\n\t\t\t\tnewHtml = value;\n\t\t\t} else if (i == 'value') {\n\t\t\t\tinputValue = value;\n\t\t\t} else if (i == 'checked') {\n\t\t\t\tchecked = value;\n\t\t\t} else if (\n\t\t\t\ti !== 'key' &&\n\t\t\t\t(!isHydrating || typeof value == 'function') &&\n\t\t\t\toldProps[i] !== value\n\t\t\t) {\n\t\t\t\tsetProperty(dom, i, value, oldProps[i], namespace);\n\t\t\t}\n\t\t}\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\tif (\n\t\t\t\t!isHydrating &&\n\t\t\t\t(!oldHtml ||\n\t\t\t\t\t(newHtml.__html !== oldHtml.__html &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML))\n\t\t\t) {\n\t\t\t\tdom.innerHTML = newHtml.__html;\n\t\t\t}\n\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\tif (oldHtml) dom.innerHTML = '';\n\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tisArray(newChildren) ? newChildren : [newChildren],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tnodeType === 'foreignObject'\n\t\t\t\t\t? 'http://www.w3.org/1999/xhtml'\n\t\t\t\t\t: namespace,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating,\n\t\t\t\trefQueue\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// As above, don't diff props during hydration\n\t\tif (!isHydrating) {\n\t\t\ti = 'value';\n\t\t\tif (\n\t\t\t\tinputValue !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(inputValue !== dom[i] ||\n\t\t\t\t\t(nodeType === 'progress' && !inputValue) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && inputValue !== oldProps[i]))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, i, inputValue, oldProps[i], namespace);\n\t\t\t}\n\n\t\t\ti = 'checked';\n\t\t\tif (checked !== undefined && checked !== dom[i]) {\n\t\t\t\tsetProperty(dom, i, checked, oldProps[i], namespace);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {Ref<any>} ref\n * @param {any} value\n * @param {VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {VNode} vnode The virtual node to unmount\n * @param {VNode} parentVNode The parent of the VNode that initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) {\n\t\t\tapplyRef(r, null, parentVNode);\n\t\t}\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(\n\t\t\t\t\tr[i],\n\t\t\t\t\tparentVNode,\n\t\t\t\t\tskipRemove || typeof vnode.type != 'function'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove && vnode._dom != null) {\n\t\tremoveNode(vnode._dom);\n\t}\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._component = vnode._parent = vnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n", "import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {ComponentChild} vnode The virtual node to render\n * @param {PreactElement} parentDom The DOM element to render into\n * @param {PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode == 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = ((!isHydrating && replaceNode) || parentDom)._children =\n\t\tcreateElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [],\n\t\trefQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.namespaceURI,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t\t? null\n\t\t\t\t: parentDom.firstChild\n\t\t\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t\t? oldVNode._dom\n\t\t\t\t: parentDom.firstChild,\n\t\tisHydrating,\n\t\trefQueue\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode, refQueue);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {ComponentChild} vnode The virtual node to render\n * @param {PreactElement} parentDom The DOM element to update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n", "import { assign, slice } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its\n * children.\n * @param {VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<ComponentChildren>} rest Any additional arguments will be used\n * as replacement children.\n * @returns {VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\n\tlet defaultProps;\n\n\tif (vnode.type && vnode.type.defaultProps) {\n\t\tdefaultProps = vnode.type.defaultProps;\n\t}\n\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse if (props[i] === undefined && defaultProps !== undefined) {\n\t\t\tnormalizedProps[i] = defaultProps[i];\n\t\t} else {\n\t\t\tnormalizedProps[i] = props[i];\n\t\t}\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n", "/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {VNode} vnode The vnode that threw the error that was caught (except\n * for unmounting when this parameter is the highest parent that was being\n * unmounted)\n * @param {VNode} [oldVNode]\n * @param {ErrorInfo} [errorInfo]\n */\nexport function _catchError(error, vnode, oldVNode, errorInfo) {\n\t/** @type {Component} */\n\tlet component,\n\t\t/** @type {ComponentType} */\n\t\tctor,\n\t\t/** @type {boolean} */\n\t\thandled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error, errorInfo || {});\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n", "import { options as _options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n\n/** @type {import('./internal').Component} */\nlet previousComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\n// Cast to use internal Options type\nconst options = /** @type {import('./internal').Options} */ (_options);\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\nlet oldRoot = options._root;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._root = (vnode, parentDom) => {\n\tif (vnode && parentDom._children && parentDom._children._mask) {\n\t\tvnode._mask = parentDom._children._mask;\n\t}\n\n\tif (oldRoot) oldRoot(vnode, parentDom);\n};\n\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\tif (previousComponent === currentComponent) {\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentComponent._renderCallbacks = [];\n\t\t\thooks._list.forEach(hookItem => {\n\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t}\n\t\t\t\thookItem._pendingArgs = hookItem._nextValue = undefined;\n\t\t\t});\n\t\t} else {\n\t\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentIndex = 0;\n\t\t}\n\t}\n\tpreviousComponent = currentComponent;\n};\n\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tif (c.__hooks._pendingEffects.length) afterPaint(afterPaintEffects.push(c));\n\t\tc.__hooks._list.forEach(hookItem => {\n\t\t\tif (hookItem._pendingArgs) {\n\t\t\t\thookItem._args = hookItem._pendingArgs;\n\t\t\t}\n\t\t\thookItem._pendingArgs = undefined;\n\t\t});\n\t}\n\tpreviousComponent = currentComponent = null;\n};\n\n// TODO: Improve typing of commitQueue parameter\n/** @type {(vnode: import('./internal').VNode, commitQueue: any) => void} */\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tlet hasErrored;\n\t\tc.__hooks._list.forEach(s => {\n\t\t\ttry {\n\t\t\t\tinvokeCleanup(s);\n\t\t\t} catch (e) {\n\t\t\t\thasErrored = e;\n\t\t\t}\n\t\t});\n\t\tc.__hooks = undefined;\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({});\n\t}\n\n\treturn hooks._list[index];\n}\n\n/**\n * @template {unknown} S\n * @param {import('./index').Dispatch<import('./index').StateUpdater<S>>} [initialState]\n * @returns {[S, (state: S) => void]}\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @template {unknown} S\n * @template {unknown} A\n * @param {import('./index').Reducer<S, A>} reducer\n * @param {import('./index').Dispatch<import('./index').StateUpdater<S>>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ S, (state: S) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst currentValue = hookState._nextValue\n\t\t\t\t\t? hookState._nextValue[0]\n\t\t\t\t\t: hookState._value[0];\n\t\t\t\tconst nextValue = hookState._reducer(currentValue, action);\n\n\t\t\t\tif (currentValue !== nextValue) {\n\t\t\t\t\thookState._nextValue = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\n\t\tif (!currentComponent._hasScuFromHooks) {\n\t\t\tcurrentComponent._hasScuFromHooks = true;\n\t\t\tlet prevScu = currentComponent.shouldComponentUpdate;\n\t\t\tconst prevCWU = currentComponent.componentWillUpdate;\n\n\t\t\t// If we're dealing with a forced update `shouldComponentUpdate` will\n\t\t\t// not be called. But we use that to update the hook values, so we\n\t\t\t// need to call it.\n\t\t\tcurrentComponent.componentWillUpdate = function (p, s, c) {\n\t\t\t\tif (this._force) {\n\t\t\t\t\tlet tmp = prevScu;\n\t\t\t\t\t// Clear to avoid other sCU hooks from being called\n\t\t\t\t\tprevScu = undefined;\n\t\t\t\t\tupdateHookState(p, s, c);\n\t\t\t\t\tprevScu = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (prevCWU) prevCWU.call(this, p, s, c);\n\t\t\t};\n\n\t\t\t// This SCU has the purpose of bailing out after repeated updates\n\t\t\t// to stateful hooks.\n\t\t\t// we store the next value in _nextValue[0] and keep doing that for all\n\t\t\t// state setters, if we have next states and\n\t\t\t// all next states within a component end up being equal to their original state\n\t\t\t// we are safe to bail out for this specific component.\n\t\t\t/**\n\t\t\t *\n\t\t\t * @type {import('./internal').Component[\"shouldComponentUpdate\"]}\n\t\t\t */\n\t\t\t// @ts-ignore - We don't use TS to downtranspile\n\t\t\t// eslint-disable-next-line no-inner-declarations\n\t\t\tfunction updateHookState(p, s, c) {\n\t\t\t\tif (!hookState._component.__hooks) return true;\n\n\t\t\t\t/** @type {(x: import('./internal').HookState) => x is import('./internal').ReducerHookState} */\n\t\t\t\tconst isStateHook = x => !!x._component;\n\t\t\t\tconst stateHooks =\n\t\t\t\t\thookState._component.__hooks._list.filter(isStateHook);\n\n\t\t\t\tconst allHooksEmpty = stateHooks.every(x => !x._nextValue);\n\t\t\t\t// When we have no updated hooks in the component we invoke the previous SCU or\n\t\t\t\t// traverse the VDOM tree further.\n\t\t\t\tif (allHooksEmpty) {\n\t\t\t\t\treturn prevScu ? prevScu.call(this, p, s, c) : true;\n\t\t\t\t}\n\n\t\t\t\t// We check whether we have components with a nextValue set that\n\t\t\t\t// have values that aren't equal to one another this pushes\n\t\t\t\t// us to update further down the tree\n\t\t\t\tlet shouldUpdate = false;\n\t\t\t\tstateHooks.forEach(hookItem => {\n\t\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\t\tconst currentValue = hookItem._value[0];\n\t\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t\t\thookItem._nextValue = undefined;\n\t\t\t\t\t\tif (currentValue !== hookItem._value[0]) shouldUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn shouldUpdate || hookState._component.props !== p\n\t\t\t\t\t? prevScu\n\t\t\t\t\t\t? prevScu.call(this, p, s, c)\n\t\t\t\t\t\t: true\n\t\t\t\t\t: false;\n\t\t\t}\n\n\t\t\tcurrentComponent.shouldComponentUpdate = updateHookState;\n\t\t}\n\t}\n\n\treturn hookState._nextValue || hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {unknown[]} args\n * @returns {void}\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {unknown[]} args\n * @returns {void}\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\n/** @type {(initialValue: unknown) => unknown} */\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {unknown[]} args\n * @returns {void}\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') {\n\t\t\t\tref(createHandle());\n\t\t\t\treturn () => ref(null);\n\t\t\t} else if (ref) {\n\t\t\t\tref.current = createHandle();\n\t\t\t\treturn () => (ref.current = null);\n\t\t\t}\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @template {unknown} T\n * @param {() => T} factory\n * @param {unknown[]} args\n * @returns {T}\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState<T>} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._value = factory();\n\t\tstate._args = args;\n\t\tstate._factory = factory;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {unknown[]} args\n * @returns {() => void}\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(\n\t\t\tformatter ? formatter(value) : /** @type {any}*/ (value)\n\t\t);\n\t}\n}\n\n/**\n * @param {(error: unknown, errorInfo: import('preact').ErrorInfo) => void} cb\n * @returns {[unknown, () => void]}\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = (err, errorInfo) => {\n\t\t\tif (state._value) state._value(err, errorInfo);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\n/** @type {() => string} */\nexport function useId() {\n\t/** @type {import('./internal').IdHookState} */\n\tconst state = getHookState(currentIndex++, 11);\n\tif (!state._value) {\n\t\t// Grab either the root node or the nearest async boundary node.\n\t\t/** @type {import('./internal.d').VNode} */\n\t\tlet root = currentComponent._vnode;\n\t\twhile (root !== null && !root._mask && root._parent !== null) {\n\t\t\troot = root._parent;\n\t\t}\n\n\t\tlet mask = root._mask || (root._mask = [0, 0]);\n\t\tstate._value = 'P' + mask[0] + '-' + mask[1]++;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tlet component;\n\twhile ((component = afterPaintEffects.shift())) {\n\t\tif (!component._parentDom || !component.__hooks) continue;\n\t\ttry {\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t} catch (e) {\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t}\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n * @returns {void}\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').HookState} hook\n * @returns {void}\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tlet cleanup = hook._cleanup;\n\tif (typeof cleanup == 'function') {\n\t\thook._cleanup = undefined;\n\t\tcleanup();\n\t}\n\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n * @returns {void}\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {unknown[]} oldArgs\n * @param {unknown[]} newArgs\n * @returns {boolean}\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\n/**\n * @template Arg\n * @param {Arg} arg\n * @param {(arg: Arg) => any} f\n * @returns {any}\n */\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n", "/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Check if two objects have a different shape\n * @param {object} a\n * @param {object} b\n * @returns {boolean}\n */\nexport function shallowDiffers(a, b) {\n\tfor (let i in a) if (i !== '__source' && !(i in b)) return true;\n\tfor (let i in b) if (i !== '__source' && a[i] !== b[i]) return true;\n\treturn false;\n}\n\n/**\n * Check if two values are the same value\n * @param {*} x\n * @param {*} y\n * @returns {boolean}\n */\nexport function is(x, y) {\n\treturn (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y);\n}\n", "import { Component } from 'preact';\nimport { shallowDiffers } from './util';\n\n/**\n * Component class with a predefined `shouldComponentUpdate` implementation\n */\nexport function PureComponent(p, c) {\n\tthis.props = p;\n\tthis.context = c;\n}\nPureComponent.prototype = new Component();\n// Some third-party libraries check if this property is present\nPureComponent.prototype.isPureReactComponent = true;\nPureComponent.prototype.shouldComponentUpdate = function (props, state) {\n\treturn shallowDiffers(this.props, props) || shallowDiffers(this.state, state);\n};\n", "import { createElement } from 'preact';\nimport { shallowDiffers } from './util';\n\n/**\n * Memoize a component, so that it only updates when the props actually have\n * changed. This was previously known as `React.pure`.\n * @param {import('./internal').FunctionComponent} c functional component\n * @param {(prev: object, next: object) => boolean} [comparer] Custom equality function\n * @returns {import('./internal').FunctionComponent}\n */\nexport function memo(c, comparer) {\n\tfunction shouldUpdate(nextProps) {\n\t\tlet ref = this.props.ref;\n\t\tlet updateRef = ref == nextProps.ref;\n\t\tif (!updateRef && ref) {\n\t\t\tref.call ? ref(null) : (ref.current = null);\n\t\t}\n\n\t\tif (!comparer) {\n\t\t\treturn shallowDiffers(this.props, nextProps);\n\t\t}\n\n\t\treturn !comparer(this.props, nextProps) || !updateRef;\n\t}\n\n\tfunction Memoed(props) {\n\t\tthis.shouldComponentUpdate = shouldUpdate;\n\t\treturn createElement(c, props);\n\t}\n\tMemoed.displayName = 'Memo(' + (c.displayName || c.name) + ')';\n\tMemoed.prototype.isReactComponent = true;\n\tMemoed._forwarded = true;\n\treturn Memoed;\n}\n", "import { options } from 'preact';\nimport { assign } from './util';\n\nlet oldDiffHook = options._diff;\noptions._diff = vnode => {\n\tif (vnode.type && vnode.type._forwarded && vnode.ref) {\n\t\tvnode.props.ref = vnode.ref;\n\t\tvnode.ref = null;\n\t}\n\tif (oldDiffHook) oldDiffHook(vnode);\n};\n\nexport const REACT_FORWARD_SYMBOL =\n\t(typeof Symbol != 'undefined' &&\n\t\tSymbol.for &&\n\t\tSymbol.for('react.forward_ref')) ||\n\t0xf47;\n\n/**\n * Pass ref down to a child. This is mainly used in libraries with HOCs that\n * wrap components. Using `forwardRef` there is an easy way to get a reference\n * of the wrapped component instead of one of the wrapper itself.\n * @param {import('./index').ForwardFn} fn\n * @returns {import('./internal').FunctionComponent}\n */\nexport function forwardRef(fn) {\n\tfunction Forwarded(props) {\n\t\tlet clone = assign({}, props);\n\t\tdelete clone.ref;\n\t\treturn fn(clone, props.ref || null);\n\t}\n\n\t// mobx-react checks for this being present\n\tForwarded.$$typeof = REACT_FORWARD_SYMBOL;\n\t// mobx-react heavily relies on implementation details.\n\t// It expects an object here with a `render` property,\n\t// and prototype.render will fail. Without this\n\t// mobx-react throws.\n\tForwarded.render = Forwarded;\n\n\tForwarded.prototype.isReactComponent = Forwarded._forwarded = true;\n\tForwarded.displayName = 'ForwardRef(' + (fn.displayName || fn.name) + ')';\n\treturn Forwarded;\n}\n", "import { toChildArray } from 'preact';\n\nconst mapFn = (children, fn) => {\n\tif (children == null) return null;\n\treturn toChildArray(toChildArray(children).map(fn));\n};\n\n// This API is completely unnecessary for Preact, so it's basically passthrough.\nexport const Children = {\n\tmap: mapFn,\n\tforEach: mapFn,\n\tcount(children) {\n\t\treturn children ? toChildArray(children).length : 0;\n\t},\n\tonly(children) {\n\t\tconst normalized = toChildArray(children);\n\t\tif (normalized.length !== 1) throw 'Children.only';\n\t\treturn normalized[0];\n\t},\n\ttoArray: toChildArray\n};\n", "import { Component, createElement, options, Fragment } from 'preact';\nimport { MODE_HYDRATE } from '../../src/constants';\nimport { assign } from './util';\n\nconst oldCatchError = options._catchError;\noptions._catchError = function (error, newVNode, oldVNode, errorInfo) {\n\tif (error.then) {\n\t\t/** @type {import('./internal').Component} */\n\t\tlet component;\n\t\tlet vnode = newVNode;\n\n\t\tfor (; (vnode = vnode._parent); ) {\n\t\t\tif ((component = vnode._component) && component._childDidSuspend) {\n\t\t\t\tif (newVNode._dom == null) {\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t}\n\t\t\t\t// Don't call oldCatchError if we found a Suspense\n\t\t\t\treturn component._childDidSuspend(error, newVNode);\n\t\t\t}\n\t\t}\n\t}\n\toldCatchError(error, newVNode, oldVNode, errorInfo);\n};\n\nconst oldUnmount = options.unmount;\noptions.unmount = function (vnode) {\n\t/** @type {import('./internal').Component} */\n\tconst component = vnode._component;\n\tif (component && component._onResolve) {\n\t\tcomponent._onResolve();\n\t}\n\n\t// if the component is still hydrating\n\t// most likely it is because the component is suspended\n\t// we set the vnode.type as `null` so that it is not a typeof function\n\t// so the unmount will remove the vnode._dom\n\tif (component && vnode._flags & MODE_HYDRATE) {\n\t\tvnode.type = null;\n\t}\n\n\tif (oldUnmount) oldUnmount(vnode);\n};\n\nfunction detachedClone(vnode, detachedParent, parentDom) {\n\tif (vnode) {\n\t\tif (vnode._component && vnode._component.__hooks) {\n\t\t\tvnode._component.__hooks._list.forEach(effect => {\n\t\t\t\tif (typeof effect._cleanup == 'function') effect._cleanup();\n\t\t\t});\n\n\t\t\tvnode._component.__hooks = null;\n\t\t}\n\n\t\tvnode = assign({}, vnode);\n\t\tif (vnode._component != null) {\n\t\t\tif (vnode._component._parentDom === parentDom) {\n\t\t\t\tvnode._component._parentDom = detachedParent;\n\t\t\t}\n\t\t\tvnode._component = null;\n\t\t}\n\n\t\tvnode._children =\n\t\t\tvnode._children &&\n\t\t\tvnode._children.map(child =>\n\t\t\t\tdetachedClone(child, detachedParent, parentDom)\n\t\t\t);\n\t}\n\n\treturn vnode;\n}\n\nfunction removeOriginal(vnode, detachedParent, originalParent) {\n\tif (vnode && originalParent) {\n\t\tvnode._original = null;\n\t\tvnode._children =\n\t\t\tvnode._children &&\n\t\t\tvnode._children.map(child =>\n\t\t\t\tremoveOriginal(child, detachedParent, originalParent)\n\t\t\t);\n\n\t\tif (vnode._component) {\n\t\t\tif (vnode._component._parentDom === detachedParent) {\n\t\t\t\tif (vnode._dom) {\n\t\t\t\t\toriginalParent.appendChild(vnode._dom);\n\t\t\t\t}\n\t\t\t\tvnode._component._force = true;\n\t\t\t\tvnode._component._parentDom = originalParent;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn vnode;\n}\n\n// having custom inheritance instead of a class here saves a lot of bytes\nexport function Suspense() {\n\t// we do not call super here to golf some bytes...\n\tthis._pendingSuspensionCount = 0;\n\tthis._suspenders = null;\n\tthis._detachOnNextRender = null;\n}\n\n// Things we do here to save some bytes but are not proper JS inheritance:\n// - call `new Component()` as the prototype\n// - do not set `Suspense.prototype.constructor` to `Suspense`\nSuspense.prototype = new Component();\n\n/**\n * @this {import('./internal').SuspenseComponent}\n * @param {Promise} promise The thrown promise\n * @param {import('./internal').VNode<any, any>} suspendingVNode The suspending component\n */\nSuspense.prototype._childDidSuspend = function (promise, suspendingVNode) {\n\tconst suspendingComponent = suspendingVNode._component;\n\n\t/** @type {import('./internal').SuspenseComponent} */\n\tconst c = this;\n\n\tif (c._suspenders == null) {\n\t\tc._suspenders = [];\n\t}\n\tc._suspenders.push(suspendingComponent);\n\n\tconst resolve = suspended(c._vnode);\n\n\tlet resolved = false;\n\tconst onResolved = () => {\n\t\tif (resolved) return;\n\n\t\tresolved = true;\n\t\tsuspendingComponent._onResolve = null;\n\n\t\tif (resolve) {\n\t\t\tresolve(onSuspensionComplete);\n\t\t} else {\n\t\t\tonSuspensionComplete();\n\t\t}\n\t};\n\n\tsuspendingComponent._onResolve = onResolved;\n\n\tconst onSuspensionComplete = () => {\n\t\tif (!--c._pendingSuspensionCount) {\n\t\t\t// If the suspension was during hydration we don't need to restore the\n\t\t\t// suspended children into the _children array\n\t\t\tif (c.state._suspended) {\n\t\t\t\tconst suspendedVNode = c.state._suspended;\n\t\t\t\tc._vnode._children[0] = removeOriginal(\n\t\t\t\t\tsuspendedVNode,\n\t\t\t\t\tsuspendedVNode._component._parentDom,\n\t\t\t\t\tsuspendedVNode._component._originalParentDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tc.setState({ _suspended: (c._detachOnNextRender = null) });\n\n\t\t\tlet suspended;\n\t\t\twhile ((suspended = c._suspenders.pop())) {\n\t\t\t\tsuspended.forceUpdate();\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * We do not set `suspended: true` during hydration because we want the actual markup\n\t * to remain on screen and hydrate it when the suspense actually gets resolved.\n\t * While in non-hydration cases the usual fallback -> component flow would occour.\n\t */\n\tif (\n\t\t!c._pendingSuspensionCount++ &&\n\t\t!(suspendingVNode._flags & MODE_HYDRATE)\n\t) {\n\t\tc.setState({ _suspended: (c._detachOnNextRender = c._vnode._children[0]) });\n\t}\n\tpromise.then(onResolved, onResolved);\n};\n\nSuspense.prototype.componentWillUnmount = function () {\n\tthis._suspenders = [];\n};\n\n/**\n * @this {import('./internal').SuspenseComponent}\n * @param {import('./internal').SuspenseComponent[\"props\"]} props\n * @param {import('./internal').SuspenseState} state\n */\nSuspense.prototype.render = function (props, state) {\n\tif (this._detachOnNextRender) {\n\t\t// When the Suspense's _vnode was created by a call to createVNode\n\t\t// (i.e. due to a setState further up in the tree)\n\t\t// it's _children prop is null, in this case we \"forget\" about the parked vnodes to detach\n\t\tif (this._vnode._children) {\n\t\t\tconst detachedParent = document.createElement('div');\n\t\t\tconst detachedComponent = this._vnode._children[0]._component;\n\t\t\tthis._vnode._children[0] = detachedClone(\n\t\t\t\tthis._detachOnNextRender,\n\t\t\t\tdetachedParent,\n\t\t\t\t(detachedComponent._originalParentDom = detachedComponent._parentDom)\n\t\t\t);\n\t\t}\n\n\t\tthis._detachOnNextRender = null;\n\t}\n\n\t// Wrap fallback tree in a VNode that prevents itself from being marked as aborting mid-hydration:\n\t/** @type {import('./internal').VNode} */\n\tconst fallback =\n\t\tstate._suspended && createElement(Fragment, null, props.fallback);\n\tif (fallback) fallback._flags &= ~MODE_HYDRATE;\n\n\treturn [\n\t\tcreateElement(Fragment, null, state._suspended ? null : props.children),\n\t\tfallback\n\t];\n};\n\n/**\n * Checks and calls the parent component's _suspended method, passing in the\n * suspended vnode. This is a way for a parent (e.g. SuspenseList) to get notified\n * that one of its children/descendants suspended.\n *\n * The parent MAY return a callback. The callback will get called when the\n * suspension resolves, notifying the parent of the fact.\n * Moreover, the callback gets function `unsuspend` as a parameter. The resolved\n * child descendant will not actually get unsuspended until `unsuspend` gets called.\n * This is a way for the parent to delay unsuspending.\n *\n * If the parent does not return a callback then the resolved vnode\n * gets unsuspended immediately when it resolves.\n *\n * @param {import('./internal').VNode} vnode\n * @returns {((unsuspend: () => void) => void)?}\n */\nexport function suspended(vnode) {\n\t/** @type {import('./internal').Component} */\n\tlet component = vnode._parent._component;\n\treturn component && component._suspended && component._suspended(vnode);\n}\n\nexport function lazy(loader) {\n\tlet prom;\n\tlet component;\n\tlet error;\n\n\tfunction Lazy(props) {\n\t\tif (!prom) {\n\t\t\tprom = loader();\n\t\t\tprom.then(\n\t\t\t\texports => {\n\t\t\t\t\tcomponent = exports.default || exports;\n\t\t\t\t},\n\t\t\t\te => {\n\t\t\t\t\terror = e;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (!component) {\n\t\t\tthrow prom;\n\t\t}\n\n\t\treturn createElement(component, props);\n\t}\n\n\tLazy.displayName = 'Lazy';\n\tLazy._forwarded = true;\n\treturn Lazy;\n}\n", "import { Component, toChildArray } from 'preact';\nimport { suspended } from './suspense.js';\n\n// Indexes to linked list nodes (nodes are stored as arrays to save bytes).\nconst SUSPENDED_COUNT = 0;\nconst RESOLVED_COUNT = 1;\nconst NEXT_NODE = 2;\n\n// Having custom inheritance instead of a class here saves a lot of bytes.\nexport function SuspenseList() {\n\tthis._next = null;\n\tthis._map = null;\n}\n\n// Mark one of child's earlier suspensions as resolved.\n// Some pending callbacks may become callable due to this\n// (e.g. the last suspended descendant gets resolved when\n// revealOrder === 'together'). Process those callbacks as well.\nconst resolve = (list, child, node) => {\n\tif (++node[RESOLVED_COUNT] === node[SUSPENDED_COUNT]) {\n\t\t// The number a child (or any of its descendants) has been suspended\n\t\t// matches the number of times it's been resolved. Therefore we\n\t\t// mark the child as completely resolved by deleting it from ._map.\n\t\t// This is used to figure out when *all* children have been completely\n\t\t// resolved when revealOrder is 'together'.\n\t\tlist._map.delete(child);\n\t}\n\n\t// If revealOrder is falsy then we can do an early exit, as the\n\t// callbacks won't get queued in the node anyway.\n\t// If revealOrder is 'together' then also do an early exit\n\t// if all suspended descendants have not yet been resolved.\n\tif (\n\t\t!list.props.revealOrder ||\n\t\t(list.props.revealOrder[0] === 't' && list._map.size)\n\t) {\n\t\treturn;\n\t}\n\n\t// Walk the currently suspended children in order, calling their\n\t// stored callbacks on the way. Stop if we encounter a child that\n\t// has not been completely resolved yet.\n\tnode = list._next;\n\twhile (node) {\n\t\twhile (node.length > 3) {\n\t\t\tnode.pop()();\n\t\t}\n\t\tif (node[RESOLVED_COUNT] < node[SUSPENDED_COUNT]) {\n\t\t\tbreak;\n\t\t}\n\t\tlist._next = node = node[NEXT_NODE];\n\t}\n};\n\n// Things we do here to save some bytes but are not proper JS inheritance:\n// - call `new Component()` as the prototype\n// - do not set `Suspense.prototype.constructor` to `Suspense`\nSuspenseList.prototype = new Component();\n\nSuspenseList.prototype._suspended = function (child) {\n\tconst list = this;\n\tconst delegated = suspended(list._vnode);\n\n\tlet node = list._map.get(child);\n\tnode[SUSPENDED_COUNT]++;\n\n\treturn unsuspend => {\n\t\tconst wrappedUnsuspend = () => {\n\t\t\tif (!list.props.revealOrder) {\n\t\t\t\t// Special case the undefined (falsy) revealOrder, as there\n\t\t\t\t// is no need to coordinate a specific order or unsuspends.\n\t\t\t\tunsuspend();\n\t\t\t} else {\n\t\t\t\tnode.push(unsuspend);\n\t\t\t\tresolve(list, child, node);\n\t\t\t}\n\t\t};\n\t\tif (delegated) {\n\t\t\tdelegated(wrappedUnsuspend);\n\t\t} else {\n\t\t\twrappedUnsuspend();\n\t\t}\n\t};\n};\n\nSuspenseList.prototype.render = function (props) {\n\tthis._next = null;\n\tthis._map = new Map();\n\n\tconst children = toChildArray(props.children);\n\tif (props.revealOrder && props.revealOrder[0] === 'b') {\n\t\t// If order === 'backwards' (or, well, anything starting with a 'b')\n\t\t// then flip the child list around so that the last child will be\n\t\t// the first in the linked list.\n\t\tchildren.reverse();\n\t}\n\t// Build the linked list. Iterate through the children in reverse order\n\t// so that `_next` points to the first linked list node to be resolved.\n\tfor (let i = children.length; i--; ) {\n\t\t// Create a new linked list node as an array of form:\n\t\t// \t[suspended_count, resolved_count, next_node]\n\t\t// where suspended_count and resolved_count are numeric counters for\n\t\t// keeping track how many times a node has been suspended and resolved.\n\t\t//\n\t\t// Note that suspended_count starts from 1 instead of 0, so we can block\n\t\t// processing callbacks until componentDidMount has been called. In a sense\n\t\t// node is suspended at least until componentDidMount gets called!\n\t\t//\n\t\t// Pending callbacks are added to the end of the node:\n\t\t// \t[suspended_count, resolved_count, next_node, callback_0, callback_1, ...]\n\t\tthis._map.set(children[i], (this._next = [1, 0, this._next]));\n\t}\n\treturn props.children;\n};\n\nSuspenseList.prototype.componentDidUpdate =\n\tSuspenseList.prototype.componentDidMount = function () {\n\t\t// Iterate through all children after mounting for two reasons:\n\t\t// 1. As each node[SUSPENDED_COUNT] starts from 1, this iteration increases\n\t\t//    each node[RELEASED_COUNT] by 1, therefore balancing the counters.\n\t\t//    The nodes can now be completely consumed from the linked list.\n\t\t// 2. Handle nodes that might have gotten resolved between render and\n\t\t//    componentDidMount.\n\t\tthis._map.forEach((node, child) => {\n\t\t\tresolve(this, child, node);\n\t\t});\n\t};\n", "/** Normal hydration that attaches to a DOM tree but does not diff it. */\nexport const MODE_HYDRATE = 1 << 5;\n/** Signifies this VNode suspended on the previous render */\nexport const MODE_SUSPENDED = 1 << 7;\n/** Indicates that this node needs to be inserted while patching children */\nexport const INSERT_VNODE = 1 << 16;\n/** Indicates a VNode has been matched with another VNode in the diff */\nexport const MATCHED = 1 << 17;\n\n/** Reset all mode flags */\nexport const RESET_MODE = ~(MODE_HYDRATE | MODE_SUSPENDED);\n\nexport const EMPTY_OBJ = /** @type {any} */ ({});\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL =\n\t/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { createElement, render } from 'preact';\n\n/**\n * @param {import('../../src/index').RenderableProps<{ context: any }>} props\n */\nfunction ContextProvider(props) {\n\tthis.getChildContext = () => props.context;\n\treturn props.children;\n}\n\n/**\n * Portal component\n * @this {import('./internal').Component}\n * @param {object | null | undefined} props\n *\n * TODO: use createRoot() instead of fake root\n */\nfunction Portal(props) {\n\tconst _this = this;\n\tlet container = props._container;\n\n\t_this.componentWillUnmount = function () {\n\t\trender(null, _this._temp);\n\t\t_this._temp = null;\n\t\t_this._container = null;\n\t};\n\n\t// When we change container we should clear our old container and\n\t// indicate a new mount.\n\tif (_this._container && _this._container !== container) {\n\t\t_this.componentWillUnmount();\n\t}\n\n\tif (!_this._temp) {\n\t\t_this._container = container;\n\n\t\t// Create a fake DOM parent node that manages a subset of `container`'s children:\n\t\t_this._temp = {\n\t\t\tnodeType: 1,\n\t\t\tparentNode: container,\n\t\t\tchildNodes: [],\n\t\t\tcontains: () => true,\n\t\t\tappendChild(child) {\n\t\t\t\tthis.childNodes.push(child);\n\t\t\t\t_this._container.appendChild(child);\n\t\t\t},\n\t\t\tinsertBefore(child, before) {\n\t\t\t\tthis.childNodes.push(child);\n\t\t\t\t_this._container.appendChild(child);\n\t\t\t},\n\t\t\tremoveChild(child) {\n\t\t\t\tthis.childNodes.splice(this.childNodes.indexOf(child) >>> 1, 1);\n\t\t\t\t_this._container.removeChild(child);\n\t\t\t}\n\t\t};\n\t}\n\n\t// Render our wrapping element into temp.\n\trender(\n\t\tcreateElement(ContextProvider, { context: _this.context }, props._vnode),\n\t\t_this._temp\n\t);\n}\n\n/**\n * Create a `Portal` to continue rendering the vnode tree at a different DOM node\n * @param {import('./internal').VNode} vnode The vnode to render\n * @param {import('./internal').PreactElement} container The DOM node to continue rendering in to.\n */\nexport function createPortal(vnode, container) {\n\tconst el = createElement(Portal, { _vnode: vnode, _container: container });\n\tel.containerInfo = container;\n\treturn el;\n}\n", "import {\n\trender as preactRender,\n\thydrate as preactHydrate,\n\toptions,\n\ttoChildArray,\n\tComponent\n} from 'preact';\nimport {\n\tuseCallback,\n\tuseContext,\n\tuseDebugValue,\n\tuseEffect,\n\tuseId,\n\tuseImperativeHandle,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseReducer,\n\tuseRef,\n\tuseState\n} from 'preact/hooks';\nimport {\n\tuseDeferredValue,\n\tuseInsertionEffect,\n\tuseSyncExternalStore,\n\tuseTransition\n} from './index';\n\nexport const REACT_ELEMENT_TYPE =\n\t(typeof Symbol != 'undefined' && Symbol.for && Symbol.for('react.element')) ||\n\t0xeac7;\n\nconst CAMEL_PROPS =\n\t/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;\nconst ON_ANI = /^on(Ani|Tra|Tou|BeforeInp|Compo)/;\nconst CAMEL_REPLACE = /[A-Z0-9]/g;\n\nconst IS_DOM = typeof document !== 'undefined';\n\n// Input types for which onchange should not be converted to oninput.\n// type=\"file|checkbox|radio\", plus \"range\" in IE11.\n// (IE11 doesn't support Symbol, which we use here to turn `rad` into `ra` which matches \"range\")\nconst onChangeInputType = type =>\n\t(typeof Symbol != 'undefined' && typeof Symbol() == 'symbol'\n\t\t? /fil|che|rad/\n\t\t: /fil|che|ra/\n\t).test(type);\n\n// Some libraries like `react-virtualized` explicitly check for this.\nComponent.prototype.isReactComponent = {};\n\n// `UNSAFE_*` lifecycle hooks\n// Preact only ever invokes the unprefixed methods.\n// Here we provide a base \"fallback\" implementation that calls any defined UNSAFE_ prefixed method.\n// - If a component defines its own `componentDidMount()` (including via defineProperty), use that.\n// - If a component defines `UNSAFE_componentDidMount()`, `componentDidMount` is the alias getter/setter.\n// - If anything assigns to an `UNSAFE_*` property, the assignment is forwarded to the unprefixed property.\n// See https://github.com/preactjs/preact/issues/1941\n[\n\t'componentWillMount',\n\t'componentWillReceiveProps',\n\t'componentWillUpdate'\n].forEach(key => {\n\tObject.defineProperty(Component.prototype, key, {\n\t\tconfigurable: true,\n\t\tget() {\n\t\t\treturn this['UNSAFE_' + key];\n\t\t},\n\t\tset(v) {\n\t\t\tObject.defineProperty(this, key, {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true,\n\t\t\t\tvalue: v\n\t\t\t});\n\t\t}\n\t});\n});\n\n/**\n * Proxy render() since React returns a Component reference.\n * @param {import('./internal').VNode} vnode VNode tree to render\n * @param {import('./internal').PreactElement} parent DOM node to render vnode tree into\n * @param {() => void} [callback] Optional callback that will be called after rendering\n * @returns {import('./internal').Component | null} The root component reference or null\n */\nexport function render(vnode, parent, callback) {\n\t// React destroys any existing DOM nodes, see #1727\n\t// ...but only on the first render, see #1828\n\tif (parent._children == null) {\n\t\tparent.textContent = '';\n\t}\n\n\tpreactRender(vnode, parent);\n\tif (typeof callback == 'function') callback();\n\n\treturn vnode ? vnode._component : null;\n}\n\nexport function hydrate(vnode, parent, callback) {\n\tpreactHydrate(vnode, parent);\n\tif (typeof callback == 'function') callback();\n\n\treturn vnode ? vnode._component : null;\n}\n\nlet oldEventHook = options.event;\noptions.event = e => {\n\tif (oldEventHook) e = oldEventHook(e);\n\n\te.persist = empty;\n\te.isPropagationStopped = isPropagationStopped;\n\te.isDefaultPrevented = isDefaultPrevented;\n\treturn (e.nativeEvent = e);\n};\n\nfunction empty() {}\n\nfunction isPropagationStopped() {\n\treturn this.cancelBubble;\n}\n\nfunction isDefaultPrevented() {\n\treturn this.defaultPrevented;\n}\n\nconst classNameDescriptorNonEnumberable = {\n\tenumerable: false,\n\tconfigurable: true,\n\tget() {\n\t\treturn this.class;\n\t}\n};\n\nfunction handleDomVNode(vnode) {\n\tlet props = vnode.props,\n\t\ttype = vnode.type,\n\t\tnormalizedProps = {};\n\n\tfor (let i in props) {\n\t\tlet value = props[i];\n\n\t\tif (\n\t\t\t(i === 'value' && 'defaultValue' in props && value == null) ||\n\t\t\t// Emulate React's behavior of not rendering the contents of noscript tags on the client.\n\t\t\t(IS_DOM && i === 'children' && type === 'noscript') ||\n\t\t\ti === 'class' ||\n\t\t\ti === 'className'\n\t\t) {\n\t\t\t// Skip applying value if it is null/undefined and we already set\n\t\t\t// a default value\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet lowerCased = i.toLowerCase();\n\t\tif (i === 'defaultValue' && 'value' in props && props.value == null) {\n\t\t\t// `defaultValue` is treated as a fallback `value` when a value prop is present but null/undefined.\n\t\t\t// `defaultValue` for Elements with no value prop is the same as the DOM defaultValue property.\n\t\t\ti = 'value';\n\t\t} else if (i === 'download' && value === true) {\n\t\t\t// Calling `setAttribute` with a truthy value will lead to it being\n\t\t\t// passed as a stringified value, e.g. `download=\"true\"`. React\n\t\t\t// converts it to an empty string instead, otherwise the attribute\n\t\t\t// value will be used as the file name and the file will be called\n\t\t\t// \"true\" upon downloading it.\n\t\t\tvalue = '';\n\t\t} else if (lowerCased === 'translate' && value === 'no') {\n\t\t\tvalue = false;\n\t\t} else if (lowerCased === 'ondoubleclick') {\n\t\t\ti = 'ondblclick';\n\t\t} else if (\n\t\t\tlowerCased === 'onchange' &&\n\t\t\t(type === 'input' || type === 'textarea') &&\n\t\t\t!onChangeInputType(props.type)\n\t\t) {\n\t\t\tlowerCased = i = 'oninput';\n\t\t} else if (lowerCased === 'onfocus') {\n\t\t\ti = 'onfocusin';\n\t\t} else if (lowerCased === 'onblur') {\n\t\t\ti = 'onfocusout';\n\t\t} else if (ON_ANI.test(i)) {\n\t\t\ti = lowerCased;\n\t\t} else if (type.indexOf('-') === -1 && CAMEL_PROPS.test(i)) {\n\t\t\ti = i.replace(CAMEL_REPLACE, '-$&').toLowerCase();\n\t\t} else if (value === null) {\n\t\t\tvalue = undefined;\n\t\t}\n\n\t\t// Add support for onInput and onChange, see #3561\n\t\t// if we have an oninput prop already change it to oninputCapture\n\t\tif (lowerCased === 'oninput') {\n\t\t\ti = lowerCased;\n\t\t\tif (normalizedProps[i]) {\n\t\t\t\ti = 'oninputCapture';\n\t\t\t}\n\t\t}\n\n\t\tnormalizedProps[i] = value;\n\t}\n\n\t// Add support for array select values: <select multiple value={[]} />\n\tif (\n\t\ttype == 'select' &&\n\t\tnormalizedProps.multiple &&\n\t\tArray.isArray(normalizedProps.value)\n\t) {\n\t\t// forEach() always returns undefined, which we abuse here to unset the value prop.\n\t\tnormalizedProps.value = toChildArray(props.children).forEach(child => {\n\t\t\tchild.props.selected =\n\t\t\t\tnormalizedProps.value.indexOf(child.props.value) != -1;\n\t\t});\n\t}\n\n\t// Adding support for defaultValue in select tag\n\tif (type == 'select' && normalizedProps.defaultValue != null) {\n\t\tnormalizedProps.value = toChildArray(props.children).forEach(child => {\n\t\t\tif (normalizedProps.multiple) {\n\t\t\t\tchild.props.selected =\n\t\t\t\t\tnormalizedProps.defaultValue.indexOf(child.props.value) != -1;\n\t\t\t} else {\n\t\t\t\tchild.props.selected =\n\t\t\t\t\tnormalizedProps.defaultValue == child.props.value;\n\t\t\t}\n\t\t});\n\t}\n\n\tif (props.class && !props.className) {\n\t\tnormalizedProps.class = props.class;\n\t\tObject.defineProperty(\n\t\t\tnormalizedProps,\n\t\t\t'className',\n\t\t\tclassNameDescriptorNonEnumberable\n\t\t);\n\t} else if (props.className && !props.class) {\n\t\tnormalizedProps.class = normalizedProps.className = props.className;\n\t} else if (props.class && props.className) {\n\t\tnormalizedProps.class = normalizedProps.className = props.className;\n\t}\n\n\tvnode.props = normalizedProps;\n}\n\nlet oldVNodeHook = options.vnode;\noptions.vnode = vnode => {\n\t// only normalize props on Element nodes\n\tif (typeof vnode.type === 'string') {\n\t\thandleDomVNode(vnode);\n\t}\n\n\tvnode.$$typeof = REACT_ELEMENT_TYPE;\n\n\tif (oldVNodeHook) oldVNodeHook(vnode);\n};\n\n// Only needed for react-relay\nlet currentComponent;\nconst oldBeforeRender = options._render;\noptions._render = function (vnode) {\n\tif (oldBeforeRender) {\n\t\toldBeforeRender(vnode);\n\t}\n\tcurrentComponent = vnode._component;\n};\n\nconst oldDiffed = options.diffed;\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.diffed = function (vnode) {\n\tif (oldDiffed) {\n\t\toldDiffed(vnode);\n\t}\n\n\tconst props = vnode.props;\n\tconst dom = vnode._dom;\n\n\tif (\n\t\tdom != null &&\n\t\tvnode.type === 'textarea' &&\n\t\t'value' in props &&\n\t\tprops.value !== dom.value\n\t) {\n\t\tdom.value = props.value == null ? '' : props.value;\n\t}\n\n\tcurrentComponent = null;\n};\n\n// This is a very very private internal function for React it\n// is used to sort-of do runtime dependency injection.\nexport const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {\n\tReactCurrentDispatcher: {\n\t\tcurrent: {\n\t\t\treadContext(context) {\n\t\t\t\treturn currentComponent._globalContext[context._id].props.value;\n\t\t\t},\n\t\t\tuseCallback,\n\t\t\tuseContext,\n\t\t\tuseDebugValue,\n\t\t\tuseDeferredValue,\n\t\t\tuseEffect,\n\t\t\tuseId,\n\t\t\tuseImperativeHandle,\n\t\t\tuseInsertionEffect,\n\t\t\tuseLayoutEffect,\n\t\t\tuseMemo,\n\t\t\t// useMutableSource, // experimental-only and replaced by uSES, likely not worth supporting\n\t\t\tuseReducer,\n\t\t\tuseRef,\n\t\t\tuseState,\n\t\t\tuseSyncExternalStore,\n\t\t\tuseTransition\n\t\t}\n\t}\n};\n", "import {\n\tcreateElement,\n\trender as preactRender,\n\tcloneElement as preactCloneElement,\n\tcreateRef,\n\tComponent,\n\tcreateContext,\n\tFragment\n} from 'preact';\nimport {\n\tuseState,\n\tuseId,\n\tuseReducer,\n\tuseEffect,\n\tuseLayoutEffect,\n\tuseRef,\n\tuseImperativeHandle,\n\tuseMemo,\n\tuseCallback,\n\tuseContext,\n\tuseDebugValue\n} from 'preact/hooks';\nimport { PureComponent } from './PureComponent';\nimport { memo } from './memo';\nimport { forwardRef } from './forwardRef';\nimport { Children } from './Children';\nimport { Suspense, lazy } from './suspense';\nimport { SuspenseList } from './suspense-list';\nimport { createPortal } from './portals';\nimport { is } from './util';\nimport {\n\thydrate,\n\trender,\n\tREACT_ELEMENT_TYPE,\n\t__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n} from './render';\n\nconst version = '17.0.2'; // trick libraries to think we are react\n\n/**\n * Legacy version of createElement.\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component constructor\n */\nfunction createFactory(type) {\n\treturn createElement.bind(null, type);\n}\n\n/**\n * Check if the passed element is a valid (p)react node.\n * @param {*} element The element to check\n * @returns {boolean}\n */\nfunction isValidElement(element) {\n\treturn !!element && element.$$typeof === REACT_ELEMENT_TYPE;\n}\n\n/**\n * Check if the passed element is a Fragment node.\n * @param {*} element The element to check\n * @returns {boolean}\n */\nfunction isFragment(element) {\n\treturn isValidElement(element) && element.type === Fragment;\n}\n\n/**\n * Check if the passed element is a Memo node.\n * @param {*} element The element to check\n * @returns {boolean}\n */\nfunction isMemo(element) {\n\treturn (\n\t\t!!element &&\n\t\t!!element.displayName &&\n\t\t(typeof element.displayName === 'string' ||\n\t\t\telement.displayName instanceof String) &&\n\t\telement.displayName.startsWith('Memo(')\n\t);\n}\n\n/**\n * Wrap `cloneElement` to abort if the passed element is not a valid element and apply\n * all vnode normalizations.\n * @param {import('./internal').VNode} element The vnode to clone\n * @param {object} props Props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Optional component children\n */\nfunction cloneElement(element) {\n\tif (!isValidElement(element)) return element;\n\treturn preactCloneElement.apply(null, arguments);\n}\n\n/**\n * Remove a component tree from the DOM, including state and event handlers.\n * @param {import('./internal').PreactElement} container\n * @returns {boolean}\n */\nfunction unmountComponentAtNode(container) {\n\tif (container._children) {\n\t\tpreactRender(null, container);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Get the matching DOM node for a component\n * @param {import('./internal').Component} component\n * @returns {import('./internal').PreactElement | null}\n */\nfunction findDOMNode(component) {\n\treturn (\n\t\t(component &&\n\t\t\t(component.base || (component.nodeType === 1 && component))) ||\n\t\tnull\n\t);\n}\n\n/**\n * Deprecated way to control batched rendering inside the reconciler, but we\n * already schedule in batches inside our rendering code\n * @template Arg\n * @param {(arg: Arg) => void} callback function that triggers the updated\n * @param {Arg} [arg] Optional argument that can be passed to the callback\n */\n// eslint-disable-next-line camelcase\nconst unstable_batchedUpdates = (callback, arg) => callback(arg);\n\n/**\n * In React, `flushSync` flushes the entire tree and forces a rerender. It's\n * implmented here as a no-op.\n * @template Arg\n * @template Result\n * @param {(arg: Arg) => Result} callback function that runs before the flush\n * @param {Arg} [arg] Optional argument that can be passed to the callback\n * @returns\n */\nconst flushSync = (callback, arg) => callback(arg);\n\n/**\n * Strict Mode is not implemented in Preact, so we provide a stand-in for it\n * that just renders its children without imposing any restrictions.\n */\nconst StrictMode = Fragment;\n\nexport function startTransition(cb) {\n\tcb();\n}\n\nexport function useDeferredValue(val) {\n\treturn val;\n}\n\nexport function useTransition() {\n\treturn [false, startTransition];\n}\n\n// TODO: in theory this should be done after a VNode is diffed as we want to insert\n// styles/... before it attaches\nexport const useInsertionEffect = useLayoutEffect;\n\n// compat to react-is\nexport const isElement = isValidElement;\n\n/**\n * This is taken from https://github.com/facebook/react/blob/main/packages/use-sync-external-store/src/useSyncExternalStoreShimClient.js#L84\n * on a high level this cuts out the warnings, ... and attempts a smaller implementation\n * @typedef {{ _value: any; _getSnapshot: () => any }} Store\n */\nexport function useSyncExternalStore(subscribe, getSnapshot) {\n\tconst value = getSnapshot();\n\n\t/**\n\t * @typedef {{ _instance: Store }} StoreRef\n\t * @type {[StoreRef, (store: StoreRef) => void]}\n\t */\n\tconst [{ _instance }, forceUpdate] = useState({\n\t\t_instance: { _value: value, _getSnapshot: getSnapshot }\n\t});\n\n\tuseLayoutEffect(() => {\n\t\t_instance._value = value;\n\t\t_instance._getSnapshot = getSnapshot;\n\n\t\tif (didSnapshotChange(_instance)) {\n\t\t\tforceUpdate({ _instance });\n\t\t}\n\t}, [subscribe, value, getSnapshot]);\n\n\tuseEffect(() => {\n\t\tif (didSnapshotChange(_instance)) {\n\t\t\tforceUpdate({ _instance });\n\t\t}\n\n\t\treturn subscribe(() => {\n\t\t\tif (didSnapshotChange(_instance)) {\n\t\t\t\tforceUpdate({ _instance });\n\t\t\t}\n\t\t});\n\t}, [subscribe]);\n\n\treturn value;\n}\n\n/** @type {(inst: Store) => boolean} */\nfunction didSnapshotChange(inst) {\n\tconst latestGetSnapshot = inst._getSnapshot;\n\tconst prevValue = inst._value;\n\ttry {\n\t\tconst nextValue = latestGetSnapshot();\n\t\treturn !is(prevValue, nextValue);\n\t} catch (error) {\n\t\treturn true;\n\t}\n}\n\nexport * from 'preact/hooks';\nexport {\n\tversion,\n\tChildren,\n\trender,\n\thydrate,\n\tunmountComponentAtNode,\n\tcreatePortal,\n\tcreateElement,\n\tcreateContext,\n\tcreateFactory,\n\tcloneElement,\n\tcreateRef,\n\tFragment,\n\tisValidElement,\n\tisFragment,\n\tisMemo,\n\tfindDOMNode,\n\tComponent,\n\tPureComponent,\n\tmemo,\n\tforwardRef,\n\tflushSync,\n\t// eslint-disable-next-line camelcase\n\tunstable_batchedUpdates,\n\tStrictMode,\n\tSuspense,\n\tSuspenseList,\n\tlazy,\n\t__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n};\n\n// React copies the named exports to the default one.\nexport default {\n\tuseState,\n\tuseId,\n\tuseReducer,\n\tuseEffect,\n\tuseLayoutEffect,\n\tuseInsertionEffect,\n\tuseTransition,\n\tuseDeferredValue,\n\tuseSyncExternalStore,\n\tstartTransition,\n\tuseRef,\n\tuseImperativeHandle,\n\tuseMemo,\n\tuseCallback,\n\tuseContext,\n\tuseDebugValue,\n\tversion,\n\tChildren,\n\trender,\n\thydrate,\n\tunmountComponentAtNode,\n\tcreatePortal,\n\tcreateElement,\n\tcreateContext,\n\tcreateFactory,\n\tcloneElement,\n\tcreateRef,\n\tFragment,\n\tisValidElement,\n\tisElement,\n\tisFragment,\n\tisMemo,\n\tfindDOMNode,\n\tComponent,\n\tPureComponent,\n\tmemo,\n\tforwardRef,\n\tflushSync,\n\tunstable_batchedUpdates,\n\tStrictMode,\n\tSuspense,\n\tSuspenseList,\n\tlazy,\n\t__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n};\n", "import {\n  AccessorFn,\n  AccessorFnColumnDef,\n  AccessorKeyColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n        ? DeepValue<TData, TAccessor>\n        : never,\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => TAccessor extends AccessorFn<TData>\n    ? AccessorFnColumnDef<TData, TValue>\n    : AccessorKeyColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => DisplayColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => GroupColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData,\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column,\n    group: column => column,\n  }\n}\n", "import { TableOptionsResolved, TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = [],\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never,\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n    ? AllowedIndexes<Tail, Keys | Tail['length']>\n    : Keys\n\nexport type DeepKeys<T, TDepth extends any[] = []> = TDepth['length'] extends 5\n  ? never\n  : unknown extends T\n    ? string\n    : T extends readonly any[] & IsTuple<T>\n      ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>, TDepth>\n      : T extends any[]\n        ? DeepKeys<T[number], [...TDepth, any]>\n        : T extends Date\n          ? never\n          : T extends object\n            ? (keyof T & string) | DeepKeysPrefix<T, keyof T, TDepth>\n            : never\n\ntype DeepKeysPrefix<\n  T,\n  TPrefix,\n  TDepth extends any[],\n> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix], [...TDepth, any]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> =\n  T extends Record<string | number, any>\n    ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n      ? DeepValue<T[TBranch], TDeepProp>\n      : T[TProp & string]\n    : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TDepArgs, TResult>(\n  getDeps: (depArgs?: TDepArgs) => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): (depArgs?: TDepArgs) => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return depArgs => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps(depArgs)\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n\nexport function getMemoOptions(\n  tableOptions: Partial<TableOptionsResolved<any>>,\n  debugLevel:\n    | 'debugAll'\n    | 'debugCells'\n    | 'debugTable'\n    | 'debugColumns'\n    | 'debugRows'\n    | 'debugHeaders',\n  key: string,\n  onChange?: (result: any) => void\n) {\n  return {\n    debug: () => tableOptions?.debugAll ?? tableOptions[debugLevel],\n    key: process.env.NODE_ENV === 'development' && key,\n    onChange,\n  }\n}\n", "import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, getMemoOptions, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  cell: Cell<TData, TValue>\n  column: Column<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n  row: Row<TData>\n  table: Table<TData>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  /**\n   * The associated Column object for the cell.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#column)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  column: Column<TData, TValue>\n  /**\n   * Returns the rendering context (or props) for cell-based components like cells and aggregated cells. Use these props with your framework's `flexRender` utility to render these using the template of your choice:\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#getcontext)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  getContext: () => CellContext<TData, TValue>\n  /**\n   * Returns the value for the cell, accessed via the associated column's accessor key or accessor function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#getvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  getValue: CellContext<TData, TValue>['getValue']\n  /**\n   * The unique ID for the cell across the entire table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  id: string\n  /**\n   * Renders the value for a cell the same as `getValue`, but will return the `renderFallbackValue` if no value is found.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#rendervalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  renderValue: CellContext<TData, TValue>['renderValue']\n  /**\n   * The associated Row object for the cell.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/cell#row)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/cells)\n   */\n  row: Row<TData>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      getMemoOptions(table.options, 'debugCells', 'cell.getContext')\n    ),\n  }\n\n  table._features.forEach(feature => {\n    feature.createCell?.(\n      cell as Cell<TData, TValue>,\n      column,\n      row as Row<TData>,\n      table\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n", "import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  /**\n   * The resolved accessor function to use when extracting the value for the column from each row. Will only be defined if the column def has a valid accessor key or function defined.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#accessorfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  accessorFn?: AccessorFn<TData, TValue>\n  /**\n   * The original column def used to create the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#columndef)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  columnDef: ColumnDef<TData, TValue>\n  /**\n   * The child column (if the column is a group column). Will be an empty array if the column is not a group column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#columns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  columns: Column<TData, TValue>[]\n  /**\n   * The depth of the column (if grouped) relative to the root column def array.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#depth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  depth: number\n  /**\n   * Returns the flattened array of this column and all child/grand-child columns for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#getflatcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  getFlatColumns: () => Column<TData, TValue>[]\n  /**\n   * Returns an array of all leaf-node columns for this column. If a column has no children, it is considered the only leaf-node column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#getleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  getLeafColumns: () => Column<TData, TValue>[]\n  /**\n   * The resolved unique identifier for the column resolved in this priority:\n      - A manual `id` property from the column def\n      - The accessor key from the column def\n      - The header string from the column def\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  id: string\n  /**\n   * The parent column for this column. Will be undefined if this is a root column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/column#parent)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-defs)\n   */\n  parent?: Column<TData, TValue>\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      getMemoOptions(table.options, 'debugColumns', 'column.getFlatColumns')\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      getMemoOptions(table.options, 'debugColumns', 'column.getLeafColumns')\n    ),\n  }\n\n  for (const feature of table._features) {\n    feature.createColumn?.(column as Column<TData, TValue>, table)\n  }\n\n  // Yes, we have to convert table to unknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n", "import {\n  RowData,\n  Column,\n  Header,\n  HeaderGroup,\n  Table,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nconst debug = 'debugHeaders'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  depth: number\n  headers: Header<TData, unknown>[]\n  id: string\n}\n\nexport interface HeaderContext<TData, TValue> {\n  /**\n   * An instance of a column.\n   */\n  column: Column<TData, TValue>\n  /**\n   * An instance of a header.\n   */\n  header: Header<TData, TValue>\n  /**\n   * The table instance.\n   */\n  table: Table<TData>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  /**\n   * The col-span for the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#colspan)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  colSpan: number\n  /**\n   * The header's associated column object.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#column)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  column: Column<TData, TValue>\n  /**\n   * The depth of the header, zero-indexed based.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#depth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  depth: number\n  /**\n   * Returns the rendering context (or props) for column-based components like headers, footers and filters.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#getcontext)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getContext: () => HeaderContext<TData, TValue>\n  /**\n   * Returns the leaf headers hierarchically nested under this header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#getleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * The header's associated header group object.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#headergroup)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  headerGroup: HeaderGroup<TData>\n  /**\n   * The unique identifier for the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  id: string\n  /**\n   * The index for the header within the header group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#index)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  index: number\n  /**\n   * A boolean denoting if the header is a placeholder header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#isplaceholder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  isPlaceholder: boolean\n  /**\n   * If the header is a placeholder header, this will be a unique header ID that does not conflict with any other headers across the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#placeholderid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  placeholderId?: string\n  /**\n   * The row-span for the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#rowspan)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  rowSpan: number\n  /**\n   * The header's hierarchical sub/child headers. Will be empty if the header's associated column is a leaf-column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/header#subheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  subHeaders: Header<TData, TValue>[]\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  /**\n   * Returns all header groups for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the header groups for the left pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the header groups for columns that are not pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the header groups for the right pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightheadergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  /**\n   * Returns the footer groups for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getFooterGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the footer groups for the left pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the footer groups for columns that are not pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  /**\n   * If pinning, returns the footer groups for the right pinned columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightfootergroups)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  /**\n   * Returns headers for all columns in the table, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getFlatHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all left pinned columns in the table, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all columns that are not pinned, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all right pinned columns in the table, including parent headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightflatheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  /**\n   * Returns headers for all leaf columns in the table, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all left pinned leaf columns in the table, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getleftleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all columns that are not pinned, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getcenterleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  /**\n   * If pinning, returns headers for all right pinned leaf columns in the table, (not including parent headers).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/headers#getrightleafheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/headers)\n   */\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    feature.createHeader?.(header as Header<TData, TValue>, table)\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    // Header Groups\n\n    table.getHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        const leftColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const rightColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        const centerColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n\n        const headerGroups = buildHeaderGroups(\n          allColumns,\n          [...leftColumns, ...centerColumns, ...rightColumns],\n          table\n        )\n\n        return headerGroups\n      },\n      getMemoOptions(table.options, debug, 'getHeaderGroups')\n    )\n\n    table.getCenterHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, left, right) => {\n        leafColumns = leafColumns.filter(\n          column => !left?.includes(column.id) && !right?.includes(column.id)\n        )\n        return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n      },\n      getMemoOptions(table.options, debug, 'getCenterHeaderGroups')\n    )\n\n    table.getLeftHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.left,\n      ],\n      (allColumns, leafColumns, left) => {\n        const orderedLeafColumns =\n          left\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'left')\n      },\n      getMemoOptions(table.options, debug, 'getLeftHeaderGroups')\n    )\n\n    table.getRightHeaderGroups = memo(\n      () => [\n        table.getAllColumns(),\n        table.getVisibleLeafColumns(),\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, leafColumns, right) => {\n        const orderedLeafColumns =\n          right\n            ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n            .filter(Boolean) ?? []\n\n        return buildHeaderGroups(allColumns, orderedLeafColumns, table, 'right')\n      },\n      getMemoOptions(table.options, debug, 'getRightHeaderGroups')\n    )\n\n    // Footer Groups\n\n    table.getFooterGroups = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      getMemoOptions(table.options, debug, 'getFooterGroups')\n    )\n\n    table.getLeftFooterGroups = memo(\n      () => [table.getLeftHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      getMemoOptions(table.options, debug, 'getLeftFooterGroups')\n    )\n\n    table.getCenterFooterGroups = memo(\n      () => [table.getCenterHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      getMemoOptions(table.options, debug, 'getCenterFooterGroups')\n    )\n\n    table.getRightFooterGroups = memo(\n      () => [table.getRightHeaderGroups()],\n      headerGroups => {\n        return [...headerGroups].reverse()\n      },\n      getMemoOptions(table.options, debug, 'getRightFooterGroups')\n    )\n\n    // Flat Headers\n\n    table.getFlatHeaders = memo(\n      () => [table.getHeaderGroups()],\n      headerGroups => {\n        return headerGroups\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getFlatHeaders')\n    )\n\n    table.getLeftFlatHeaders = memo(\n      () => [table.getLeftHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getLeftFlatHeaders')\n    )\n\n    table.getCenterFlatHeaders = memo(\n      () => [table.getCenterHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getCenterFlatHeaders')\n    )\n\n    table.getRightFlatHeaders = memo(\n      () => [table.getRightHeaderGroups()],\n      left => {\n        return left\n          .map(headerGroup => {\n            return headerGroup.headers\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getRightFlatHeaders')\n    )\n\n    // Leaf Headers\n\n    table.getCenterLeafHeaders = memo(\n      () => [table.getCenterFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      getMemoOptions(table.options, debug, 'getCenterLeafHeaders')\n    )\n\n    table.getLeftLeafHeaders = memo(\n      () => [table.getLeftFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      getMemoOptions(table.options, debug, 'getLeftLeafHeaders')\n    )\n\n    table.getRightLeafHeaders = memo(\n      () => [table.getRightFlatHeaders()],\n      flatHeaders => {\n        return flatHeaders.filter(header => !header.subHeaders?.length)\n      },\n      getMemoOptions(table.options, debug, 'getRightLeafHeaders')\n    )\n\n    table.getLeafHeaders = memo(\n      () => [\n        table.getLeftHeaderGroups(),\n        table.getCenterHeaderGroups(),\n        table.getRightHeaderGroups(),\n      ],\n      (left, center, right) => {\n        return [\n          ...(left[0]?.headers ?? []),\n          ...(center[0]?.headers ?? []),\n          ...(right[0]?.headers ?? []),\n        ]\n          .map(header => {\n            return header.getLeafHeaders()\n          })\n          .flat()\n      },\n      getMemoOptions(table.options, debug, 'getLeafHeaders')\n    )\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n", "import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, getMemoOptions, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  _uniqueValuesCache: Record<string, unknown>\n  _valuesCache: Record<string, unknown>\n  /**\n   * The depth of the row (if nested or grouped) relative to the root row array.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#depth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  depth: number\n  /**\n   * Returns all of the cells for the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getallcells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getAllCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns the leaf rows for the row, not including any parent rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getleafrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getLeafRows: () => Row<TData>[]\n  /**\n   * Returns the parent row for the row, if it exists.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getparentrow)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getParentRow: () => Row<TData> | undefined\n  /**\n   * Returns the parent rows for the row, all the way up to a root row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getparentrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getParentRows: () => Row<TData>[]\n  /**\n   * Returns a unique array of values from the row for a given columnId.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getuniquevalues)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  /**\n   * Returns the value from the row for a given columnId.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#getvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  getValue: <TValue>(columnId: string) => TValue\n  /**\n   * The resolved unique identifier for the row resolved via the `options.getRowId` option. Defaults to the row's index (or relative index if it is a subRow).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#id)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  id: string\n  /**\n   * The index of the row within its parent array (or the root data array).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#index)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  index: number\n  /**\n   * The original row object provided to the table. If the row is a grouped row, the original row object will be the first original in the group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#original)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  original: TData\n  /**\n   * An array of the original subRows as returned by the `options.getSubRows` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#originalsubrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  originalSubRows?: TData[]\n  /**\n   * If nested, this row's parent row id.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#parentid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  parentId?: string\n  /**\n   * Renders the value for the row in a given columnId the same as `getValue`, but will return the `renderFallbackValue` if no value is found.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#rendervalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  renderValue: <TValue>(columnId: string) => TValue\n  /**\n   * An array of subRows for the row as returned and created by the `options.getSubRows` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/row#subrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/rows)\n   */\n  subRows: Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () =>\n      row.parentId ? table.getRow(row.parentId, true) : undefined,\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      getMemoOptions(table.options, 'debugRows', 'getAllCells')\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce(\n          (acc, cell) => {\n            acc[cell.column.id] = cell\n            return acc\n          },\n          {} as Record<string, Cell<TData, unknown>>\n        )\n      },\n      getMemoOptions(table.options, 'debugRows', 'getAllCellsByColumnId')\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    feature?.createRow?.(row as Row<TData>, table)\n  }\n\n  return row as Row<TData>\n}\n", "import { RowModel } from '..'\nimport { Column, RowData, Table, TableFeature } from '../types'\n\nexport interface FacetedColumn<TData extends RowData> {\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n  _getFacetedRowModel?: () => RowModel<TData>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  /**\n   * A function that **computes and returns** a min/max tuple derived from `column.getFacetedRowModel`. Useful for displaying faceted result values.\n   * > ⚠️ Requires that you pass a valid `getFacetedMinMaxValues` function to `options.getFacetedMinMaxValues`. A default implementation is provided via the exported `getFacetedMinMaxValues` function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-faceting#getfacetedminmaxvalues)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-faceting)\n   */\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  /**\n   * Returns the row model with all other column filters applied, excluding its own filter. Useful for displaying faceted result counts.\n   * > ⚠️ Requires that you pass a valid `getFacetedRowModel` function to `options.facetedRowModel`. A default implementation is provided via the exported `getFacetedRowModel` function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-faceting#getfacetedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-faceting)\n   */\n  getFacetedRowModel: () => RowModel<TData>\n  /**\n   * A function that **computes and returns** a `Map` of unique values and their occurrences derived from `column.getFacetedRowModel`. Useful for displaying faceted result values.\n   * > ⚠️ Requires that you pass a valid `getFacetedUniqueValues` function to `options.getFacetedUniqueValues`. A default implementation is provided via the exported `getFacetedUniqueValues` function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-faceting#getfaceteduniquevalues)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-faceting)\n   */\n  getFacetedUniqueValues: () => Map<any, number>\n}\n\nexport interface FacetedOptions<TData extends RowData> {\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n}\n\n//\n\nexport const ColumnFaceting: TableFeature = {\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column._getFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, column.id)\n    column.getFacetedRowModel = () => {\n      if (!column._getFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return column._getFacetedRowModel()\n    }\n    column._getFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, column.id)\n    column.getFacetedUniqueValues = () => {\n      if (!column._getFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return column._getFacetedUniqueValues()\n    }\n    column._getFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, column.id)\n    column.getFacetedMinMaxValues = () => {\n      if (!column._getFacetedMinMaxValues) {\n        return undefined\n      }\n\n      return column._getFacetedMinMaxValues()\n    }\n  },\n}\n", "import { FilterFn } from './features/ColumnFiltering'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n", "import { RowModel } from '..'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  FilterFns,\n  FilterMeta,\n  OnChangeFn,\n  Row,\n  RowData,\n  Table,\n  TableFeature,\n  Updater,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface ColumnFiltersTableState {\n  columnFilters: ColumnFiltersState\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  filterFn: FilterFn<TData>\n  id: string\n  resolvedValue: unknown\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n  resolveFilterValue?: TransformFilterValueFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface ColumnFiltersColumnDef<TData extends RowData> {\n  /**\n   * Enables/disables the **column** filter for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#enablecolumnfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  enableColumnFilter?: boolean\n  /**\n   * The filter function to use with this column. Can be the name of a built-in filter function or a custom filter function.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#filterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  filterFn?: FilterFnOption<TData>\n}\n\nexport interface ColumnFiltersColumn<TData extends RowData> {\n  /**\n   * Returns an automatically calculated filter function for the column based off of the columns first known value.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getautofilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  /**\n   * Returns whether or not the column can be **column** filtered.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getcanfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getCanFilter: () => boolean\n  /**\n   * Returns the filter function (either user-defined or automatic, depending on configuration) for the columnId specified.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilterFn: () => FilterFn<TData> | undefined\n  /**\n   * Returns the index (including `-1`) of the column filter in the table's `state.columnFilters` array.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfilterindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilterIndex: () => number\n  /**\n   * Returns the current filter value for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfiltervalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilterValue: () => unknown\n  /**\n   * Returns whether or not the column is currently filtered.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getisfiltered)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getIsFiltered: () => boolean\n  /**\n   * A function that sets the current filter value for the column. You can pass it a value or an updater function for immutability-safe operations on existing values.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#setfiltervalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  setFilterValue: (updater: Updater<any>) => void\n}\n\nexport interface ColumnFiltersRow<TData extends RowData> {\n  /**\n   * The column filters map for the row. This object tracks whether a row is passing/failing specific filters by their column ID.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#columnfilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  columnFilters: Record<string, boolean>\n  /**\n   * The column filters meta map for the row. This object tracks any filter meta for a row as optionally provided during the filtering process.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#columnfiltersmeta)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface ColumnFiltersOptionsBase<TData extends RowData> {\n  /**\n   * Enables/disables **column** filtering for all columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#enablecolumnfilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  enableColumnFilters?: boolean\n  /**\n   * Enables/disables all filtering for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#enablefilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  enableFilters?: boolean\n  /**\n   * By default, filtering is done from parent rows down (so if a parent row is filtered out, all of its children will be filtered out as well). Setting this option to `true` will cause filtering to be done from leaf rows up (which means parent rows will be included so long as one of their child or grand-child rows is also included).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#filterfromleafrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  filterFromLeafRows?: boolean\n  /**\n   * If provided, this function is called **once** per table and should return a **new function** which will calculate and return the row model for the table when it's filtered.\n   * - For server-side filtering, this function is unnecessary and can be ignored since the server should already return the filtered row model.\n   * - For client-side filtering, this function is required. A default implementation is provided via any table adapter's `{ getFilteredRowModel }` export.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfilteredrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * Disables the `getFilteredRowModel` from being used to filter data. This may be useful if your table needs to dynamically support both client-side and server-side filtering.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#manualfiltering)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  manualFiltering?: boolean\n  /**\n   * By default, filtering is done for all rows (max depth of 100), no matter if they are root level parent rows or the child leaf rows of a parent row. Setting this option to `0` will cause filtering to only be applied to the root level parent rows, with all sub-rows remaining unfiltered. Similarly, setting this option to `1` will cause filtering to only be applied to child leaf rows 1 level deep, and so on.\n\n   * This is useful for situations where you want a row's entire child hierarchy to be visible regardless of the applied filter.\n    * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#maxleafrowfilterdepth)\n    * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  maxLeafRowFilterDepth?: number\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnFilters` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#oncolumnfilterschange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface ColumnFiltersOptions<TData extends RowData>\n  extends ColumnFiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface ColumnFiltersInstance<TData extends RowData> {\n  _getFilteredRowModel?: () => RowModel<TData>\n  /**\n   * Returns the row model for the table after **column** filtering has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getfilteredrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getFilteredRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model for the table before any **column** filtering has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#getprefilteredrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  getPreFilteredRowModel: () => RowModel<TData>\n  /**\n   * Resets the **columnFilters** state to `initialState.columnFilters`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#resetcolumnfilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  resetColumnFilters: (defaultState?: boolean) => void\n  /**\n   * Resets the **globalFilter** state to `initialState.globalFilter`, or `true` can be passed to force a default blank state reset to `undefined`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#resetglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  resetGlobalFilter: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnFilters` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#setcolumnfilters)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n  /**\n   * Sets or updates the `state.globalFilter` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-filtering#setglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-filtering)\n   */\n  setGlobalFilter: (updater: Updater<any>) => void\n}\n\n//\n\nexport const ColumnFiltering: TableFeature = {\n  getDefaultColumnDef: <\n    TData extends RowData,\n  >(): ColumnFiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): ColumnFiltersTableState => {\n    return {\n      columnFilters: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnFiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n    } as ColumnFiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoFilterFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return filterFns.includesString\n      }\n\n      if (typeof value === 'number') {\n        return filterFns.inNumberRange\n      }\n\n      if (typeof value === 'boolean') {\n        return filterFns.equals\n      }\n\n      if (value !== null && typeof value === 'object') {\n        return filterFns.equals\n      }\n\n      if (Array.isArray(value)) {\n        return filterFns.arrIncludes\n      }\n\n      return filterFns.weakEquals\n    }\n    column.getFilterFn = () => {\n      return isFunction(column.columnDef.filterFn)\n        ? column.columnDef.filterFn\n        : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          : // @ts-ignore\n            table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n    }\n    column.getCanFilter = () => {\n      return (\n        (column.columnDef.enableColumnFilter ?? true) &&\n        (table.options.enableColumnFilters ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsFiltered = () => column.getFilterIndex() > -1\n\n    column.getFilterValue = () =>\n      table.getState().columnFilters?.find(d => d.id === column.id)?.value\n\n    column.getFilterIndex = () =>\n      table.getState().columnFilters?.findIndex(d => d.id === column.id) ?? -1\n\n    column.setFilterValue = value => {\n      table.setColumnFilters(old => {\n        const filterFn = column.getFilterFn()\n        const previousFilter = old?.find(d => d.id === column.id)\n\n        const newFilter = functionalUpdate(\n          value,\n          previousFilter ? previousFilter.value : undefined\n        )\n\n        //\n        if (\n          shouldAutoRemoveFilter(filterFn as FilterFn<TData>, newFilter, column)\n        ) {\n          return old?.filter(d => d.id !== column.id) ?? []\n        }\n\n        const newFilterObj = { id: column.id, value: newFilter }\n\n        if (previousFilter) {\n          return (\n            old?.map(d => {\n              if (d.id === column.id) {\n                return newFilterObj\n              }\n              return d\n            }) ?? []\n          )\n        }\n\n        if (old?.length) {\n          return [...old, newFilterObj]\n        }\n\n        return [newFilterObj]\n      })\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    _table: Table<TData>\n  ): void => {\n    row.columnFilters = {}\n    row.columnFiltersMeta = {}\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnFilters = (updater: Updater<ColumnFiltersState>) => {\n      const leafColumns = table.getAllLeafColumns()\n\n      const updateFn = (old: ColumnFiltersState) => {\n        return functionalUpdate(updater, old)?.filter(filter => {\n          const column = leafColumns.find(d => d.id === filter.id)\n\n          if (column) {\n            const filterFn = column.getFilterFn()\n\n            if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n              return false\n            }\n          }\n\n          return true\n        })\n      }\n\n      table.options.onColumnFiltersChange?.(updateFn)\n    }\n\n    table.resetColumnFilters = defaultState => {\n      table.setColumnFilters(\n        defaultState ? [] : table.initialState?.columnFilters ?? []\n      )\n    }\n\n    table.getPreFilteredRowModel = () => table.getCoreRowModel()\n    table.getFilteredRowModel = () => {\n      if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n        table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n      }\n\n      if (table.options.manualFiltering || !table._getFilteredRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getFilteredRowModel()\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n", "import { AggregationFn } from './features/ColumnGrouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n", "import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport {\n  AggregationFns,\n  Cell,\n  Column,\n  ColumnDefTemplate,\n  OnChangeFn,\n  Row,\n  RowData,\n  Table,\n  TableFeature,\n  Updater,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  /**\n   * The cell to display each row for the column if the cell is an aggregate. If a function is passed, it will be passed a props object with the context of the cell and should return the property type for your adapter (the exact type depends on the adapter being used).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#aggregatedcell)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  /**\n   * The resolved aggregation function for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#aggregationfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  aggregationFn?: AggregationFnOption<TData>\n  /**\n   * Enables/disables grouping for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#enablegrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  enableGrouping?: boolean\n  /**\n   * Specify a value to be used for grouping rows on this column. If this option is not specified, the value derived from `accessorKey` / `accessorFn` will be used instead.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupingvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  /**\n   * Returns the aggregation function for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getaggregationfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getAggregationFn: () => AggregationFn<TData> | undefined\n  /**\n   * Returns the automatically inferred aggregation function for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getautoaggregationfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  /**\n   * Returns whether or not the column can be grouped.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getcangroup)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getCanGroup: () => boolean\n  /**\n   * Returns the index of the column in the grouping state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupedindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupedIndex: () => number\n  /**\n   * Returns whether or not the column is currently grouped.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisgrouped)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsGrouped: () => boolean\n  /**\n   * Returns a function that toggles the grouping state of the column. This is useful for passing to the `onClick` prop of a button.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#gettogglegroupinghandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getToggleGroupingHandler: () => () => void\n  /**\n   * Toggles the grouping state of the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#togglegrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  toggleGrouping: () => void\n}\n\nexport interface GroupingRow {\n  _groupingValuesCache: Record<string, any>\n  /**\n   * Returns the grouping value for any row and column (including leaf rows).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupingvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupingValue: (columnId: string) => unknown\n  /**\n   * Returns whether or not the row is currently grouped.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisgrouped)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsGrouped: () => boolean\n  /**\n   * If this row is grouped, this is the id of the column that this row is grouped by.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#groupingcolumnid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  groupingColumnId?: string\n  /**\n   * If this row is grouped, this is the unique/shared value for the `groupingColumnId` for all of the rows in this group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#groupingvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  groupingValue?: unknown\n}\n\nexport interface GroupingCell {\n  /**\n   * Returns whether or not the cell is currently aggregated.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisaggregated)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsAggregated: () => boolean\n  /**\n   * Returns whether or not the cell is currently grouped.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisgrouped)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsGrouped: () => boolean\n  /**\n   * Returns whether or not the cell is currently a placeholder cell.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getisplaceholder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getIsPlaceholder: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  enableGrouping: boolean\n  onGroupingChange: OnChangeFn<GroupingState>\n}\n\ninterface GroupingOptionsBase {\n  /**\n   * Enables/disables grouping for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#enablegrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  enableGrouping?: boolean\n  /**\n   * Returns the row model after grouping has taken place, but no further.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * Grouping columns are automatically reordered by default to the start of the columns list. If you would rather remove them or leave them as-is, set the appropriate mode here.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#groupedcolumnmode)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  groupedColumnMode?: false | 'reorder' | 'remove'\n  /**\n   * Enables manual grouping. If this option is set to `true`, the table will not automatically group rows using `getGroupedRowModel()` and instead will expect you to manually group the rows before passing them to the table. This is useful if you are doing server-side grouping and aggregation.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#manualgrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  manualGrouping?: boolean\n  /**\n   * If this function is provided, it will be called when the grouping state changes and you will be expected to manage the state yourself. You can pass the managed state back to the table via the `tableOptions.state.grouping` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#ongroupingchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  onGroupingChange?: OnChangeFn<GroupingState>\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  _getGroupedRowModel?: () => RowModel<TData>\n  /**\n   * Returns the row model for the table after grouping has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getgroupedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getGroupedRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model for the table before any grouping has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#getpregroupedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  getPreGroupedRowModel: () => RowModel<TData>\n  /**\n   * Resets the **grouping** state to `initialState.grouping`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#resetgrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  resetGrouping: (defaultState?: boolean) => void\n  /**\n   * Updates the grouping state of the table via an update function or value.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/grouping#setgrouping)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/grouping)\n   */\n  setGrouping: (updater: Updater<GroupingState>) => void\n}\n\n//\n\nexport const ColumnGrouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleGrouping = () => {\n      table.setGrouping(old => {\n        // Find any existing grouping for this column\n        if (old?.includes(column.id)) {\n          return old.filter(d => d !== column.id)\n        }\n\n        return [...(old ?? []), column.id]\n      })\n    }\n\n    column.getCanGroup = () => {\n      return (\n        (column.columnDef.enableGrouping ?? true) &&\n        (table.options.enableGrouping ?? true) &&\n        (!!column.accessorFn || !!column.columnDef.getGroupingValue)\n      )\n    }\n\n    column.getIsGrouped = () => {\n      return table.getState().grouping?.includes(column.id)\n    }\n\n    column.getGroupedIndex = () => table.getState().grouping?.indexOf(column.id)\n\n    column.getToggleGroupingHandler = () => {\n      const canGroup = column.getCanGroup()\n\n      return () => {\n        if (!canGroup) return\n        column.toggleGrouping()\n      }\n    }\n    column.getAutoAggregationFn = () => {\n      const firstRow = table.getCoreRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'number') {\n        return aggregationFns.sum\n      }\n\n      if (Object.prototype.toString.call(value) === '[object Date]') {\n        return aggregationFns.extent\n      }\n    }\n    column.getAggregationFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.aggregationFn)\n        ? column.columnDef.aggregationFn\n        : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setGrouping = updater => table.options.onGroupingChange?.(updater)\n\n    table.resetGrouping = defaultState => {\n      table.setGrouping(defaultState ? [] : table.initialState?.grouping ?? [])\n    }\n\n    table.getPreGroupedRowModel = () => table.getFilteredRowModel()\n    table.getGroupedRowModel = () => {\n      if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n        table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n      }\n\n      if (table.options.manualGrouping || !table._getGroupedRowModel) {\n        return table.getPreGroupedRowModel()\n      }\n\n      return table._getGroupedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getIsGrouped = () => !!row.groupingColumnId\n    row.getGroupingValue = columnId => {\n      if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n        return row._groupingValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.columnDef.getGroupingValue) {\n        return row.getValue(columnId)\n      }\n\n      row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n        row.original\n      )\n\n      return row._groupingValuesCache[columnId]\n    }\n    row._groupingValuesCache = {}\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    cell.getIsGrouped = () =>\n      column.getIsGrouped() && column.id === row.groupingColumnId\n    cell.getIsPlaceholder = () => !cell.getIsGrouped() && column.getIsGrouped()\n    cell.getIsAggregated = () =>\n      !cell.getIsGrouped() && !cell.getIsPlaceholder() && !!row.subRows?.length\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n", "import { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nimport {\n  Column,\n  OnChangeFn,\n  RowData,\n  Table,\n  TableFeature,\n  Updater,\n} from '../types'\n\nimport { orderColumns } from './ColumnGrouping'\nimport { ColumnPinningPosition, _getVisibleLeafColumns } from '..'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnOrder` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#oncolumnorderchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderColumn {\n  /**\n   * Returns the index of the column in the order of the visible columns. Optionally pass a `position` parameter to get the index of the column in a sub-section of the table\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#getindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  getIndex: (position?: ColumnPinningPosition | 'center') => number\n  /**\n   * Returns `true` if the column is the first column in the order of the visible columns. Optionally pass a `position` parameter to check if the column is the first in a sub-section of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#getisfirstcolumn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  getIsFirstColumn: (position?: ColumnPinningPosition | 'center') => boolean\n  /**\n   * Returns `true` if the column is the last column in the order of the visible columns. Optionally pass a `position` parameter to check if the column is the last in a sub-section of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#getislastcolumn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  getIsLastColumn: (position?: ColumnPinningPosition | 'center') => boolean\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n  /**\n   * Resets the **columnOrder** state to `initialState.columnOrder`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#resetcolumnorder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  resetColumnOrder: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnOrder` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-ordering#setcolumnorder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-ordering)\n   */\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n}\n\n//\n\nexport const ColumnOrdering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getIndex = memo(\n      position => [_getVisibleLeafColumns(table, position)],\n      columns => columns.findIndex(d => d.id === column.id),\n      getMemoOptions(table.options, 'debugColumns', 'getIndex')\n    )\n    column.getIsFirstColumn = position => {\n      const columns = _getVisibleLeafColumns(table, position)\n      return columns[0]?.id === column.id\n    }\n    column.getIsLastColumn = position => {\n      const columns = _getVisibleLeafColumns(table, position)\n      return columns[columns.length - 1]?.id === column.id\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnOrder = updater =>\n      table.options.onColumnOrderChange?.(updater)\n    table.resetColumnOrder = defaultState => {\n      table.setColumnOrder(\n        defaultState ? [] : table.initialState.columnOrder ?? []\n      )\n    }\n    table._getOrderColumnsFn = memo(\n      () => [\n        table.getState().columnOrder,\n        table.getState().grouping,\n        table.options.groupedColumnMode,\n      ],\n      (columnOrder, grouping, groupedColumnMode) =>\n        (columns: Column<TData, unknown>[]) => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n      getMemoOptions(table.options, 'debugTable', '_getOrderColumnsFn')\n    )\n  },\n}\n", "import {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  /**\n   * Enables/disables column pinning for the table. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#enablecolumnpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  enableColumnPinning?: boolean\n  /**\n   * @deprecated Use `enableColumnPinning` or `enableRowPinning` instead.\n   * Enables/disables all pinning for the table. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#enablepinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  enablePinning?: boolean\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnPinning` changes. This overrides the default internal state management, so you will also need to supply `state.columnPinning` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#oncolumnpinningchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/oncolumnpinningchange)\n   */\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  /**\n   * Enables/disables column pinning for this column. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#enablepinning-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  /**\n   * Returns whether or not the column can be pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getcanpin)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getCanPin: () => boolean\n  /**\n   * Returns the pinned position of the column. (`'left'`, `'right'` or `false`)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getispinned)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getIsPinned: () => ColumnPinningPosition\n  /**\n   * Returns the numeric pinned index of the column within a pinned column group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getpinnedindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getPinnedIndex: () => number\n  /**\n   * Pins a column to the `'left'` or `'right'`, or unpins the column to the center if `false` is passed.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#pin)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  /**\n   * Returns all center pinned (unpinned) leaf cells in the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getcentervisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns all left pinned leaf cells in the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getleftvisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns all right pinned leaf cells in the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getrightvisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  /**\n   * Returns all center pinned (unpinned) leaf columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getcenterleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns whether or not any columns are pinned. Optionally specify to only check for pinned columns in either the `left` or `right` position.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getissomecolumnspinned)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  /**\n   * Returns all left pinned leaf columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getleftleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns all right pinned leaf columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#getrightleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Resets the **columnPinning** state to `initialState.columnPinning`, or `true` can be passed to force a default blank state reset to `{ left: [], right: [], }`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#resetcolumnpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  resetColumnPinning: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnPinning` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-pinning#setcolumnpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-pinning)\n   */\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n}\n\n//\n\nconst getDefaultColumnPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const ColumnPinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultColumnPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.pin = position => {\n      const columnIds = column\n        .getLeafColumns()\n        .map(d => d.id)\n        .filter(Boolean) as string[]\n\n      table.setColumnPinning(old => {\n        if (position === 'right') {\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: [\n              ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n          }\n        }\n\n        if (position === 'left') {\n          return {\n            left: [\n              ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        }\n\n        return {\n          left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n          right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n        }\n      })\n    }\n\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns()\n\n      return leafColumns.some(\n        d =>\n          (d.columnDef.enablePinning ?? true) &&\n          (table.options.enableColumnPinning ??\n            table.options.enablePinning ??\n            true)\n      )\n    }\n\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n      const { left, right } = table.getState().columnPinning\n\n      const isLeft = leafColumnIds.some(d => left?.includes(d))\n      const isRight = leafColumnIds.some(d => right?.includes(d))\n\n      return isLeft ? 'left' : isRight ? 'right' : false\n    }\n\n    column.getPinnedIndex = () => {\n      const position = column.getIsPinned()\n\n      return position\n        ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n        : 0\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.getCenterVisibleCells = memo(\n      () => [\n        row._getAllVisibleCells(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allCells, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allCells.filter(d => !leftAndRight.includes(d.column.id))\n      },\n      getMemoOptions(table.options, 'debugRows', 'getCenterVisibleCells')\n    )\n    row.getLeftVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.left],\n      (allCells, left) => {\n        const cells = (left ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'left' }) as Cell<TData, unknown>)\n\n        return cells\n      },\n      getMemoOptions(table.options, 'debugRows', 'getLeftVisibleCells')\n    )\n    row.getRightVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n      (allCells, right) => {\n        const cells = (right ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'right' }) as Cell<TData, unknown>)\n\n        return cells\n      },\n      getMemoOptions(table.options, 'debugRows', 'getRightVisibleCells')\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnPinning = updater =>\n      table.options.onColumnPinningChange?.(updater)\n\n    table.resetColumnPinning = defaultState =>\n      table.setColumnPinning(\n        defaultState\n          ? getDefaultColumnPinningState()\n          : table.initialState?.columnPinning ?? getDefaultColumnPinningState()\n      )\n\n    table.getIsSomeColumnsPinned = position => {\n      const pinningState = table.getState().columnPinning\n\n      if (!position) {\n        return Boolean(pinningState.left?.length || pinningState.right?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table.getLeftLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n      (allColumns, left) => {\n        return (left ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      getMemoOptions(table.options, 'debugColumns', 'getLeftLeafColumns')\n    )\n\n    table.getRightLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n      (allColumns, right) => {\n        return (right ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      getMemoOptions(table.options, 'debugColumns', 'getRightLeafColumns')\n    )\n\n    table.getCenterLeafColumns = memo(\n      () => [\n        table.getAllLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allColumns.filter(d => !leftAndRight.includes(d.id))\n      },\n      getMemoOptions(table.options, 'debugColumns', 'getCenterLeafColumns')\n    )\n  },\n}\n", "import { _getVisibleLeafColumns } from '..'\nimport {\n  RowData,\n  Column,\n  Header,\n  OnChangeFn,\n  Table,\n  Updater,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\nimport { ColumnPinningPosition } from './ColumnPinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  columnSizingStart: [string, number][]\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  startOffset: null | number\n  startSize: null | number\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnResizeDirection = 'ltr' | 'rtl'\n\nexport interface ColumnSizingOptions {\n  /**\n   * Determines when the columnSizing state is updated. `onChange` updates the state when the user is dragging the resize handle. `onEnd` updates the state when the user releases the resize handle.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#columnresizemode)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  columnResizeMode?: ColumnResizeMode\n  /**\n   * Enables or disables column resizing for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#enablecolumnresizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  enableColumnResizing?: boolean\n  /**\n   * Enables or disables right-to-left support for resizing the column. defaults to 'ltr'.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#columnResizeDirection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  columnResizeDirection?: ColumnResizeDirection\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnSizing` changes. This overrides the default internal state management, so you will also need to supply `state.columnSizing` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#oncolumnsizingchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnSizingInfo` changes. This overrides the default internal state management, so you will also need to supply `state.columnSizingInfo` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#oncolumnsizinginfochange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = Pick<\n  ColumnSizingOptions,\n  | 'columnResizeMode'\n  | 'onColumnSizingChange'\n  | 'onColumnSizingInfoChange'\n  | 'columnResizeDirection'\n>\n\nexport interface ColumnSizingInstance {\n  /**\n   * If pinning, returns the total size of the center portion of the table by calculating the sum of the sizes of all unpinned/center leaf-columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getcentertotalsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getCenterTotalSize: () => number\n  /**\n   * Returns the total size of the left portion of the table by calculating the sum of the sizes of all left leaf-columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getlefttotalsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getLeftTotalSize: () => number\n  /**\n   * Returns the total size of the right portion of the table by calculating the sum of the sizes of all right leaf-columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getrighttotalsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getRightTotalSize: () => number\n  /**\n   * Returns the total size of the table by calculating the sum of the sizes of all leaf-columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#gettotalsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getTotalSize: () => number\n  /**\n   * Resets column sizing to its initial state. If `defaultState` is `true`, the default state for the table will be used instead of the initialValue provided to the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#resetcolumnsizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  resetColumnSizing: (defaultState?: boolean) => void\n  /**\n   * Resets column sizing info to its initial state. If `defaultState` is `true`, the default state for the table will be used instead of the initialValue provided to the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#resetheadersizeinfo)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  /**\n   * Sets the column sizing state using an updater function or a value. This will trigger the underlying `onColumnSizingChange` function if one is passed to the table options, otherwise the state will be managed automatically by the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#setcolumnsizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  /**\n   * Sets the column sizing info state using an updater function or a value. This will trigger the underlying `onColumnSizingInfoChange` function if one is passed to the table options, otherwise the state will be managed automatically by the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#setcolumnsizinginfo)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n}\n\nexport interface ColumnSizingColumnDef {\n  /**\n   * Enables or disables column resizing for the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#enableresizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  enableResizing?: boolean\n  /**\n   * The maximum allowed size for the column\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#maxsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  maxSize?: number\n  /**\n   * The minimum allowed size for the column\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#minsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  minSize?: number\n  /**\n   * The desired size for the column\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#size)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  size?: number\n}\n\nexport interface ColumnSizingColumn {\n  /**\n   * Returns `true` if the column can be resized.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getcanresize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getCanResize: () => boolean\n  /**\n   * Returns `true` if the column is currently being resized.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getisresizing)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getIsResizing: () => boolean\n  /**\n   * Returns the current size of the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getSize: () => number\n  /**\n   * Returns the offset measurement along the row-axis (usually the x-axis for standard tables) for the header. This is effectively a sum of the offset measurements of all preceding (left) headers in relation to the current column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getstart)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getStart: (position?: ColumnPinningPosition | 'center') => number\n  /**\n   * Returns the offset measurement along the row-axis (usually the x-axis for standard tables) for the header. This is effectively a sum of the offset measurements of all succeeding (right) headers in relation to the current column.\n   */\n  getAfter: (position?: ColumnPinningPosition | 'center') => number\n  /**\n   * Resets the column to its initial size.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#resetsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  /**\n   * Returns an event handler function that can be used to resize the header. It can be used as an:\n   * - `onMouseDown` handler\n   * - `onTouchStart` handler\n   *\n   * The dragging and release events are automatically handled for you.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getresizehandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getResizeHandler: (context?: Document) => (event: unknown) => void\n  /**\n   * Returns the current size of the header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getsize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getSize: () => number\n  /**\n   * Returns the offset measurement along the row-axis (usually the x-axis for standard tables) for the header. This is effectively a sum of the offset measurements of all preceding headers.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-sizing#getstart)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-sizing)\n   */\n  getStart: (position?: ColumnPinningPosition) => number\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      columnResizeDirection: 'ltr',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getSize = () => {\n      const columnSize = table.getState().columnSizing[column.id]\n\n      return Math.min(\n        Math.max(\n          column.columnDef.minSize ?? defaultColumnSizing.minSize,\n          columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n        ),\n        column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n      )\n    }\n\n    column.getStart = memo(\n      position => [\n        position,\n        _getVisibleLeafColumns(table, position),\n        table.getState().columnSizing,\n      ],\n      (position, columns) =>\n        columns\n          .slice(0, column.getIndex(position))\n          .reduce((sum, column) => sum + column.getSize(), 0),\n      getMemoOptions(table.options, 'debugColumns', 'getStart')\n    )\n\n    column.getAfter = memo(\n      position => [\n        position,\n        _getVisibleLeafColumns(table, position),\n        table.getState().columnSizing,\n      ],\n      (position, columns) =>\n        columns\n          .slice(column.getIndex(position) + 1)\n          .reduce((sum, column) => sum + column.getSize(), 0),\n      getMemoOptions(table.options, 'debugColumns', 'getAfter')\n    )\n\n    column.resetSize = () => {\n      table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n        return rest\n      })\n    }\n    column.getCanResize = () => {\n      return (\n        (column.columnDef.enableResizing ?? true) &&\n        (table.options.enableColumnResizing ?? true)\n      )\n    }\n    column.getIsResizing = () => {\n      return table.getState().columnSizingInfo.isResizingColumn === column.id\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    header.getSize = () => {\n      let sum = 0\n\n      const recurse = (header: Header<TData, TValue>) => {\n        if (header.subHeaders.length) {\n          header.subHeaders.forEach(recurse)\n        } else {\n          sum += header.column.getSize() ?? 0\n        }\n      }\n\n      recurse(header)\n\n      return sum\n    }\n    header.getStart = () => {\n      if (header.index > 0) {\n        const prevSiblingHeader = header.headerGroup.headers[header.index - 1]!\n        return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n      }\n\n      return 0\n    }\n    header.getResizeHandler = _contextDocument => {\n      const column = table.getColumn(header.column.id)\n      const canResize = column?.getCanResize()\n\n      return (e: unknown) => {\n        if (!column || !canResize) {\n          return\n        }\n\n        ;(e as any).persist?.()\n\n        if (isTouchStartEvent(e)) {\n          // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n          if (e.touches && e.touches.length > 1) {\n            return\n          }\n        }\n\n        const startSize = header.getSize()\n\n        const columnSizingStart: [string, number][] = header\n          ? header.getLeafHeaders().map(d => [d.column.id, d.column.getSize()])\n          : [[column.id, column.getSize()]]\n\n        const clientX = isTouchStartEvent(e)\n          ? Math.round(e.touches[0]!.clientX)\n          : (e as MouseEvent).clientX\n\n        const newColumnSizing: ColumnSizingState = {}\n\n        const updateOffset = (\n          eventType: 'move' | 'end',\n          clientXPos?: number\n        ) => {\n          if (typeof clientXPos !== 'number') {\n            return\n          }\n\n          table.setColumnSizingInfo(old => {\n            const deltaDirection =\n              table.options.columnResizeDirection === 'rtl' ? -1 : 1\n            const deltaOffset =\n              (clientXPos - (old?.startOffset ?? 0)) * deltaDirection\n            const deltaPercentage = Math.max(\n              deltaOffset / (old?.startSize ?? 0),\n              -0.999999\n            )\n\n            old.columnSizingStart.forEach(([columnId, headerSize]) => {\n              newColumnSizing[columnId] =\n                Math.round(\n                  Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                ) / 100\n            })\n\n            return {\n              ...old,\n              deltaOffset,\n              deltaPercentage,\n            }\n          })\n\n          if (\n            table.options.columnResizeMode === 'onChange' ||\n            eventType === 'end'\n          ) {\n            table.setColumnSizing(old => ({\n              ...old,\n              ...newColumnSizing,\n            }))\n          }\n        }\n\n        const onMove = (clientXPos?: number) => updateOffset('move', clientXPos)\n\n        const onEnd = (clientXPos?: number) => {\n          updateOffset('end', clientXPos)\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            isResizingColumn: false,\n            startOffset: null,\n            startSize: null,\n            deltaOffset: null,\n            deltaPercentage: null,\n            columnSizingStart: [],\n          }))\n        }\n\n        const contextDocument =\n          _contextDocument || typeof document !== 'undefined' ? document : null\n\n        const mouseEvents = {\n          moveHandler: (e: MouseEvent) => onMove(e.clientX),\n          upHandler: (e: MouseEvent) => {\n            contextDocument?.removeEventListener(\n              'mousemove',\n              mouseEvents.moveHandler\n            )\n            contextDocument?.removeEventListener(\n              'mouseup',\n              mouseEvents.upHandler\n            )\n            onEnd(e.clientX)\n          },\n        }\n\n        const touchEvents = {\n          moveHandler: (e: TouchEvent) => {\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onMove(e.touches[0]!.clientX)\n            return false\n          },\n          upHandler: (e: TouchEvent) => {\n            contextDocument?.removeEventListener(\n              'touchmove',\n              touchEvents.moveHandler\n            )\n            contextDocument?.removeEventListener(\n              'touchend',\n              touchEvents.upHandler\n            )\n            if (e.cancelable) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n            onEnd(e.touches[0]?.clientX)\n          },\n        }\n\n        const passiveIfSupported = passiveEventSupported()\n          ? { passive: false }\n          : false\n\n        if (isTouchStartEvent(e)) {\n          contextDocument?.addEventListener(\n            'touchmove',\n            touchEvents.moveHandler,\n            passiveIfSupported\n          )\n          contextDocument?.addEventListener(\n            'touchend',\n            touchEvents.upHandler,\n            passiveIfSupported\n          )\n        } else {\n          contextDocument?.addEventListener(\n            'mousemove',\n            mouseEvents.moveHandler,\n            passiveIfSupported\n          )\n          contextDocument?.addEventListener(\n            'mouseup',\n            mouseEvents.upHandler,\n            passiveIfSupported\n          )\n        }\n\n        table.setColumnSizingInfo(old => ({\n          ...old,\n          startOffset: clientX,\n          startSize,\n          deltaOffset: 0,\n          deltaPercentage: 0,\n          columnSizingStart,\n          isResizingColumn: column.id,\n        }))\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnSizing = updater =>\n      table.options.onColumnSizingChange?.(updater)\n    table.setColumnSizingInfo = updater =>\n      table.options.onColumnSizingInfoChange?.(updater)\n    table.resetColumnSizing = defaultState => {\n      table.setColumnSizing(\n        defaultState ? {} : table.initialState.columnSizing ?? {}\n      )\n    }\n    table.resetHeaderSizeInfo = defaultState => {\n      table.setColumnSizingInfo(\n        defaultState\n          ? getDefaultColumnSizingInfoState()\n          : table.initialState.columnSizingInfo ??\n              getDefaultColumnSizingInfoState()\n      )\n    }\n    table.getTotalSize = () =>\n      table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getLeftTotalSize = () =>\n      table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getCenterTotalSize = () =>\n      table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n    table.getRightTotalSize = () =>\n      table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getSize()\n      }, 0) ?? 0\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n", "import { ColumnPinningPosition } from '..'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  /**\n   * Whether to enable column hiding. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#enablehiding)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  enableHiding?: boolean\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnVisibility` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#oncolumnvisibilitychange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityDefaultOptions = Pick<\n  VisibilityOptions,\n  'onColumnVisibilityChange'\n>\n\nexport interface VisibilityInstance<TData extends RowData> {\n  /**\n   * If column pinning, returns a flat array of leaf-node columns that are visible in the unpinned/center portion of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getcentervisibleleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns whether all columns are visible\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getisallcolumnsvisible)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getIsAllColumnsVisible: () => boolean\n  /**\n   * Returns whether any columns are visible\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getissomecolumnsvisible)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getIsSomeColumnsVisible: () => boolean\n  /**\n   * If column pinning, returns a flat array of leaf-node columns that are visible in the left portion of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getleftvisibleleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * If column pinning, returns a flat array of leaf-node columns that are visible in the right portion of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getrightvisibleleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns a handler for toggling the visibility of all columns, meant to be bound to a `input[type=checkbox]` element.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#gettoggleallcolumnsvisibilityhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n  /**\n   * Returns a flat array of columns that are visible, including parent columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getvisibleflatcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns a flat array of leaf-node columns that are visible.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getvisibleleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Resets the column visibility state to the initial state. If `defaultState` is provided, the state will be reset to `{}`\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#resetcolumnvisibility)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  resetColumnVisibility: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnVisibility` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#setcolumnvisibility)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  /**\n   * Toggles the visibility of all columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#toggleallcolumnsvisible)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  toggleAllColumnsVisible: (value?: boolean) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns an array of cells that account for column visibility for the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getvisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  /**\n   * Returns whether the column can be hidden\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getcanhide)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getCanHide: () => boolean\n  /**\n   * Returns whether the column is visible\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#getisvisible)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getIsVisible: () => boolean\n  /**\n   * Returns a function that can be used to toggle the column visibility. This function can be used to bind to an event handler to a checkbox.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#gettogglevisibilityhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  getToggleVisibilityHandler: () => (event: unknown) => void\n  /**\n   * Toggles the visibility of the column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/column-visibility#togglevisibility)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/column-visibility)\n   */\n  toggleVisibility: (value?: boolean) => void\n}\n\n//\n\nexport const ColumnVisibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.toggleVisibility = value => {\n      if (column.getCanHide()) {\n        table.setColumnVisibility(old => ({\n          ...old,\n          [column.id]: value ?? !column.getIsVisible(),\n        }))\n      }\n    }\n    column.getIsVisible = () => {\n      const childColumns = column.columns\n      return (\n        (childColumns.length\n          ? childColumns.some(c => c.getIsVisible())\n          : table.getState().columnVisibility?.[column.id]) ?? true\n      )\n    }\n\n    column.getCanHide = () => {\n      return (\n        (column.columnDef.enableHiding ?? true) &&\n        (table.options.enableHiding ?? true)\n      )\n    }\n    column.getToggleVisibilityHandler = () => {\n      return (e: unknown) => {\n        column.toggleVisibility?.(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row._getAllVisibleCells = memo(\n      () => [row.getAllCells(), table.getState().columnVisibility],\n      cells => {\n        return cells.filter(cell => cell.column.getIsVisible())\n      },\n      getMemoOptions(table.options, 'debugRows', '_getAllVisibleCells')\n    )\n    row.getVisibleCells = memo(\n      () => [\n        row.getLeftVisibleCells(),\n        row.getCenterVisibleCells(),\n        row.getRightVisibleCells(),\n      ],\n      (left, center, right) => [...left, ...center, ...right],\n      getMemoOptions(table.options, 'debugRows', 'getVisibleCells')\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        getMemoOptions(table.options, 'debugColumns', key)\n      )\n    }\n\n    table.getVisibleFlatColumns = makeVisibleColumnsMethod(\n      'getVisibleFlatColumns',\n      () => table.getAllFlatColumns()\n    )\n    table.getVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getVisibleLeafColumns',\n      () => table.getAllLeafColumns()\n    )\n    table.getLeftVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getLeftVisibleLeafColumns',\n      () => table.getLeftLeafColumns()\n    )\n    table.getRightVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getRightVisibleLeafColumns',\n      () => table.getRightLeafColumns()\n    )\n    table.getCenterVisibleLeafColumns = makeVisibleColumnsMethod(\n      'getCenterVisibleLeafColumns',\n      () => table.getCenterLeafColumns()\n    )\n\n    table.setColumnVisibility = updater =>\n      table.options.onColumnVisibilityChange?.(updater)\n\n    table.resetColumnVisibility = defaultState => {\n      table.setColumnVisibility(\n        defaultState ? {} : table.initialState.columnVisibility ?? {}\n      )\n    }\n\n    table.toggleAllColumnsVisible = value => {\n      value = value ?? !table.getIsAllColumnsVisible()\n\n      table.setColumnVisibility(\n        table.getAllLeafColumns().reduce(\n          (obj, column) => ({\n            ...obj,\n            [column.id]: !value ? !column.getCanHide?.() : value,\n          }),\n          {}\n        )\n      )\n    }\n\n    table.getIsAllColumnsVisible = () =>\n      !table.getAllLeafColumns().some(column => !column.getIsVisible?.())\n\n    table.getIsSomeColumnsVisible = () =>\n      table.getAllLeafColumns().some(column => column.getIsVisible?.())\n\n    table.getToggleAllColumnsVisibilityHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllColumnsVisible(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n\nexport function _getVisibleLeafColumns<TData extends RowData>(\n  table: Table<TData>,\n  position?: ColumnPinningPosition | 'center'\n) {\n  return !position\n    ? table.getVisibleLeafColumns()\n    : position === 'center'\n      ? table.getCenterVisibleLeafColumns()\n      : position === 'left'\n        ? table.getLeftVisibleLeafColumns()\n        : table.getRightVisibleLeafColumns()\n}\n", "import { RowModel } from '..'\nimport { Table, RowData, TableFeature } from '../types'\n\nexport interface GlobalFacetingInstance<TData extends RowData> {\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  /**\n   * Currently, this function returns the built-in `includesString` filter function. In future releases, it may return more dynamic filter functions based on the nature of the data provided.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-faceting#getglobalautofilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-faceting)\n   */\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  /**\n   * Returns the row model for the table after **global** filtering has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-faceting#getglobalfacetedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-faceting)\n   */\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  /**\n   * Returns the faceted unique values for the global filter.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-faceting#getglobalfaceteduniquevalues)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-faceting)\n   */\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n}\n\n//\n\nexport const GlobalFaceting: TableFeature = {\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table._getGlobalFacetedRowModel =\n      table.options.getFacetedRowModel &&\n      table.options.getFacetedRowModel(table, '__global__')\n\n    table.getGlobalFacetedRowModel = () => {\n      if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n        return table.getPreFilteredRowModel()\n      }\n\n      return table._getGlobalFacetedRowModel()\n    }\n\n    table._getGlobalFacetedUniqueValues =\n      table.options.getFacetedUniqueValues &&\n      table.options.getFacetedUniqueValues(table, '__global__')\n    table.getGlobalFacetedUniqueValues = () => {\n      if (!table._getGlobalFacetedUniqueValues) {\n        return new Map()\n      }\n\n      return table._getGlobalFacetedUniqueValues()\n    }\n\n    table._getGlobalFacetedMinMaxValues =\n      table.options.getFacetedMinMaxValues &&\n      table.options.getFacetedMinMaxValues(table, '__global__')\n    table.getGlobalFacetedMinMaxValues = () => {\n      if (!table._getGlobalFacetedMinMaxValues) {\n        return\n      }\n\n      return table._getGlobalFacetedMinMaxValues()\n    }\n  },\n}\n", "import { FilterFn, FilterFnOption } from '..'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport interface GlobalFilterTableState {\n  globalFilter: any\n}\n\nexport interface GlobalFilterColumnDef {\n  /**\n   * Enables/disables the **global** filter for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#enableglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  enableGlobalFilter?: boolean\n}\n\nexport interface GlobalFilterColumn {\n  /**\n   * Returns whether or not the column can be **globally** filtered. Set to `false` to disable a column from being scanned during global filtering.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#getcanglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  getCanGlobalFilter: () => boolean\n}\n\nexport interface GlobalFilterOptions<TData extends RowData> {\n  /**\n   * Enables/disables **global** filtering for all columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#enableglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  enableGlobalFilter?: boolean\n  /**\n   * If provided, this function will be called with the column and should return `true` or `false` to indicate whether this column should be used for global filtering.\n   *\n   * This is useful if the column can contain data that is not `string` or `number` (i.e. `undefined`).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#getcolumncanglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n  /**\n   * The filter function to use for global filtering.\n   * - A `string` referencing a built-in filter function\n   * - A `string` that references a custom filter functions provided via the `tableOptions.filterFns` option\n   * - A custom filter function\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#globalfilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  globalFilterFn?: FilterFnOption<TData>\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.globalFilter` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#onglobalfilterchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  onGlobalFilterChange?: OnChangeFn<any>\n}\n\nexport interface GlobalFilterInstance<TData extends RowData> {\n  /**\n   * Currently, this function returns the built-in `includesString` filter function. In future releases, it may return more dynamic filter functions based on the nature of the data provided.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#getglobalautofilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  /**\n   * Returns the filter function (either user-defined or automatic, depending on configuration) for the global filter.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#getglobalfilterfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  /**\n   * Resets the **globalFilter** state to `initialState.globalFilter`, or `true` can be passed to force a default blank state reset to `undefined`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#resetglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  resetGlobalFilter: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.globalFilter` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/global-filtering#setglobalfilter)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/global-filtering)\n   */\n  setGlobalFilter: (updater: Updater<any>) => void\n}\n\n//\n\nexport const GlobalFiltering: TableFeature = {\n  getInitialState: (state): GlobalFilterTableState => {\n    return {\n      globalFilter: undefined,\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GlobalFilterOptions<TData> => {\n    return {\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as GlobalFilterOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): void => {\n    column.getCanGlobalFilter = () => {\n      return (\n        (column.columnDef.enableGlobalFilter ?? true) &&\n        (table.options.enableGlobalFilter ?? true) &&\n        (table.options.enableFilters ?? true) &&\n        (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n        !!column.accessorFn\n      )\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.getGlobalAutoFilterFn = () => {\n      return filterFns.includesString\n    }\n\n    table.getGlobalFilterFn = () => {\n      const { globalFilterFn: globalFilterFn } = table.options\n\n      return isFunction(globalFilterFn)\n        ? globalFilterFn\n        : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n    }\n\n    table.setGlobalFilter = updater => {\n      table.options.onGlobalFilterChange?.(updater)\n    }\n\n    table.resetGlobalFilter = defaultState => {\n      table.setGlobalFilter(\n        defaultState ? undefined : table.initialState.globalFilter\n      )\n    }\n  },\n}\n", "import { RowModel } from '..'\nimport {\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  /**\n   * Returns whether the row can be expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getcanexpand)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getCanExpand: () => boolean\n  /**\n   * Returns whether all parent rows of the row are expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getisallparentsexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsAllParentsExpanded: () => boolean\n  /**\n   * Returns whether the row is expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getisexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsExpanded: () => boolean\n  /**\n   * Returns a function that can be used to toggle the expanded state of the row. This function can be used to bind to an event handler to a button.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#gettoggleexpandedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getToggleExpandedHandler: () => () => void\n  /**\n   * Toggles the expanded state (or sets it if `expanded` is provided) for the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#toggleexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  toggleExpanded: (expanded?: boolean) => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  /**\n   * Enable this setting to automatically reset the expanded state of the table when expanding state changes.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#autoresetexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  autoResetExpanded?: boolean\n  /**\n   * Enable/disable expanding for all rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#enableexpanding)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  enableExpanding?: boolean\n  /**\n   * This function is responsible for returning the expanded row model. If this function is not provided, the table will not expand rows. You can use the default exported `getExpandedRowModel` function to get the expanded row model or implement your own.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getexpandedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * If provided, allows you to override the default behavior of determining whether a row is currently expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getisrowexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  /**\n   * If provided, allows you to override the default behavior of determining whether a row can be expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getrowcanexpand)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  /**\n   * Enables manual row expansion. If this is set to `true`, `getExpandedRowModel` will not be used to expand rows and you would be expected to perform the expansion in your own data model. This is useful if you are doing server-side expansion.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#manualexpanding)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  manualExpanding?: boolean\n  /**\n   * This function is called when the `expanded` table state changes. If a function is provided, you will be responsible for managing this state on your own. To pass the managed state back to the table, use the `tableOptions.state.expanded` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#onexpandedchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  /**\n   * If `true` expanded rows will be paginated along with the rest of the table (which means expanded rows may span multiple pages). If `false` expanded rows will not be considered for pagination (which means expanded rows will always render on their parents page. This also means more rows will be rendered than the set page size)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#paginateexpandedrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  _getExpandedRowModel?: () => RowModel<TData>\n  /**\n   * Returns whether there are any rows that can be expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getcansomerowsexpand)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getCanSomeRowsExpand: () => boolean\n  /**\n   * Returns the maximum depth of the expanded rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getexpandeddepth)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getExpandedDepth: () => number\n  /**\n   * Returns the row model after expansion has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getexpandedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getExpandedRowModel: () => RowModel<TData>\n  /**\n   * Returns whether all rows are currently expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getisallrowsexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsAllRowsExpanded: () => boolean\n  /**\n   * Returns whether there are any rows that are currently expanded.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getissomerowsexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getIsSomeRowsExpanded: () => boolean\n  /**\n   * Returns the row model before expansion has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#getpreexpandedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getPreExpandedRowModel: () => RowModel<TData>\n  /**\n   * Returns a handler that can be used to toggle the expanded state of all rows. This handler is meant to be used with an `input[type=checkbox]` element.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#gettoggleallrowsexpandedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  /**\n   * Resets the expanded state of the table to the initial state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#resetexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  resetExpanded: (defaultState?: boolean) => void\n  /**\n   * Updates the expanded state of the table via an update function or value.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#setexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  /**\n   * Toggles the expanded state for all rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/expanding#toggleallrowsexpanded)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/expanding)\n   */\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n}\n\n//\n\nexport const RowExpanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetExpanded = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetExpanded ??\n        !table.options.manualExpanding\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetExpanded()\n          queued = false\n        })\n      }\n    }\n    table.setExpanded = updater => table.options.onExpandedChange?.(updater)\n    table.toggleAllRowsExpanded = expanded => {\n      if (expanded ?? !table.getIsAllRowsExpanded()) {\n        table.setExpanded(true)\n      } else {\n        table.setExpanded({})\n      }\n    }\n    table.resetExpanded = defaultState => {\n      table.setExpanded(defaultState ? {} : table.initialState?.expanded ?? {})\n    }\n    table.getCanSomeRowsExpand = () => {\n      return table\n        .getPrePaginationRowModel()\n        .flatRows.some(row => row.getCanExpand())\n    }\n    table.getToggleAllRowsExpandedHandler = () => {\n      return (e: unknown) => {\n        ;(e as any).persist?.()\n        table.toggleAllRowsExpanded()\n      }\n    }\n    table.getIsSomeRowsExpanded = () => {\n      const expanded = table.getState().expanded\n      return expanded === true || Object.values(expanded).some(Boolean)\n    }\n    table.getIsAllRowsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      // If expanded is true, save some cycles and return true\n      if (typeof expanded === 'boolean') {\n        return expanded === true\n      }\n\n      if (!Object.keys(expanded).length) {\n        return false\n      }\n\n      // If any row is not expanded, return false\n      if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n        return false\n      }\n\n      // They must all be expanded :shrug:\n      return true\n    }\n    table.getExpandedDepth = () => {\n      let maxDepth = 0\n\n      const rowIds =\n        table.getState().expanded === true\n          ? Object.keys(table.getRowModel().rowsById)\n          : Object.keys(table.getState().expanded)\n\n      rowIds.forEach(id => {\n        const splitId = id.split('.')\n        maxDepth = Math.max(maxDepth, splitId.length)\n      })\n\n      return maxDepth\n    }\n    table.getPreExpandedRowModel = () => table.getSortedRowModel()\n    table.getExpandedRowModel = () => {\n      if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n        table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n      }\n\n      if (table.options.manualExpanding || !table._getExpandedRowModel) {\n        return table.getPreExpandedRowModel()\n      }\n\n      return table._getExpandedRowModel()\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleExpanded = expanded => {\n      table.setExpanded(old => {\n        const exists = old === true ? true : !!old?.[row.id]\n\n        let oldExpanded: ExpandedStateList = {}\n\n        if (old === true) {\n          Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n            oldExpanded[rowId] = true\n          })\n        } else {\n          oldExpanded = old\n        }\n\n        expanded = expanded ?? !exists\n\n        if (!exists && expanded) {\n          return {\n            ...oldExpanded,\n            [row.id]: true,\n          }\n        }\n\n        if (exists && !expanded) {\n          const { [row.id]: _, ...rest } = oldExpanded\n          return rest\n        }\n\n        return old\n      })\n    }\n    row.getIsExpanded = () => {\n      const expanded = table.getState().expanded\n\n      return !!(\n        table.options.getIsRowExpanded?.(row) ??\n        (expanded === true || expanded?.[row.id])\n      )\n    }\n    row.getCanExpand = () => {\n      return (\n        table.options.getRowCanExpand?.(row) ??\n        ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n      )\n    }\n    row.getIsAllParentsExpanded = () => {\n      let isFullyExpanded = true\n      let currentRow = row\n\n      while (isFullyExpanded && currentRow.parentId) {\n        currentRow = table.getRow(currentRow.parentId, true)\n        isFullyExpanded = currentRow.getIsExpanded()\n      }\n\n      return isFullyExpanded\n    }\n    row.getToggleExpandedHandler = () => {\n      const canExpand = row.getCanExpand()\n\n      return () => {\n        if (!canExpand) return\n        row.toggleExpanded()\n      }\n    }\n  },\n}\n", "import {\n  OnChangeFn,\n  Table,\n  RowModel,\n  Updater,\n  RowData,\n  TableFeature,\n} from '../types'\nimport {\n  functionalUpdate,\n  getMemoOptions,\n  makeStateUpdater,\n  memo,\n} from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  /**\n   * If set to `true`, pagination will be reset to the first page when page-altering state changes eg. `data` is updated, filters change, grouping changes, etc.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#autoresetpageindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  autoResetPageIndex?: boolean\n  /**\n   * Returns the row model after pagination has taken place, but no further.\n   *\n   * Pagination columns are automatically reordered by default to the start of the columns list. If you would rather remove them or leave them as-is, set the appropriate mode here.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getpaginationrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * Enables manual pagination. If this option is set to `true`, the table will not automatically paginate rows using `getPaginationRowModel()` and instead will expect you to manually paginate the rows before passing them to the table. This is useful if you are doing server-side pagination and aggregation.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#manualpagination)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  manualPagination?: boolean\n  /**\n   * If this function is provided, it will be called when the pagination state changes and you will be expected to manage the state yourself. You can pass the managed state back to the table via the `tableOptions.state.pagination` option.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#onpaginationchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  onPaginationChange?: OnChangeFn<PaginationState>\n  /**\n   * When manually controlling pagination, you can supply a total `pageCount` value to the table if you know it (Or supply a `rowCount` and `pageCount` will be calculated). If you do not know how many pages there are, you can set this to `-1`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#pagecount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  pageCount?: number\n  /**\n   * When manually controlling pagination, you can supply a total `rowCount` value to the table if you know it. The `pageCount` can be calculated from this value and the `pageSize`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#rowcount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  rowCount?: number\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  _getPaginationRowModel?: () => RowModel<TData>\n  /**\n   * Returns whether the table can go to the next page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getcannextpage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getCanNextPage: () => boolean\n  /**\n   * Returns whether the table can go to the previous page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getcanpreviouspage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getCanPreviousPage: () => boolean\n  /**\n   * Returns the page count. If manually paginating or controlling the pagination state, this will come directly from the `options.pageCount` table option, otherwise it will be calculated from the table data using the total row count and current page size.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getpagecount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPageCount: () => number\n  /**\n   * Returns the row count. If manually paginating or controlling the pagination state, this will come directly from the `options.rowCount` table option, otherwise it will be calculated from the table data.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getrowcount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getRowCount: () => number\n  /**\n   * Returns an array of page options (zero-index-based) for the current page size.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getpageoptions)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPageOptions: () => number[]\n  /**\n   * Returns the row model for the table after pagination has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getpaginationrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPaginationRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model for the table before any pagination has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#getprepaginationrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  getPrePaginationRowModel: () => RowModel<TData>\n  /**\n   * Increments the page index by one, if possible.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#nextpage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  nextPage: () => void\n  /**\n   * Decrements the page index by one, if possible.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#previouspage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  previousPage: () => void\n  /**\n   * Sets the page index to `0`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#firstpage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  firstPage: () => void\n  /**\n   * Sets the page index to the last page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#lastpage)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  lastPage: () => void\n  /**\n   * Resets the page index to its initial state. If `defaultState` is `true`, the page index will be reset to `0` regardless of initial state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#resetpageindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  resetPageIndex: (defaultState?: boolean) => void\n  /**\n   * Resets the page size to its initial state. If `defaultState` is `true`, the page size will be reset to `10` regardless of initial state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#resetpagesize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  resetPageSize: (defaultState?: boolean) => void\n  /**\n   * Resets the **pagination** state to `initialState.pagination`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#resetpagination)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  resetPagination: (defaultState?: boolean) => void\n  /**\n   * @deprecated The page count no longer exists in the pagination state. Just pass as a table option instead.\n   */\n  setPageCount: (updater: Updater<number>) => void\n  /**\n   * Updates the page index using the provided function or value in the `state.pagination.pageIndex` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#setpageindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  setPageIndex: (updater: Updater<number>) => void\n  /**\n   * Updates the page size using the provided function or value in the `state.pagination.pageSize` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#setpagesize)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  setPageSize: (updater: Updater<number>) => void\n  /**\n   * Sets or updates the `state.pagination` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pagination#setpagination)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pagination)\n   */\n  setPagination: (updater: Updater<PaginationState>) => void\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const RowPagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    let registered = false\n    let queued = false\n\n    table._autoResetPageIndex = () => {\n      if (!registered) {\n        table._queue(() => {\n          registered = true\n        })\n        return\n      }\n\n      if (\n        table.options.autoResetAll ??\n        table.options.autoResetPageIndex ??\n        !table.options.manualPagination\n      ) {\n        if (queued) return\n        queued = true\n        table._queue(() => {\n          table.resetPageIndex()\n          queued = false\n        })\n      }\n    }\n    table.setPagination = updater => {\n      const safeUpdater: Updater<PaginationState> = old => {\n        let newState = functionalUpdate(updater, old)\n\n        return newState\n      }\n\n      return table.options.onPaginationChange?.(safeUpdater)\n    }\n    table.resetPagination = defaultState => {\n      table.setPagination(\n        defaultState\n          ? getDefaultPaginationState()\n          : table.initialState.pagination ?? getDefaultPaginationState()\n      )\n    }\n    table.setPageIndex = updater => {\n      table.setPagination(old => {\n        let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n        const maxPageIndex =\n          typeof table.options.pageCount === 'undefined' ||\n          table.options.pageCount === -1\n            ? Number.MAX_SAFE_INTEGER\n            : table.options.pageCount - 1\n\n        pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n        return {\n          ...old,\n          pageIndex,\n        }\n      })\n    }\n    table.resetPageIndex = defaultState => {\n      table.setPageIndex(\n        defaultState\n          ? defaultPageIndex\n          : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n      )\n    }\n    table.resetPageSize = defaultState => {\n      table.setPageSize(\n        defaultState\n          ? defaultPageSize\n          : table.initialState?.pagination?.pageSize ?? defaultPageSize\n      )\n    }\n    table.setPageSize = updater => {\n      table.setPagination(old => {\n        const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n        const topRowIndex = old.pageSize * old.pageIndex!\n        const pageIndex = Math.floor(topRowIndex / pageSize)\n\n        return {\n          ...old,\n          pageIndex,\n          pageSize,\n        }\n      })\n    }\n    //deprecated\n    table.setPageCount = updater =>\n      table.setPagination(old => {\n        let newPageCount = functionalUpdate(\n          updater,\n          table.options.pageCount ?? -1\n        )\n\n        if (typeof newPageCount === 'number') {\n          newPageCount = Math.max(-1, newPageCount)\n        }\n\n        return {\n          ...old,\n          pageCount: newPageCount,\n        }\n      })\n\n    table.getPageOptions = memo(\n      () => [table.getPageCount()],\n      pageCount => {\n        let pageOptions: number[] = []\n        if (pageCount && pageCount > 0) {\n          pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n        }\n        return pageOptions\n      },\n      getMemoOptions(table.options, 'debugTable', 'getPageOptions')\n    )\n\n    table.getCanPreviousPage = () => table.getState().pagination.pageIndex > 0\n\n    table.getCanNextPage = () => {\n      const { pageIndex } = table.getState().pagination\n\n      const pageCount = table.getPageCount()\n\n      if (pageCount === -1) {\n        return true\n      }\n\n      if (pageCount === 0) {\n        return false\n      }\n\n      return pageIndex < pageCount - 1\n    }\n\n    table.previousPage = () => {\n      return table.setPageIndex(old => old - 1)\n    }\n\n    table.nextPage = () => {\n      return table.setPageIndex(old => {\n        return old + 1\n      })\n    }\n\n    table.firstPage = () => {\n      return table.setPageIndex(0)\n    }\n\n    table.lastPage = () => {\n      return table.setPageIndex(table.getPageCount() - 1)\n    }\n\n    table.getPrePaginationRowModel = () => table.getExpandedRowModel()\n    table.getPaginationRowModel = () => {\n      if (\n        !table._getPaginationRowModel &&\n        table.options.getPaginationRowModel\n      ) {\n        table._getPaginationRowModel =\n          table.options.getPaginationRowModel(table)\n      }\n\n      if (table.options.manualPagination || !table._getPaginationRowModel) {\n        return table.getPrePaginationRowModel()\n      }\n\n      return table._getPaginationRowModel()\n    }\n\n    table.getPageCount = () => {\n      return (\n        table.options.pageCount ??\n        Math.ceil(table.getRowCount() / table.getState().pagination.pageSize)\n      )\n    }\n\n    table.getRowCount = () => {\n      return (\n        table.options.rowCount ?? table.getPrePaginationRowModel().rows.length\n      )\n    }\n  },\n}\n", "import {\n  OnChangeFn,\n  Updater,\n  Table,\n  Row,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type RowPinningPosition = false | 'top' | 'bottom'\n\nexport interface RowPinningState {\n  bottom?: string[]\n  top?: string[]\n}\n\nexport interface RowPinningTableState {\n  rowPinning: RowPinningState\n}\n\nexport interface RowPinningOptions<TData extends RowData> {\n  /**\n   * Enables/disables row pinning for the table. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#enablerowpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  enableRowPinning?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * When `false`, pinned rows will not be visible if they are filtered or paginated out of the table. When `true`, pinned rows will always be visible regardless of filtering or pagination. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#keeppinnedrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  keepPinnedRows?: boolean\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.rowPinning` changes. This overrides the default internal state management, so you will also need to supply `state.rowPinning` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#onrowpinningchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/onrowpinningchange)\n   */\n  onRowPinningChange?: OnChangeFn<RowPinningState>\n}\n\nexport interface RowPinningDefaultOptions {\n  onRowPinningChange: OnChangeFn<RowPinningState>\n}\n\nexport interface RowPinningRow {\n  /**\n   * Returns whether or not the row can be pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getcanpin-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getCanPin: () => boolean\n  /**\n   * Returns the pinned position of the row. (`'top'`, `'bottom'` or `false`)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getispinned-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getIsPinned: () => RowPinningPosition\n  /**\n   * Returns the numeric pinned index of the row within a pinned row group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getpinnedindex-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getPinnedIndex: () => number\n  /**\n   * Pins a row to the `'top'` or `'bottom'`, or unpins the row to the center if `false` is passed.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#pin-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  pin: (\n    position: RowPinningPosition,\n    includeLeafRows?: boolean,\n    includeParentRows?: boolean\n  ) => void\n}\n\nexport interface RowPinningInstance<TData extends RowData> {\n  _getPinnedRows: (\n    visiblePinnedRows: Array<Row<TData>>,\n    pinnedRowIds: Array<string> | undefined,\n    position: 'top' | 'bottom'\n  ) => Row<TData>[]\n  /**\n   * Returns all bottom pinned rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getbottomrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getBottomRows: () => Row<TData>[]\n  /**\n   * Returns all rows that are not pinned to the top or bottom.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getcenterrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getCenterRows: () => Row<TData>[]\n  /**\n   * Returns whether or not any rows are pinned. Optionally specify to only check for pinned rows in either the `top` or `bottom` position.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#getissomerowspinned)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getIsSomeRowsPinned: (position?: RowPinningPosition) => boolean\n  /**\n   * Returns all top pinned rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#gettoprows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  getTopRows: () => Row<TData>[]\n  /**\n   * Resets the **rowPinning** state to `initialState.rowPinning`, or `true` can be passed to force a default blank state reset to `{ top: [], bottom: [], }`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#resetrowpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  resetRowPinning: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.rowPinning` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-pinning#setrowpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-pinning)\n   */\n  setRowPinning: (updater: Updater<RowPinningState>) => void\n}\n\n//\n\nconst getDefaultRowPinningState = (): RowPinningState => ({\n  top: [],\n  bottom: [],\n})\n\nexport const RowPinning: TableFeature = {\n  getInitialState: (state): RowPinningTableState => {\n    return {\n      rowPinning: getDefaultRowPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowPinningDefaultOptions => {\n    return {\n      onRowPinningChange: makeStateUpdater('rowPinning', table),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.pin = (position, includeLeafRows, includeParentRows) => {\n      const leafRowIds = includeLeafRows\n        ? row.getLeafRows().map(({ id }) => id)\n        : []\n      const parentRowIds = includeParentRows\n        ? row.getParentRows().map(({ id }) => id)\n        : []\n      const rowIds = new Set([...parentRowIds, row.id, ...leafRowIds])\n\n      table.setRowPinning(old => {\n        if (position === 'bottom') {\n          return {\n            top: (old?.top ?? []).filter(d => !rowIds?.has(d)),\n            bottom: [\n              ...(old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n              ...Array.from(rowIds),\n            ],\n          }\n        }\n\n        if (position === 'top') {\n          return {\n            top: [\n              ...(old?.top ?? []).filter(d => !rowIds?.has(d)),\n              ...Array.from(rowIds),\n            ],\n            bottom: (old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n          }\n        }\n\n        return {\n          top: (old?.top ?? []).filter(d => !rowIds?.has(d)),\n          bottom: (old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n        }\n      })\n    }\n    row.getCanPin = () => {\n      const { enableRowPinning, enablePinning } = table.options\n      if (typeof enableRowPinning === 'function') {\n        return enableRowPinning(row)\n      }\n      return enableRowPinning ?? enablePinning ?? true\n    }\n    row.getIsPinned = () => {\n      const rowIds = [row.id]\n\n      const { top, bottom } = table.getState().rowPinning\n\n      const isTop = rowIds.some(d => top?.includes(d))\n      const isBottom = rowIds.some(d => bottom?.includes(d))\n\n      return isTop ? 'top' : isBottom ? 'bottom' : false\n    }\n    row.getPinnedIndex = () => {\n      const position = row.getIsPinned()\n      if (!position) return -1\n\n      const visiblePinnedRowIds = (\n        position === 'top' ? table.getTopRows() : table.getBottomRows()\n      )?.map(({ id }) => id)\n\n      return visiblePinnedRowIds?.indexOf(row.id) ?? -1\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setRowPinning = updater => table.options.onRowPinningChange?.(updater)\n\n    table.resetRowPinning = defaultState =>\n      table.setRowPinning(\n        defaultState\n          ? getDefaultRowPinningState()\n          : table.initialState?.rowPinning ?? getDefaultRowPinningState()\n      )\n\n    table.getIsSomeRowsPinned = position => {\n      const pinningState = table.getState().rowPinning\n\n      if (!position) {\n        return Boolean(pinningState.top?.length || pinningState.bottom?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table._getPinnedRows = (visibleRows, pinnedRowIds, position) => {\n      const rows =\n        table.options.keepPinnedRows ?? true\n          ? //get all rows that are pinned even if they would not be otherwise visible\n            //account for expanded parent rows, but not pagination or filtering\n            (pinnedRowIds ?? []).map(rowId => {\n              const row = table.getRow(rowId, true)\n              return row.getIsAllParentsExpanded() ? row : null\n            })\n          : //else get only visible rows that are pinned\n            (pinnedRowIds ?? []).map(\n              rowId => visibleRows.find(row => row.id === rowId)!\n            )\n\n      return rows.filter(Boolean).map(d => ({ ...d, position })) as Row<TData>[]\n    }\n\n    table.getTopRows = memo(\n      () => [table.getRowModel().rows, table.getState().rowPinning.top],\n      (allRows, topPinnedRowIds) =>\n        table._getPinnedRows(allRows, topPinnedRowIds, 'top'),\n      getMemoOptions(table.options, 'debugRows', 'getTopRows')\n    )\n\n    table.getBottomRows = memo(\n      () => [table.getRowModel().rows, table.getState().rowPinning.bottom],\n      (allRows, bottomPinnedRowIds) =>\n        table._getPinnedRows(allRows, bottomPinnedRowIds, 'bottom'),\n      getMemoOptions(table.options, 'debugRows', 'getBottomRows')\n    )\n\n    table.getCenterRows = memo(\n      () => [\n        table.getRowModel().rows,\n        table.getState().rowPinning.top,\n        table.getState().rowPinning.bottom,\n      ],\n      (allRows, top, bottom) => {\n        const topAndBottom = new Set([...(top ?? []), ...(bottom ?? [])])\n        return allRows.filter(d => !topAndBottom.has(d.id))\n      },\n      getMemoOptions(table.options, 'debugRows', 'getCenterRows')\n    )\n  },\n}\n", "import {\n  OnChangeFn,\n  Table,\n  Row,\n  RowModel,\n  Updater,\n  RowData,\n  TableFeature,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  /**\n   * - Enables/disables multiple row selection for all rows in the table OR\n   * - A function that given a row, returns whether to enable/disable multiple row selection for that row's children/grandchildren\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#enablemultirowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * - Enables/disables row selection for all rows in the table OR\n   * - A function that given a row, returns whether to enable/disable row selection for that row\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#enablerowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * Enables/disables automatic sub-row selection when a parent row is selected, or a function that enables/disables automatic sub-row selection for each row.\n   * (Use in combination with expanding or grouping features)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#enablesubrowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.rowSelection` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#onrowselectionchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  /**\n   * Returns whether or not the row can multi-select.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getcanmultiselect)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getCanMultiSelect: () => boolean\n  /**\n   * Returns whether or not the row can be selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getcanselect)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getCanSelect: () => boolean\n  /**\n   * Returns whether or not the row can select sub rows automatically when the parent row is selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getcanselectsubrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getCanSelectSubRows: () => boolean\n  /**\n   * Returns whether or not all of the row's sub rows are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getisallsubrowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsAllSubRowsSelected: () => boolean\n  /**\n   * Returns whether or not the row is selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getisselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsSelected: () => boolean\n  /**\n   * Returns whether or not some of the row's sub rows are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getissomeselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsSomeSelected: () => boolean\n  /**\n   * Returns a handler that can be used to toggle the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#gettoggleselectedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getToggleSelectedHandler: () => (event: unknown) => void\n  /**\n   * Selects/deselects the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#toggleselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  toggleSelected: (value?: boolean, opts?: { selectChildren?: boolean }) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  /**\n   * Returns the row model of all rows that are selected after filtering has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getfilteredselectedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model of all rows that are selected after grouping has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getgroupedselectedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getGroupedSelectedRowModel: () => RowModel<TData>\n  /**\n   * Returns whether or not all rows on the current page are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getisallpagerowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsAllPageRowsSelected: () => boolean\n  /**\n   * Returns whether or not all rows in the table are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getisallrowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsAllRowsSelected: () => boolean\n  /**\n   * Returns whether or not any rows on the current page are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getissomepagerowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsSomePageRowsSelected: () => boolean\n  /**\n   * Returns whether or not any rows in the table are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getissomerowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getIsSomeRowsSelected: () => boolean\n  /**\n   * Returns the core row model of all rows before row selection has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getpreselectedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getPreSelectedRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model of all rows that are selected.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#getselectedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getSelectedRowModel: () => RowModel<TData>\n  /**\n   * Returns a handler that can be used to toggle all rows on the current page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#gettoggleallpagerowsselectedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  /**\n   * Returns a handler that can be used to toggle all rows in the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#gettoggleallrowsselectedhandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  /**\n   * Resets the **rowSelection** state to the `initialState.rowSelection`, or `true` can be passed to force a default blank state reset to `{}`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#resetrowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  resetRowSelection: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.rowSelection` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#setrowselection)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  /**\n   * Selects/deselects all rows on the current page.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#toggleallpagerowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  /**\n   * Selects/deselects all rows in the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/row-selection#toggleallrowsselected)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/row-selection)\n   */\n  toggleAllRowsSelected: (value?: boolean) => void\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setRowSelection = updater =>\n      table.options.onRowSelectionChange?.(updater)\n    table.resetRowSelection = defaultState =>\n      table.setRowSelection(\n        defaultState ? {} : table.initialState.rowSelection ?? {}\n      )\n    table.toggleAllRowsSelected = value => {\n      table.setRowSelection(old => {\n        value =\n          typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n        const rowSelection = { ...old }\n\n        const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n        // We don't use `mutateRowIsSelected` here for performance reasons.\n        // All of the rows are flat already, so it wouldn't be worth it\n        if (value) {\n          preGroupedFlatRows.forEach(row => {\n            if (!row.getCanSelect()) {\n              return\n            }\n            rowSelection[row.id] = true\n          })\n        } else {\n          preGroupedFlatRows.forEach(row => {\n            delete rowSelection[row.id]\n          })\n        }\n\n        return rowSelection\n      })\n    }\n    table.toggleAllPageRowsSelected = value =>\n      table.setRowSelection(old => {\n        const resolvedValue =\n          typeof value !== 'undefined'\n            ? value\n            : !table.getIsAllPageRowsSelected()\n\n        const rowSelection: RowSelectionState = { ...old }\n\n        table.getRowModel().rows.forEach(row => {\n          mutateRowIsSelected(rowSelection, row.id, resolvedValue, true, table)\n        })\n\n        return rowSelection\n      })\n\n    // addRowSelectionRange: rowId => {\n    //   const {\n    //     rows,\n    //     rowsById,\n    //     options: { selectGroupingRows, selectSubRows },\n    //   } = table\n\n    //   const findSelectedRow = (rows: Row[]) => {\n    //     let found\n    //     rows.find(d => {\n    //       if (d.getIsSelected()) {\n    //         found = d\n    //         return true\n    //       }\n    //       const subFound = findSelectedRow(d.subRows || [])\n    //       if (subFound) {\n    //         found = subFound\n    //         return true\n    //       }\n    //       return false\n    //     })\n    //     return found\n    //   }\n\n    //   const firstRow = findSelectedRow(rows) || rows[0]\n    //   const lastRow = rowsById[rowId]\n\n    //   let include = false\n    //   const selectedRowIds = {}\n\n    //   const addRow = (row: Row) => {\n    //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n    //       rowsById,\n    //       selectGroupingRows: selectGroupingRows!,\n    //       selectSubRows: selectSubRows!,\n    //     })\n    //   }\n\n    //   table.rows.forEach(row => {\n    //     const isFirstRow = row.id === firstRow.id\n    //     const isLastRow = row.id === lastRow.id\n\n    //     if (isFirstRow || isLastRow) {\n    //       if (!include) {\n    //         include = true\n    //       } else if (include) {\n    //         addRow(row)\n    //         include = false\n    //       }\n    //     }\n\n    //     if (include) {\n    //       addRow(row)\n    //     }\n    //   })\n\n    //   table.setRowSelection(selectedRowIds)\n    // },\n    table.getPreSelectedRowModel = () => table.getCoreRowModel()\n    table.getSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getCoreRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getSelectedRowModel')\n    )\n\n    table.getFilteredSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getFilteredRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getFilteredSelectedRowModel')\n    )\n\n    table.getGroupedSelectedRowModel = memo(\n      () => [table.getState().rowSelection, table.getSortedRowModel()],\n      (rowSelection, rowModel) => {\n        if (!Object.keys(rowSelection).length) {\n          return {\n            rows: [],\n            flatRows: [],\n            rowsById: {},\n          }\n        }\n\n        return selectRowsFn(table, rowModel)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getGroupedSelectedRowModel')\n    )\n\n    ///\n\n    // getGroupingRowCanSelect: rowId => {\n    //   const row = table.getRow(rowId)\n\n    //   if (!row) {\n    //     throw new Error()\n    //   }\n\n    //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n    //     return table.options.enableGroupingRowSelection(row)\n    //   }\n\n    //   return table.options.enableGroupingRowSelection ?? false\n    // },\n\n    table.getIsAllRowsSelected = () => {\n      const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n      const { rowSelection } = table.getState()\n\n      let isAllRowsSelected = Boolean(\n        preGroupedFlatRows.length && Object.keys(rowSelection).length\n      )\n\n      if (isAllRowsSelected) {\n        if (\n          preGroupedFlatRows.some(\n            row => row.getCanSelect() && !rowSelection[row.id]\n          )\n        ) {\n          isAllRowsSelected = false\n        }\n      }\n\n      return isAllRowsSelected\n    }\n\n    table.getIsAllPageRowsSelected = () => {\n      const paginationFlatRows = table\n        .getPaginationRowModel()\n        .flatRows.filter(row => row.getCanSelect())\n      const { rowSelection } = table.getState()\n\n      let isAllPageRowsSelected = !!paginationFlatRows.length\n\n      if (\n        isAllPageRowsSelected &&\n        paginationFlatRows.some(row => !rowSelection[row.id])\n      ) {\n        isAllPageRowsSelected = false\n      }\n\n      return isAllPageRowsSelected\n    }\n\n    table.getIsSomeRowsSelected = () => {\n      const totalSelected = Object.keys(\n        table.getState().rowSelection ?? {}\n      ).length\n      return (\n        totalSelected > 0 &&\n        totalSelected < table.getFilteredRowModel().flatRows.length\n      )\n    }\n\n    table.getIsSomePageRowsSelected = () => {\n      const paginationFlatRows = table.getPaginationRowModel().flatRows\n      return table.getIsAllPageRowsSelected()\n        ? false\n        : paginationFlatRows\n            .filter(row => row.getCanSelect())\n            .some(d => d.getIsSelected() || d.getIsSomeSelected())\n    }\n\n    table.getToggleAllRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n\n    table.getToggleAllPageRowsSelectedHandler = () => {\n      return (e: unknown) => {\n        table.toggleAllPageRowsSelected(\n          ((e as MouseEvent).target as HTMLInputElement).checked\n        )\n      }\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.toggleSelected = (value, opts) => {\n      const isSelected = row.getIsSelected()\n\n      table.setRowSelection(old => {\n        value = typeof value !== 'undefined' ? value : !isSelected\n\n        if (row.getCanSelect() && isSelected === value) {\n          return old\n        }\n\n        const selectedRowIds = { ...old }\n\n        mutateRowIsSelected(\n          selectedRowIds,\n          row.id,\n          value,\n          opts?.selectChildren ?? true,\n          table\n        )\n\n        return selectedRowIds\n      })\n    }\n    row.getIsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isRowSelected(row, rowSelection)\n    }\n\n    row.getIsSomeSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'some'\n    }\n\n    row.getIsAllSubRowsSelected = () => {\n      const { rowSelection } = table.getState()\n      return isSubRowSelected(row, rowSelection, table) === 'all'\n    }\n\n    row.getCanSelect = () => {\n      if (typeof table.options.enableRowSelection === 'function') {\n        return table.options.enableRowSelection(row)\n      }\n\n      return table.options.enableRowSelection ?? true\n    }\n\n    row.getCanSelectSubRows = () => {\n      if (typeof table.options.enableSubRowSelection === 'function') {\n        return table.options.enableSubRowSelection(row)\n      }\n\n      return table.options.enableSubRowSelection ?? true\n    }\n\n    row.getCanMultiSelect = () => {\n      if (typeof table.options.enableMultiRowSelection === 'function') {\n        return table.options.enableMultiRowSelection(row)\n      }\n\n      return table.options.enableMultiRowSelection ?? true\n    }\n    row.getToggleSelectedHandler = () => {\n      const canSelect = row.getCanSelect()\n\n      return (e: unknown) => {\n        if (!canSelect) return\n        row.toggleSelected(\n          ((e as MouseEvent).target as HTMLInputElement)?.checked\n        )\n      }\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  includeChildren: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id, true)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (includeChildren && row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, includeChildren, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (!row.subRows?.length) return false\n\n  let allChildrenSelected = true\n  let someSelected = false\n\n  row.subRows.forEach(subRow => {\n    // Bail out early if we know both of these\n    if (someSelected && !allChildrenSelected) {\n      return\n    }\n\n    if (subRow.getCanSelect()) {\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    }\n\n    // Check row selection of nested subrows\n    if (subRow.subRows && subRow.subRows.length) {\n      const subRowChildrenSelected = isSubRowSelected(subRow, selection, table)\n      if (subRowChildrenSelected === 'all') {\n        someSelected = true\n      } else if (subRowChildrenSelected === 'some') {\n        someSelected = true\n        allChildrenSelected = false\n      } else {\n        allChildrenSelected = false\n      }\n    }\n  })\n\n  return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n}\n", "import { SortingFn } from './features/RowSorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n", "import { RowModel } from '..'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n  TableFeature,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  desc: boolean\n  id: string\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  /**\n   * Enables/Disables multi-sorting for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablemultisort)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableMultiSort?: boolean\n  /**\n   * Enables/Disables sorting for this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablesorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableSorting?: boolean\n  /**\n   * Inverts the order of the sorting for this column. This is useful for values that have an inverted best/worst scale where lower numbers are better, eg. a ranking (1st, 2nd, 3rd) or golf-like scoring\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#invertsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  invertSorting?: boolean\n  /**\n   * Set to `true` for sorting toggles on this column to start in the descending direction.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#sortdescfirst)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  sortDescFirst?: boolean\n  /**\n   * The sorting function to use with this column.\n   * - A `string` referencing a built-in sorting function\n   * - A custom sorting function\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#sortingfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  sortingFn?: SortingFnOption<TData>\n  /**\n   * The priority of undefined values when sorting this column.\n   * - `false`\n   *   - Undefined values will be considered tied and need to be sorted by the next column filter or original index (whichever applies)\n   * - `-1`\n   *   - Undefined values will be sorted with higher priority (ascending) (if ascending, undefined will appear on the beginning of the list)\n   * - `1`\n   *   - Undefined values will be sorted with lower priority (descending) (if ascending, undefined will appear on the end of the list)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#sortundefined)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  sortUndefined?: false | -1 | 1 | 'first' | 'last'\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  /**\n   * Removes this column from the table's sorting state\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#clearsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  clearSorting: () => void\n  /**\n   * Returns a sort direction automatically inferred based on the columns values.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getautosortdir)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getAutoSortDir: () => SortDirection\n  /**\n   * Returns a sorting function automatically inferred based on the columns values.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getautosortingfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getAutoSortingFn: () => SortingFn<TData>\n  /**\n   * Returns whether this column can be multi-sorted.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getcanmultisort)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getCanMultiSort: () => boolean\n  /**\n   * Returns whether this column can be sorted.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getcansort)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getCanSort: () => boolean\n  /**\n   * Returns the first direction that should be used when sorting this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getfirstsortdir)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getFirstSortDir: () => SortDirection\n  /**\n   * Returns the current sort direction of this column.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getissorted)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getIsSorted: () => false | SortDirection\n  /**\n   * Returns the next sorting order.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getnextsortingorder)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getNextSortingOrder: () => SortDirection | false\n  /**\n   * Returns the index position of this column's sorting within the sorting state\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getsortindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getSortIndex: () => number\n  /**\n   * Returns the resolved sorting function to be used for this column\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getsortingfn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getSortingFn: () => SortingFn<TData>\n  /**\n   * Returns a function that can be used to toggle this column's sorting state. This is useful for attaching a click handler to the column header.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#gettogglesortinghandler)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n  /**\n   * Toggles this columns sorting state. If `desc` is provided, it will force the sort direction to that value. If `isMulti` is provided, it will additivity multi-sort the column (or toggle it if it is already sorted).\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#togglesorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n}\n\ninterface SortingOptionsBase {\n  /**\n   * Enables/disables the ability to remove multi-sorts\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablemultiremove)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableMultiRemove?: boolean\n  /**\n   * Enables/Disables multi-sorting for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablemultisort)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableMultiSort?: boolean\n  /**\n   * Enables/Disables sorting for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablesorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableSorting?: boolean\n  /**\n   * Enables/Disables the ability to remove sorting for the table.\n   * - If `true` then changing sort order will circle like: 'none' -> 'desc' -> 'asc' -> 'none' -> ...\n   * - If `false` then changing sort order will circle like: 'none' -> 'desc' -> 'asc' -> 'desc' -> 'asc' -> ...\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#enablesortingremoval)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  enableSortingRemoval?: boolean\n  /**\n   * This function is used to retrieve the sorted row model. If using server-side sorting, this function is not required. To use client-side sorting, pass the exported `getSortedRowModel()` from your adapter to your table or implement your own.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getsortedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  /**\n   * Pass a custom function that will be used to determine if a multi-sort event should be triggered. It is passed the event from the sort toggle handler and should return `true` if the event should trigger a multi-sort.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#ismultisortevent)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  isMultiSortEvent?: (e: unknown) => boolean\n  /**\n   * Enables manual sorting for the table. If this is `true`, you will be expected to sort your data before it is passed to the table. This is useful if you are doing server-side sorting.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#manualsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  manualSorting?: boolean\n  /**\n   * Set a maximum number of columns that can be multi-sorted.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#maxmultisortcolcount)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  maxMultiSortColCount?: number\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.sorting` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#onsortingchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  onSortingChange?: OnChangeFn<SortingState>\n  /**\n   * If `true`, all sorts will default to descending as their first toggle state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#sortdescfirst)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  sortDescFirst?: boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  _getSortedRowModel?: () => RowModel<TData>\n  /**\n   * Returns the row model for the table before any sorting has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getpresortedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getPreSortedRowModel: () => RowModel<TData>\n  /**\n   * Returns the row model for the table after sorting has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#getsortedrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  getSortedRowModel: () => RowModel<TData>\n  /**\n   * Resets the **sorting** state to `initialState.sorting`, or `true` can be passed to force a default blank state reset to `[]`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#resetsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  resetSorting: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.sorting` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/sorting#setsorting)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/sorting)\n   */\n  setSorting: (updater: Updater<SortingState>) => void\n}\n\n//\n\nexport const RowSorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.getAutoSortingFn = () => {\n      const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n      let isString = false\n\n      for (const row of firstRows) {\n        const value = row?.getValue(column.id)\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return sortingFns.datetime\n        }\n\n        if (typeof value === 'string') {\n          isString = true\n\n          if (value.split(reSplitAlphaNumeric).length > 1) {\n            return sortingFns.alphanumeric\n          }\n        }\n      }\n\n      if (isString) {\n        return sortingFns.text\n      }\n\n      return sortingFns.basic\n    }\n    column.getAutoSortDir = () => {\n      const firstRow = table.getFilteredRowModel().flatRows[0]\n\n      const value = firstRow?.getValue(column.id)\n\n      if (typeof value === 'string') {\n        return 'asc'\n      }\n\n      return 'desc'\n    }\n    column.getSortingFn = () => {\n      if (!column) {\n        throw new Error()\n      }\n\n      return isFunction(column.columnDef.sortingFn)\n        ? column.columnDef.sortingFn\n        : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n    }\n    column.toggleSorting = (desc, multi) => {\n      // if (column.columns.length) {\n      //   column.columns.forEach((c, i) => {\n      //     if (c.id) {\n      //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n      //     }\n      //   })\n      //   return\n      // }\n\n      // this needs to be outside of table.setSorting to be in sync with rerender\n      const nextSortingOrder = column.getNextSortingOrder()\n      const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n      table.setSorting(old => {\n        // Find any existing sorting for this column\n        const existingSorting = old?.find(d => d.id === column.id)\n        const existingIndex = old?.findIndex(d => d.id === column.id)\n\n        let newSorting: SortingState = []\n\n        // What should we do with this sort action?\n        let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n        let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n        // Multi-mode\n        if (old?.length && column.getCanMultiSort() && multi) {\n          if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'add'\n          }\n        } else {\n          // Normal mode\n          if (old?.length && existingIndex !== old.length - 1) {\n            sortAction = 'replace'\n          } else if (existingSorting) {\n            sortAction = 'toggle'\n          } else {\n            sortAction = 'replace'\n          }\n        }\n\n        // Handle toggle states that will remove the sorting\n        if (sortAction === 'toggle') {\n          // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n          if (!hasManualValue) {\n            // Is our intention to remove?\n            if (!nextSortingOrder) {\n              sortAction = 'remove'\n            }\n          }\n        }\n\n        if (sortAction === 'add') {\n          newSorting = [\n            ...old,\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n          // Take latest n columns\n          newSorting.splice(\n            0,\n            newSorting.length -\n              (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n          )\n        } else if (sortAction === 'toggle') {\n          // This flips (or sets) the\n          newSorting = old.map(d => {\n            if (d.id === column.id) {\n              return {\n                ...d,\n                desc: nextDesc,\n              }\n            }\n            return d\n          })\n        } else if (sortAction === 'remove') {\n          newSorting = old.filter(d => d.id !== column.id)\n        } else {\n          newSorting = [\n            {\n              id: column.id,\n              desc: nextDesc,\n            },\n          ]\n        }\n\n        return newSorting\n      })\n    }\n\n    column.getFirstSortDir = () => {\n      const sortDescFirst =\n        column.columnDef.sortDescFirst ??\n        table.options.sortDescFirst ??\n        column.getAutoSortDir() === 'desc'\n      return sortDescFirst ? 'desc' : 'asc'\n    }\n\n    column.getNextSortingOrder = (multi?: boolean) => {\n      const firstSortDirection = column.getFirstSortDir()\n      const isSorted = column.getIsSorted()\n\n      if (!isSorted) {\n        return firstSortDirection\n      }\n\n      if (\n        isSorted !== firstSortDirection &&\n        (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n        (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n      ) {\n        return false\n      }\n      return isSorted === 'desc' ? 'asc' : 'desc'\n    }\n\n    column.getCanSort = () => {\n      return (\n        (column.columnDef.enableSorting ?? true) &&\n        (table.options.enableSorting ?? true) &&\n        !!column.accessorFn\n      )\n    }\n\n    column.getCanMultiSort = () => {\n      return (\n        column.columnDef.enableMultiSort ??\n        table.options.enableMultiSort ??\n        !!column.accessorFn\n      )\n    }\n\n    column.getIsSorted = () => {\n      const columnSort = table.getState().sorting?.find(d => d.id === column.id)\n\n      return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n    }\n\n    column.getSortIndex = () =>\n      table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1\n\n    column.clearSorting = () => {\n      //clear sorting for just 1 column\n      table.setSorting(old =>\n        old?.length ? old.filter(d => d.id !== column.id) : []\n      )\n    }\n\n    column.getToggleSortingHandler = () => {\n      const canSort = column.getCanSort()\n\n      return (e: unknown) => {\n        if (!canSort) return\n        ;(e as any).persist?.()\n        column.toggleSorting?.(\n          undefined,\n          column.getCanMultiSort() ? table.options.isMultiSortEvent?.(e) : false\n        )\n      }\n    }\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setSorting = updater => table.options.onSortingChange?.(updater)\n    table.resetSorting = defaultState => {\n      table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n    }\n    table.getPreSortedRowModel = () => table.getGroupedRowModel()\n    table.getSortedRowModel = () => {\n      if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n        table._getSortedRowModel = table.options.getSortedRowModel(table)\n      }\n\n      if (table.options.manualSorting || !table._getSortedRowModel) {\n        return table.getPreSortedRowModel()\n      }\n\n      return table._getSortedRowModel()\n    }\n  },\n}\n", "import { functionalUpdate, getMemoOptions, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n  TableFeature,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnFaceting } from '../features/ColumnFaceting'\nimport { ColumnFiltering } from '../features/ColumnFiltering'\nimport { ColumnGrouping } from '../features/ColumnGrouping'\nimport { ColumnOrdering } from '../features/ColumnOrdering'\nimport { ColumnPinning } from '../features/ColumnPinning'\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { ColumnVisibility } from '../features/ColumnVisibility'\nimport { GlobalFaceting } from '../features/GlobalFaceting'\nimport { GlobalFiltering } from '../features/GlobalFiltering'\nimport { RowExpanding } from '../features/RowExpanding'\nimport { RowPagination } from '../features/RowPagination'\nimport { RowPinning } from '../features/RowPinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { RowSorting } from '../features/RowSorting'\n\nconst builtInFeatures = [\n  Headers,\n  ColumnVisibility,\n  ColumnOrdering,\n  ColumnPinning,\n  ColumnFaceting,\n  ColumnFiltering,\n  GlobalFaceting, //depends on ColumnFaceting\n  GlobalFiltering, //depends on ColumnFiltering\n  RowSorting,\n  ColumnGrouping, //depends on RowSorting\n  RowExpanding,\n  RowPagination,\n  RowPinning,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  /**\n   * An array of extra features that you can add to the table instance.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#_features)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  _features?: TableFeature[]\n  /**\n   * Set this option to override any of the `autoReset...` feature options.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#autoresetall)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  autoResetAll?: boolean\n  /**\n   * The array of column defs to use for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#columns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  columns: ColumnDef<TData, any>[]\n  /**\n   * The data for the table to display. This array should match the type you provided to `table.setRowType<...>`. Columns can access this data via string/index or a functional accessor. When the `data` option changes reference, the table will reprocess the data.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#data)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  data: TData[]\n  /**\n   * Set this option to `true` to output all debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugall)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugAll?: boolean\n  /**\n   * Set this option to `true` to output cell debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugcells]\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugCells?: boolean\n  /**\n   * Set this option to `true` to output column debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugColumns?: boolean\n  /**\n   * Set this option to `true` to output header debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugheaders)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugHeaders?: boolean\n  /**\n   * Set this option to `true` to output row debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugRows?: boolean\n  /**\n   * Set this option to `true` to output table debugging information to the console.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#debugtable)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  debugTable?: boolean\n  /**\n   * Default column options to use for all column defs supplied to the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#defaultcolumn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  /**\n   * This required option is a factory for a function that computes and returns the core row model for the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getcorerowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  /**\n   * This optional function is used to derive a unique ID for any given row. If not provided the rows index is used (nested rows join together with `.` using their grandparents' index eg. `index.index.index`). If you need to identify individual rows that are originating from any server-side operations, it's suggested you use this function to return an ID that makes sense regardless of network IO/ambiguity eg. a userId, taskId, database ID field, etc.\n   * @example getRowId: row => row.userId\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getrowid)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  /**\n   * This optional function is used to access the sub rows for any given row. If you are using nested rows, you will need to use this function to return the sub rows object (or undefined) from the row.\n   * @example getSubRows: row => row.subRows\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getsubrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  /**\n   * Use this option to optionally pass initial state to the table. This state will be used when resetting various table states either automatically by the table (eg. `options.autoResetPageIndex`) or via functions like `table.resetRowSelection()`. Most reset function allow you optionally pass a flag to reset to a blank/default state instead of the initial state.\n   *\n   * Table state will not be reset when this object changes, which also means that the initial state object does not need to be stable.\n   *\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#initialstate)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  initialState?: InitialTableState\n  /**\n   * This option is used to optionally implement the merging of table options.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#mergeoptions)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  /**\n   * You can pass any object to `options.meta` and access it anywhere the `table` is available via `table.options.meta`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#meta)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  meta?: TableMeta<TData>\n  /**\n   * The `onStateChange` option can be used to optionally listen to state changes within the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#onstatechange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  onStateChange: (updater: Updater<TableState>) => void\n  /**\n   * Value used when the desired value is not found in the data.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#renderfallbackvalue)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  renderFallbackValue: any\n  /**\n   * The `state` option can be used to optionally _control_ part or all of the table state. The state you pass here will merge with and overwrite the internal automatically-managed state to produce the final state for the table. You can also listen to state changes via the `onStateChange` option.\n   * > Note: Any state passed in here will override both the internal state and any other `initialState` you provide.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#state)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  state: Partial<TableState>\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  _features: readonly TableFeature[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getCoreRowModel?: () => RowModel<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  _queue: (cb: () => void) => void\n  /**\n   * Returns all columns in the table in their normalized and nested hierarchy.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getallcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getAllColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns all columns in the table flattened to a single level.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getallflatcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns all leaf-node columns in the table flattened to a single level. This does not include parent columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getallleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns a single column by its ID.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getcolumn)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n  /**\n   * Returns the core row model before any processing has been applied.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getcorerowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getCoreRowModel: () => RowModel<TData>\n  /**\n   * Returns the row with the given ID.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getrow)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getRow: (id: string, searchAll?: boolean) => Row<TData>\n  /**\n   * Returns the final model after all processing from other used features has been applied. This is the row model that is most commonly used for rendering.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getrowmodel)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getRowModel: () => RowModel<TData>\n  /**\n   * Call this function to get the table's current state. It's recommended to use this function and its state, especially when managing the table state manually. It is the exact same state used internally by the table for every feature and function it provides.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#getstate)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  getState: () => TableState\n  /**\n   * This is the resolved initial state of the table.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#initialstate)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  initialState: TableState\n  /**\n   * A read-only reference to the table's current options.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#options)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  /**\n   * Call this function to reset the table state to the initial state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#reset)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  reset: () => void\n  /**\n   * This function can be used to update the table options.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#setoptions)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  /**\n   * Call this function to update the table state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/core/table#setstate)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/tables)\n   */\n  setState: (updater: Updater<TableState>) => void\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    (options.debugAll || options.debugTable)\n  ) {\n    console.info('Creating Table Instance...')\n  }\n\n  const _features = [...builtInFeatures, ...(options._features ?? [])]\n\n  let table = { _features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = (feature.getInitialState?.(initialState) ??\n      initialState) as TableState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    //in next version, we should just pass in the row model as the optional 2nd arg\n    getRow: (id: string, searchAll?: boolean) => {\n      let row = (\n        searchAll ? table.getPrePaginationRowModel() : table.getRowModel()\n      ).rowsById[id]\n\n      if (!row) {\n        row = table.getCoreRowModel().rowsById[id]\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            throw new Error(`getRow could not find row with ID: ${id}`)\n          }\n          throw new Error()\n        }\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      getMemoOptions(options, 'debugColumns', '_getDefaultColumnDef')\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      getMemoOptions(options, 'debugColumns', 'getAllColumns')\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      getMemoOptions(options, 'debugColumns', 'getAllFlatColumns')\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce(\n          (acc, column) => {\n            acc[column.id] = column\n            return acc\n          },\n          {} as Record<string, Column<TData, unknown>>\n        )\n      },\n      getMemoOptions(options, 'debugColumns', 'getAllFlatColumnsById')\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      getMemoOptions(options, 'debugColumns', 'getAllLeafColumns')\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  for (let index = 0; index < table._features.length; index++) {\n    const feature = table._features[index]\n    feature?.createTable?.(table)\n  }\n\n  return table\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      getMemoOptions(table.options, 'debugTable', 'getRowModel', () =>\n        table._autoResetPageIndex()\n      )\n    )\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getExpandedRowModel')\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n", "import { Table, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      getMemoOptions(table.options, 'debugTable', 'getFacetedMinMaxValues')\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nfunction filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredFlatRows.push(row)\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nfunction filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getFacetedRowModel')\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      getMemoOptions(\n        table.options,\n        'debugTable',\n        `getFacetedUniqueValues_${columnId}`\n      )\n    )\n}\n", "import { ResolvedColumnFilter } from '../features/ColumnFiltering'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = (columnFilters ?? []).map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      getMemoOptions(table.options, 'debugTable', 'getFilteredRowModel', () =>\n        table._autoResetPageIndex()\n      )\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, getMemoOptions, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      getMemoOptions(table.options, 'debugTable', 'getGroupedRowModel', () => {\n        table._queue(() => {\n          table._autoResetExpanded()\n          table._autoResetPageIndex()\n        })\n      })\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { getMemoOptions, memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      getMemoOptions(table.options, 'debugTable', 'getPaginationRowModel')\n    )\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/RowSorting'\nimport { getMemoOptions, memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1 | 'first' | 'last'\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = rows.map(row => ({ ...row }))\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const sortUndefined = columnInfo.sortUndefined\n              const isDesc = sortEntry?.desc ?? false\n\n              let sortInt = 0\n\n              // All sorting ints should always return in ascending order\n              if (sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = aValue === undefined\n                const bUndefined = bValue === undefined\n\n                if (aUndefined || bUndefined) {\n                  if (sortUndefined === 'first') return aUndefined ? -1 : 1\n                  if (sortUndefined === 'last') return aUndefined ? 1 : -1\n                  sortInt =\n                    aUndefined && bUndefined\n                      ? 0\n                      : aUndefined\n                        ? sortUndefined\n                        : -sortUndefined\n                }\n              }\n\n              if (sortInt === 0) {\n                sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n              }\n\n              // If sorting is non-zero, take care of desc and inversion\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      getMemoOptions(table.options, 'debugTable', 'getSortedRowModel', () =>\n        table._autoResetPageIndex()\n      )\n    )\n}\n", "import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\n/**\n * If rendering headers, cells, or footers with custom markup, use flexRender instead of `cell.getValue()` or `cell.renderValue()`.\n */\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n", "export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends ReadonlyArray<any>, TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: false | string\n    debug?: () => any\n    onChange?: (result: TResult) => void\n    initialDeps?: TDeps\n  },\n) {\n  let deps = opts.initialDeps ?? []\n  let result: TResult | undefined\n\n  return (): TResult => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    opts?.onChange?.(result)\n\n    return result\n  }\n}\n\nexport function notUndefined<T>(value: T | undefined, msg?: string): T {\n  if (value === undefined) {\n    throw new Error(`Unexpected undefined${msg ? `: ${msg}` : ''}`)\n  } else {\n    return value\n  }\n}\n\nexport const approxEqual = (a: number, b: number) => Math.abs(a - b) < 1\n\nexport const debounce = (\n  targetWindow: Window & typeof globalThis,\n  fn: Function,\n  ms: number,\n) => {\n  let timeoutId: number\n  return function (this: any, ...args: Array<any>) {\n    targetWindow.clearTimeout(timeoutId)\n    timeoutId = targetWindow.setTimeout(() => fn.apply(this, args), ms)\n  }\n}\n", "import { approxEqual, debounce, memo, notUndefined } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem<TItemElement extends Element> {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n  measureElement: (node: TItemElement | null | undefined) => void\n}\n\nexport interface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  if (!targetWindow.ResizeObserver) {\n    return () => {}\n  }\n\n  const observer = new targetWindow.ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nconst addEventListenerOptions = {\n  passive: true,\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nconst supportsScrollend =\n  typeof window == 'undefined' ? true : 'onscrollend' in window\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (offset: number, isScrolling: boolean) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback = supportsScrollend\n    ? () => undefined\n    : debounce(\n        targetWindow,\n        () => {\n          cb(offset, false)\n        },\n        instance.options.isScrollingResetDelay,\n      )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n    element.removeEventListener('scrollend', endHandler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: (offset: number, isScrolling: boolean) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n  const targetWindow = instance.targetWindow\n  if (!targetWindow) {\n    return\n  }\n\n  let offset = 0\n  const fallback = supportsScrollend\n    ? () => undefined\n    : debounce(\n        targetWindow,\n        () => {\n          cb(offset, false)\n        },\n        instance.options.isScrollingResetDelay,\n      )\n\n  const createHandler = (isScrolling: boolean) => () => {\n    offset = element[instance.options.horizontal ? 'scrollX' : 'scrollY']\n    fallback()\n    cb(offset, isScrolling)\n  }\n  const handler = createHandler(true)\n  const endHandler = createHandler(false)\n  endHandler()\n\n  element.addEventListener('scroll', handler, addEventListenerOptions)\n  element.addEventListener('scrollend', endHandler, addEventListenerOptions)\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n    element.removeEventListener('scrollend', endHandler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number, isScrolling: boolean) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    sync: boolean,\n  ) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number | (() => number)\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => Array<number>\n  scrollMargin?: number\n  gap?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: Array<VirtualItem<TItemElement>>\n  lanes?: number\n  isScrollingResetDelay?: number\n  enabled?: boolean\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: Array<void | (() => void)> = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  targetWindow: (Window & typeof globalThis) | null = null\n  isScrolling = false\n  private scrollToIndexTimeoutId: number | null = null\n  measurementsCache: Array<VirtualItem<TItemElement>> = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: Array<number> = []\n  scrollRect: Rect | null = null\n  scrollOffset: number | null = null\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments = 0\n  shouldAdjustScrollPositionOnItemSizeChange:\n    | undefined\n    | ((\n        item: VirtualItem<TItemElement>,\n        delta: number,\n        instance: Virtualizer<TScrollElement, TItemElement>,\n      ) => boolean)\n  elementsCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      }\n\n      if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n        return null\n      }\n\n      return (_ro = new this.targetWindow.ResizeObserver((entries) => {\n        entries.forEach((entry) => {\n          this._measureElement(entry.target as TItemElement, entry)\n        })\n      }))\n    }\n\n    return {\n      disconnect: () => get()?.disconnect(),\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } | null = null\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      gap: 0,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      isScrollingResetDelay: 150,\n      enabled: true,\n      ...opts,\n    }\n  }\n\n  private notify = (force: boolean, sync: boolean) => {\n    const { startIndex, endIndex } = this.range ?? {\n      startIndex: undefined,\n      endIndex: undefined,\n    }\n    const range = this.calculateRange()\n\n    if (\n      force ||\n      startIndex !== range?.startIndex ||\n      endIndex !== range?.endIndex\n    ) {\n      this.options.onChange?.(this, sync)\n    }\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n    this.targetWindow = null\n    this.observer.disconnect()\n    this.elementsCache.clear()\n  }\n\n  _didMount = () => {\n    return () => {\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.enabled\n      ? this.options.getScrollElement()\n      : null\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      if (!scrollElement) {\n        this.notify(false, false)\n        return\n      }\n\n      this.scrollElement = scrollElement\n\n      if (this.scrollElement && 'ownerDocument' in this.scrollElement) {\n        this.targetWindow = this.scrollElement.ownerDocument.defaultView\n      } else {\n        this.targetWindow = this.scrollElement?.window ?? null\n      }\n\n      this._scrollToOffset(this.getScrollOffset(), {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.notify(false, false)\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset, isScrolling) => {\n          this.scrollAdjustments = 0\n          this.scrollDirection = isScrolling\n            ? this.getScrollOffset() < offset\n              ? 'forward'\n              : 'backward'\n            : null\n          this.scrollOffset = offset\n\n          const prevIsScrolling = this.isScrolling\n          this.isScrolling = isScrolling\n\n          this.notify(prevIsScrolling !== isScrolling, isScrolling)\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    if (!this.options.enabled) {\n      this.scrollRect = null\n      return 0\n    }\n\n    this.scrollRect = this.scrollRect ?? this.options.initialRect\n\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getScrollOffset = () => {\n    if (!this.options.enabled) {\n      this.scrollOffset = null\n      return 0\n    }\n\n    this.scrollOffset =\n      this.scrollOffset ??\n      (typeof this.options.initialOffset === 'function'\n        ? this.options.initialOffset()\n        : this.options.initialOffset)\n\n    return this.scrollOffset\n  }\n\n  private getFurthestMeasurement = (\n    measurements: Array<VirtualItem<TItemElement>>,\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem<TItemElement>>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort((a, b) => {\n          if (a.end === b.end) {\n            return a.index - b.index\n          }\n\n          return a.end - b.end\n        })[0]\n      : undefined\n  }\n\n  private getMeasurementOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n      this.options.enabled,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey, enabled) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n        enabled,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getMeasurements = memo(\n    () => [this.getMeasurementOptions(), this.itemSizeCache],\n    (\n      { count, paddingStart, scrollMargin, getItemKey, enabled },\n      itemSizeCache,\n    ) => {\n      if (!enabled) {\n        this.measurementsCache = []\n        this.itemSizeCache.clear()\n        return []\n      }\n\n      if (this.measurementsCache.length === 0) {\n        this.measurementsCache = this.options.initialMeasurementsCache\n        this.measurementsCache.forEach((item) => {\n          this.itemSizeCache.set(item.key, item.size)\n        })\n      }\n\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        let measureElement = this.measurementsCache[i]?.measureElement\n\n        if (!measureElement) {\n          measureElement = (node: TItemElement | null | undefined) => {\n            const key = getItemKey(i)\n            const prevNode = this.elementsCache.get(key)\n\n            if (!node) {\n              if (prevNode) {\n                this.observer.unobserve(prevNode)\n                this.elementsCache.delete(key)\n              }\n              return\n            }\n\n            if (prevNode !== node) {\n              if (prevNode) {\n                this.observer.unobserve(prevNode)\n              }\n              this.observer.observe(node)\n              this.elementsCache.set(key, node)\n            }\n\n            if (node.isConnected) {\n              this.resizeItem(\n                i,\n                this.options.measureElement(node, undefined, this),\n              )\n            }\n          }\n        }\n\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end + this.options.gap\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n          measureElement,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.getScrollOffset()],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range =\n        measurements.length > 0 && outerSize > 0\n          ? calculateRange({\n              measurements,\n              outerSize,\n              scrollOffset,\n            })\n          : null)\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return range === null\n        ? []\n        : rangeExtractor({\n            startIndex: range.startIndex,\n            endIndex: range.endIndex,\n            overscan,\n            count,\n          })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const i = this.indexFromElement(node)\n    const item = this.getMeasurements()[i]\n\n    if (!item || !node.isConnected) {\n      this.elementsCache.forEach((cached, key) => {\n        if (cached === node) {\n          this.observer.unobserve(node)\n          this.elementsCache.delete(key)\n        }\n      })\n      return\n    }\n\n    const prevNode = this.elementsCache.get(item.key)\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.elementsCache.set(item.key, node)\n    }\n\n    this.resizeItem(i, this.options.measureElement(node, entry, this))\n  }\n\n  resizeItem = (index: number, size: number) => {\n    const item = this.getMeasurements()[index]\n    if (!item) {\n      return\n    }\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n    const delta = size - itemSize\n\n    if (delta !== 0) {\n      if (\n        this.shouldAdjustScrollPositionOnItemSizeChange !== undefined\n          ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this)\n          : item.start < this.getScrollOffset() + this.scrollAdjustments\n      ) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.getScrollOffset(), {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(item.index)\n      this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size))\n\n      this.notify(true, false)\n    }\n  }\n\n  measureElement = (node: TItemElement | null | undefined) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: Array<VirtualItem<TItemElement>> = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n    if (measurements.length === 0) {\n      return undefined\n    }\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n    const scrollOffset = this.getScrollOffset()\n\n    if (align === 'auto') {\n      if (toOffset <= scrollOffset) {\n        align = 'start'\n      } else if (toOffset >= scrollOffset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      toOffset = toOffset\n    } else if (align === 'end') {\n      toOffset = toOffset - size\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - size\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const item = this.getMeasurements()[index]\n    if (!item) {\n      return undefined\n    }\n\n    const size = this.getSize()\n    const scrollOffset = this.getScrollOffset()\n\n    if (align === 'auto') {\n      if (item.end >= scrollOffset + size - this.options.scrollPaddingEnd) {\n        align = 'end'\n      } else if (item.start <= scrollOffset + this.options.scrollPaddingStart) {\n        align = 'start'\n      } else {\n        return [scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? item.end + this.options.scrollPaddingEnd\n        : item.start - this.options.scrollPaddingStart\n\n    return [this.getOffsetForAlignment(toOffset, align), align] as const\n  }\n\n  private isDynamicMode = () => this.elementsCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null && this.targetWindow) {\n      this.targetWindow.clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const offsetAndAlign = this.getOffsetForIndex(index, initialAlign)\n    if (!offsetAndAlign) return\n\n    const [offset, align] = offsetAndAlign\n\n    this._scrollToOffset(offset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode() && this.targetWindow) {\n      this.scrollToIndexTimeoutId = this.targetWindow.setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.elementsCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [latestOffset] = notUndefined(\n            this.getOffsetForIndex(index, align),\n          )\n\n          if (!approxEqual(latestOffset, this.getScrollOffset())) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getScrollOffset() + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () => {\n    const measurements = this.getMeasurements()\n\n    let end: number\n    // If there are no measurements, set the end to paddingStart\n    if (measurements.length === 0) {\n      end = this.options.paddingStart\n    } else {\n      // If lanes is 1, use the last measurement's end, otherwise find the maximum end value among all measurements\n      end =\n        this.options.lanes === 1\n          ? measurements[measurements.length - 1]?.end ?? 0\n          : Math.max(\n              ...measurements.slice(-this.options.lanes).map((m) => m.end),\n            )\n    }\n\n    return end - this.options.scrollMargin + this.options.paddingEnd\n  }\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.options.onChange?.(this, false)\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange<TItemElement extends Element>({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: Array<VirtualItem<TItemElement>>\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n", "import * as React from 'react'\nimport { flushSync } from 'react-dom'\nimport {\n  Virtualizer,\n  elementScroll,\n  observeElementOffset,\n  observeElementRect,\n  observeWindowOffset,\n  observeWindowRect,\n  windowScroll,\n} from '@tanstack/virtual-core'\nimport type { PartialKeys, VirtualizerOptions } from '@tanstack/virtual-core'\n\nexport * from '@tanstack/virtual-core'\n\nconst useIsomorphicLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nfunction useVirtualizerBase<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n>(\n  options: VirtualizerOptions<TScrollElement, TItemElement>,\n): Virtualizer<TScrollElement, TItemElement> {\n  const rerender = React.useReducer(() => ({}), {})[1]\n\n  const resolvedOptions: VirtualizerOptions<TScrollElement, TItemElement> = {\n    ...options,\n    onChange: (instance, sync) => {\n      if (sync) {\n        flushSync(rerender)\n      } else {\n        rerender()\n      }\n      options.onChange?.(instance, sync)\n    },\n  }\n\n  const [instance] = React.useState(\n    () => new Virtualizer<TScrollElement, TItemElement>(resolvedOptions),\n  )\n\n  instance.setOptions(resolvedOptions)\n\n  React.useEffect(() => {\n    return instance._didMount()\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate()\n  })\n\n  return instance\n}\n\nexport function useVirtualizer<\n  TScrollElement extends Element,\n  TItemElement extends Element,\n>(\n  options: PartialKeys<\n    VirtualizerOptions<TScrollElement, TItemElement>,\n    'observeElementRect' | 'observeElementOffset' | 'scrollToFn'\n  >,\n): Virtualizer<TScrollElement, TItemElement> {\n  return useVirtualizerBase<TScrollElement, TItemElement>({\n    observeElementRect: observeElementRect,\n    observeElementOffset: observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options,\n  })\n}\n\nexport function useWindowVirtualizer<TItemElement extends Element>(\n  options: PartialKeys<\n    VirtualizerOptions<Window, TItemElement>,\n    | 'getScrollElement'\n    | 'observeElementRect'\n    | 'observeElementOffset'\n    | 'scrollToFn'\n  >,\n): Virtualizer<Window, TItemElement> {\n  return useVirtualizerBase<Window, TItemElement>({\n    getScrollElement: () => (typeof document !== 'undefined' ? window : null),\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    initialOffset: () => (typeof document !== 'undefined' ? window.scrollY : 0),\n    ...options,\n  })\n}\n", "import { render, hydrate, unmountComponentAtNode } from 'preact/compat';\n\nexport function createRoot(container) {\n\treturn {\n\t\t// eslint-disable-next-line\n\t\trender: function (children) {\n\t\t\trender(children, container);\n\t\t},\n\t\t// eslint-disable-next-line\n\t\tunmount: function () {\n\t\t\tunmountComponentAtNode(container);\n\t\t}\n\t};\n}\n\nexport function hydrateRoot(container, children) {\n\thydrate(children, container);\n\treturn createRoot(container);\n}\n\nexport default {\n\tcreateRoot,\n\thydrateRoot\n};\n", "// Should be no imports here!\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: unique symbol = Symbol.for(\"immer-nothing\")\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = Symbol.for(\"immer-draftable\")\n\nexport const DRAFT_STATE: unique symbol = Symbol.for(\"immer-state\")\n", "export const errors =\n\tprocess.env.NODE_ENV !== \"production\"\n\t\t? [\n\t\t\t\t// All error codes, starting by 0:\n\t\t\t\tfunction(plugin: string) {\n\t\t\t\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t\t\t\t},\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t\t\t\t},\n\t\t\t\t\"This object has been frozen and should not be mutated\",\n\t\t\t\tfunction(data: any) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\t\t\t\tdata\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t\t\t\t\"Immer forbids circular references\",\n\t\t\t\t\"The first or second argument to `produce` must be a function\",\n\t\t\t\t\"The third argument to `produce` must be a function or undefined\",\n\t\t\t\t\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t\t\t\t\"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'current' expects a draft, got: ${thing}`\n\t\t\t\t},\n\t\t\t\t\"Object.defineProperty() cannot be used on an Immer draft\",\n\t\t\t\t\"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t\t\t\t\"Immer only supports deleting array indices\",\n\t\t\t\t\"Immer only supports setting array indices and the 'length' property\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'original' expects a draft, got: ${thing}`\n\t\t\t\t}\n\t\t\t\t// Note: if more errors are added, the errorOffset in Patches.ts should be increased\n\t\t\t\t// See Patches.ts for additional errors\n\t\t  ]\n\t\t: []\n\nexport function die(error: number, ...args: any[]): never {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tconst e = errors[error]\n\t\tconst msg = typeof e === \"function\" ? e.apply(null, args as any) : e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n", "import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\tArchType,\n\tdie\n} from \"../internal\"\n\nexport const getPrototypeOf = Object.getPrototypeOf\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor?.[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(15, value)\n\treturn value[DRAFT_STATE].base_\n}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any) {\n\tif (getArchtype(obj) === ArchType.Object) {\n\t\tObject.entries(obj).forEach(([key, value]) => {\n\t\t\titer(key, value, obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): ArchType {\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_\n\t\t: Array.isArray(thing)\n\t\t? ArchType.Array\n\t\t: isMap(thing)\n\t\t? ArchType.Map\n\t\t: isSet(thing)\n\t\t? ArchType.Set\n\t\t: ArchType.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === ArchType.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === ArchType.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === ArchType.Map) thing.set(propOrOldValue, value)\n\telse if (t === ArchType.Set) {\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any, strict: boolean) {\n\tif (isMap(base)) {\n\t\treturn new Map(base)\n\t}\n\tif (isSet(base)) {\n\t\treturn new Set(base)\n\t}\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\n\tif (!strict && isPlainObject(base)) {\n\t\tif (!getPrototypeOf(base)) {\n\t\t\tconst obj = Object.create(null)\n\t\t\treturn Object.assign(obj, base)\n\t\t}\n\t\treturn {...base}\n\t}\n\n\tconst descriptors = Object.getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = Reflect.ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (_key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\treturn Object.isFrozen(obj)\n}\n", "import {\n\tImmerState,\n\tPatch,\n\tDrafted,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tArchType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(0, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ArchType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ArchType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n", "import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tArchType,\n\tgetPlugin\n} from \"../internal\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (state.type_ === ArchType.Object || state.type_ === ArchType.Array)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n", "import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tArchType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumerable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result = state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// To preserve insertion order in all cases we then clear the set\n\t\t// And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\t\tlet resultEach = result\n\t\tlet isSet = false\n\t\tif (state.type_ === ArchType.Set) {\n\t\t\tresultEach = new Set(result)\n\t\t\tresult.clear()\n\t\t\tisSet = true\n\t\t}\n\t\teach(resultEach, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path, isSet)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath,\n\ttargetIsSet?: boolean\n) {\n\tif (process.env.NODE_ENV !== \"production\" && childValue === targetObject)\n\t\tdie(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ArchType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t} else if (targetIsSet) {\n\t\ttargetObject.add(childValue)\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\t// we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\tif (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n", "import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tgetPrototypeOf,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tArchType,\n\tImmerScope\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ArchType.Object\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ArchType.Array\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ArchType.Array : (ArchType.Object as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(value, state))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\t(state.copy_![prop] === value &&\n\t\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t\t(value !== undefined || prop in state.copy_)) ||\n\t\t\t// special case: NaN\n\t\t\t(Number.isNaN(value) && Number.isNaN(state.copy_![prop]))\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\tif (state.copy_) {\n\t\t\tdelete state.copy_[prop]\n\t\t}\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ArchType.Array || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (process.env.NODE_ENV !== \"production\" && isNaN(parseInt(prop as any)))\n\t\tdie(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (\n\t\tprocess.env.NODE_ENV !== \"production\" &&\n\t\tprop !== \"length\" &&\n\t\tisNaN(parseInt(prop as any))\n\t)\n\t\tdie(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {\n\tbase_: any\n\tcopy_: any\n\tscope_: ImmerScope\n}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(\n\t\t\tstate.base_,\n\t\t\tstate.scope_.immer_.useStrictShallowCopy_\n\t\t)\n\t}\n}\n", "import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tautoFreeze_: boolean = true\n\tuseStrictShallowCopy_: boolean = false\n\n\tconstructor(config?: {autoFreeze?: boolean; useStrictShallowCopy?: boolean}) {\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t\tif (typeof config?.useStrictShallowCopy === \"boolean\")\n\t\t\tthis.setUseStrictShallowCopy(config!.useStrictShallowCopy)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(1, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (base: any, recipe?: any): any => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => base(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(base, recipe, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (!state || !state.isManual_) die(9)\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to enable strict shallow copy.\n\t *\n\t * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n\t */\n\tsetUseStrictShallowCopy(value: boolean) {\n\t\tthis.useStrictShallowCopy_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: createProxyProxy(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n", "import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tisFrozen\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(10, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value) || isFrozen(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tif (state) {\n\t\tif (!state.modified_) return state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_)\n\t} else {\n\t\tcopy = shallowCopy(value, true)\n\t}\n\t// recurse\n\teach(copy, (key, childValue) => {\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\tif (state) {\n\t\tstate.finalized_ = false\n\t}\n\treturn copy\n}\n", "import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tProxyArrayState,\n\tMapState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tgetPrototypeOf,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tArchType,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING,\n\terrors\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst errorOffset = 16\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\terrors.push(\n\t\t\t'Sets cannot have \"replace\" patches.',\n\t\t\tfunction(op: string) {\n\t\t\t\treturn \"Unsupported patch operation: \" + op\n\t\t\t},\n\t\t\tfunction(path: string) {\n\t\t\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t\t\t},\n\t\t\t\"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n\t\t)\n\t}\n\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ArchType.Object:\n\t\t\tcase ArchType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ArchType.Array:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ArchType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tfor (let i = copy_.length - 1; base_.length <= i; --i) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tinversePatches.push({\n\t\t\t\top: REMOVE,\n\t\t\t\tpath\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tlet p = path[i]\n\t\t\t\tif (typeof p !== \"string\" && typeof p !== \"number\") {\n\t\t\t\t\tp = \"\" + p\n\t\t\t\t}\n\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === ArchType.Object || parentType === ArchType.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\")\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(errorOffset + 2, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\tdie(errorOffset)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(errorOffset + 1, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n", "// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tdie,\n\tArchType,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\tclass DraftMap extends Map {\n\t\t[DRAFT_STATE]: MapState\n\n\t\tconstructor(target: AnyMap, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Map,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tset(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tif (state.base_.has(key)) {\n\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t} else {\n\t\t\t\tstate.assigned_!.delete(key)\n\t\t\t}\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tforEach(cb: (value: any, key: any, self: any) => void, thisArg?: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tget(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.entries()\n\t\t}\n\t}\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tclass DraftSet extends Set {\n\t\t[DRAFT_STATE]: SetState\n\t\tconstructor(target: AnySet, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Set,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tadd(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tforEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\t}\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n", "import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze,\n\tObjectish\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to enable strict shallow copy.\n *\n * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n */\nexport const setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\n", "import { produce, Draft, nothing, freeze } from \"immer\";\nimport { useState, useReducer, useCallback, useMemo, Dispatch } from \"react\";\n\nexport type DraftFunction<S> = (draft: Draft<S>) => void;\nexport type Updater<S> = (arg: S | DraftFunction<S>) => void;\nexport type ImmerHook<S> = [S, Updater<S>];\n\nexport function useImmer<S = any>(initialValue: S | (() => S)): ImmerHook<S>;\n\nexport function useImmer(initialValue: any) {\n  const [val, updateValue] = useState(() =>\n    freeze(\n      typeof initialValue === \"function\" ? initialValue() : initialValue,\n      true\n    )\n  );\n  return [\n    val,\n    useCallback((updater) => {\n      if (typeof updater === \"function\") updateValue(produce(updater));\n      else updateValue(freeze(updater));\n    }, []),\n  ];\n}\n\n// Provides different overloads of `useImmerReducer` similar to `useReducer` from `@types/react`.\n\nexport type ImmerReducer<S, A> = (\n  draftState: Draft<S>,\n  action: A\n) => void | (S extends undefined ? typeof nothing : S);\n\n/**\n * @deprecated Use `ImmerReducer` instead since there is already a `Reducer` type in `@types/react`.\n */\nexport type Reducer<S = any, A = any> = ImmerReducer<S, A>;\n\nexport function useImmerReducer<S, A, I>(\n  reducer: ImmerReducer<S, A>,\n  initializerArg: S & I,\n  initializer: (arg: S & I) => S\n): [S, Dispatch<A>];\n\nexport function useImmerReducer<S, A, I>(\n  reducer: ImmerReducer<S, A>,\n  initializerArg: I,\n  initializer: (arg: I) => S\n): [S, Dispatch<A>];\n\nexport function useImmerReducer<S, A>(\n  reducer: ImmerReducer<S, A>,\n  initialState: S,\n  initializer?: undefined\n): [S, Dispatch<A>];\n\nexport function useImmerReducer<S, A, I>(\n  reducer: ImmerReducer<S, A>,\n  initializerArg: S & I,\n  initializer?: (arg: S & I) => S\n) {\n  const cachedReducer = useMemo(() => produce(reducer), [reducer]);\n  return useReducer(cachedReducer, initializerArg as any, initializer as any);\n}\n", "// type JobId = string;\n// type UploadUrl = string;\n// type UploadInitValue = { jobId: JobId; uploadUrl: UploadUrl };\n// type UploadEndValue = never;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ResponseValue = any;\n\nexport type OnSuccessRequest = (value: ResponseValue) => void;\nexport type OnErrorRequest = (err: string) => void;\n\n// Websocket messages are normally one-way--i.e. the client passes a\n// message to the server but there is no way for the server to provide\n// a response to that specific message. makeRequest provides a way to\n// do asynchronous RPC over websocket. Each request has a method name\n// and arguments, plus optionally one or more binary blobs can be\n// included as well. The request is tagged with a unique number that\n// the server will use to label the corresponding response.\n//\n// @param method A string that tells the server what logic to run.\n// @param args An array of objects that should also be passed to the\n//   server in JSON-ified form.\n// @param onSuccess A function that will be called back if the server\n//   responds with success. If the server provides a value in the\n//   response, the function will be called with it as the only argument.\n// @param onError A function that will be called back if the server\n//   responds with error, or if the request fails for any other reason.\n//   The parameter to onError will be a string describing the error.\n// @param blobs Optionally, an array of Blob, ArrayBuffer, or string\n//   objects that will be made available to the server as part of the\n//   request. Strings will be encoded using UTF-8.\nexport function makeRequest(\n  method: string,\n  args: unknown[],\n  onSuccess: OnSuccessRequest,\n  onError: OnErrorRequest,\n  blobs: Array<ArrayBuffer | Blob | string> | undefined\n) {\n  window.Shiny.shinyapp!.makeRequest(method, args, onSuccess, onError, blobs);\n}\n\nexport function makeRequestPromise({\n  method,\n  args,\n  blobs,\n}: {\n  method: string;\n  args: unknown[];\n  blobs?: Array<ArrayBuffer | Blob | string> | undefined;\n}) {\n  return new Promise((resolve, reject) => {\n    makeRequest(\n      method,\n      args,\n      (value: ResponseValue) => {\n        resolve(value);\n      },\n      (err: string) => {\n        reject(err);\n      },\n      blobs\n    );\n  });\n}\n", "import { ResponseValue, makeRequestPromise } from \"./request\";\n\nimport { CellStateEnum } from \"./cell\";\nimport { SetCellEditMapAtLoc } from \"./cell-edit-map\";\nimport type { PatchInfo } from \"./types\";\n\nexport type CellPatch = {\n  rowIndex: number;\n  columnIndex: number;\n  value: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  // prev: unknown;\n};\nexport type CellPatchPy = {\n  row_index: number;\n  column_index: number;\n  value: unknown;\n  // prev: unknown;\n};\n\ntype SetDataFn = (fn: (draft: unknown[][]) => void) => void;\n\nexport function addPatchToData({\n  setData,\n  newPatches,\n  setCellEditMapAtLoc,\n}: {\n  setData: SetDataFn;\n  newPatches: CellPatch[];\n  setCellEditMapAtLoc: SetCellEditMapAtLoc;\n}): void {\n  // Update data\n  setData((draft) => {\n    newPatches.forEach(({ rowIndex, columnIndex, value }) => {\n      draft[rowIndex]![columnIndex] = value;\n    });\n  });\n  // Set the new patches in cell edit map info\n  newPatches.forEach(({ rowIndex, columnIndex, value }) => {\n    setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n      obj_draft.value = value;\n      obj_draft.state = CellStateEnum.EditSuccess;\n      // Remove save_error if it exists\n      obj_draft.errorTitle = undefined;\n    });\n  });\n}\n\nexport function cellPatchPyArrToCellPatchArr(\n  patchesPy: CellPatchPy[]\n): CellPatch[] {\n  const patches: CellPatch[] = patchesPy.map(\n    (patch: CellPatchPy): CellPatch => {\n      return {\n        rowIndex: patch.row_index,\n        columnIndex: patch.column_index,\n        value: patch.value,\n      };\n    }\n  );\n  return patches;\n}\n\nexport function cellPatchArrToCellPatchPyArr(\n  patches: CellPatch[]\n): CellPatchPy[] {\n  const patchesPy: CellPatchPy[] = patches.map((patch) => {\n    return {\n      row_index: patch.rowIndex,\n      column_index: patch.columnIndex,\n      value: patch.value,\n    };\n  });\n  return patchesPy;\n}\n\nexport function updateCellsData({\n  patchInfo,\n  patches,\n  onSuccess,\n  onError,\n  columns,\n  setData,\n  setCellEditMapAtLoc,\n}: {\n  patchInfo: PatchInfo;\n  patches: CellPatch[];\n  onSuccess: (values: CellPatch[]) => void;\n  onError: (err: string) => void;\n  columns: readonly string[];\n  setData: SetDataFn;\n  setCellEditMapAtLoc: SetCellEditMapAtLoc;\n}) {\n  // // Skip page index reset until after next rerender\n  // skipAutoResetPageIndex();\n\n  const patchesPy = cellPatchArrToCellPatchPyArr(patches);\n\n  makeRequestPromise({\n    method: patchInfo.key,\n    args: [\n      // list[CellPatch]\n      patchesPy,\n    ],\n  })\n    .then((newPatchesPy: ResponseValue) => {\n      // Assert type of values is list\n      if (!Array.isArray(newPatchesPy)) {\n        throw new Error(\"Expected a response of a list of patches\");\n      }\n\n      for (const patch of newPatchesPy) {\n        if (\n          !(\"row_index\" in patch && \"column_index\" in patch && \"value\" in patch)\n        ) {\n          throw new Error(\n            \"Expected list of patches containing `row_index`, `column_index`, and `value`\"\n          );\n        }\n      }\n      newPatchesPy = newPatchesPy as CellPatchPy[];\n\n      const newPatches = cellPatchPyArrToCellPatchArr(newPatchesPy);\n\n      // Set the old patches locations back to success state\n      // This may be overkill, but it guarantees that the incoming patches exit the saving state\n      patches.forEach(({ rowIndex, columnIndex, value }) => {\n        setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n          // If the cell is still saving, then set it back to ready.\n          // If not, then something else has changed the cell state, so don't change it.\n          if (obj_draft.state !== CellStateEnum.EditSaving) return;\n\n          obj_draft.state = CellStateEnum.Ready;\n          obj_draft.value = value;\n          obj_draft.errorTitle = undefined;\n        });\n      });\n\n      // Update data and cell edit map with new patches\n      addPatchToData({ setData, newPatches, setCellEditMapAtLoc });\n\n      onSuccess(newPatches);\n    })\n    .catch((err: string) => {\n      patches.forEach(({ rowIndex, columnIndex, value }) => {\n        setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n          obj_draft.value = String(value);\n\n          obj_draft.state = CellStateEnum.EditFailure;\n          obj_draft.errorTitle = String(err);\n        });\n      });\n      onError(err);\n    });\n}\n", "import { ColumnDef, RowModel, flexRender } from \"@tanstack/react-table\";\nimport { Cell } from \"@tanstack/table-core\";\nimport React, {\n  FC,\n  ChangeEvent as ReactChangeEvent,\n  ReactElement,\n  FocusEvent as ReactFocusEvent,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  useCallback,\n  useEffect,\n  useRef,\n} from \"react\";\nimport { CellEdit, SetCellEditMapAtLoc } from \"./cell-edit-map\";\nimport { updateCellsData } from \"./data-update\";\nimport { SelectionSet } from \"./selection\";\nimport { CellStyle } from \"./style-info\";\nimport type { PatchInfo } from \"./types\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype HtmlDep = any;\n\n// States\n// # \u221A Ready\n// # \u221A Editing\n// # \u221A Saving / Disabled\n// # \u221A Error\n// # \u221A Saved\n// # Cancelled (is Ready state?)\n// # New\n// # Added\n// # Removed\nexport const CellStateEnum = {\n  EditSaving: \"EditSaving\",\n  EditSuccess: \"EditSuccess\",\n  EditFailure: \"EditFailure\",\n  Editing: \"Editing\",\n  Ready: \"Ready\",\n} as const;\nexport const CellStateClassEnum = {\n  EditSaving: \"cell-edit-saving\",\n  EditSuccess: \"cell-edit-success\",\n  EditFailure: \"cell-edit-failure\",\n  Editing: \"cell-edit-editing\",\n  Ready: undefined,\n} as const;\nexport type CellState = keyof typeof CellStateEnum;\n\ntype CellHtmlValue = {\n  isShinyHtml: true;\n  obj: { deps?: HtmlDep[]; html: string };\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isShinyHtml = (x: any): x is CellHtmlValue => {\n  return (\n    x !== null && // Note: x === null has `typeof x === \"object\"`\n    typeof x === \"object\" &&\n    Object.prototype.hasOwnProperty.call(x, \"isShinyHtml\") &&\n    x.isShinyHtml === true\n  );\n};\ntype CellValue = string | CellHtmlValue | null;\nconst getCellValueText = (cellValue: CellValue) => {\n  if (cellValue === null) return \"\";\n  if (isShinyHtml(cellValue)) return cellValue.obj.html;\n  return cellValue;\n};\n\ninterface TableBodyCellProps {\n  key: string;\n  rowId: string;\n  containerRef: React.RefObject<HTMLDivElement>;\n  cell: Cell<unknown[], unknown>;\n  patchInfo: PatchInfo;\n  columns: readonly string[];\n  coldefs: readonly ColumnDef<unknown[], unknown>[];\n  rowIndex: number;\n  columnIndex: number;\n  editCellsIsAllowed: boolean;\n  getSortedRowModel: () => RowModel<unknown[]>;\n  setData: (fn: (draft: unknown[][]) => void) => void;\n  cellEditInfo: CellEdit | undefined;\n  cellStyle: CellStyle | undefined;\n  cellClassName: string | undefined;\n  setCellEditMapAtLoc: SetCellEditMapAtLoc;\n  selection: SelectionSet<string, HTMLTableRowElement>;\n}\n\nexport const TableBodyCell: FC<TableBodyCellProps> = ({\n  containerRef,\n  rowId,\n  cell,\n  patchInfo,\n  columns,\n  coldefs,\n  rowIndex,\n  columnIndex,\n  editCellsIsAllowed,\n  getSortedRowModel,\n  cellEditInfo,\n  cellStyle,\n  cellClassName,\n  setData,\n  setCellEditMapAtLoc,\n  selection,\n}) => {\n  const initialValue = cell.getValue() as\n    | string\n    | { isShinyHtml: true; obj: { deps?: HtmlDep[]; html: string } }\n    | null;\n\n  const isHtmlColumn = cell.column.columnDef.meta!.isHtmlColumn;\n\n  const cellValue = cellEditInfo?.value ?? initialValue;\n\n  const cellState = cellEditInfo?.state ?? CellStateEnum.Ready;\n  const errorTitle = cellEditInfo?.errorTitle;\n  // Listen to boolean value of cellEditInfo. This allows for the cell state to be restored if esc is hit\n  const isEditing = cellEditInfo?.isEditing ?? false;\n  const editValue = cellEditInfo?.editValue ?? getCellValueText(cellValue);\n\n  const tdRef = useRef<HTMLTableCellElement | null>(null);\n  const inputRef = useRef<HTMLTextAreaElement | null>(null);\n\n  // Keyboard navigation:\n  // * When editing a cell:\n  //   * On esc key:\n  //     * \u221A Restore prior value / state / error\n  //     * \u221A Move focus from input to td\n  //   * On enter key:\n  //     * \u221A Save value\n  //     * \u221A Move to the cell below (or above w/ shift) and edit the new cell\n  //     * X Should shift+enter add a newline in a cell?\n  //   * On tab key:\n  //     * \u221A Save value\n  //     * \u221A Move to the cell to the right (or left w/ shift) and edit the new cell\n  //   * Scrolls out of view:\n  //     * Intercept keyboard events and execute the above actions\n  //     * (Currently, there literally is no input DOM element to accept keyboard events)\n  // TODO-barret-future; More keyboard navigation!\n  //   * https://www.npmjs.com/package/@table-nav/react ?\n  // * When focused on a td:\n  //   * Allow for arrow key navigation\n  //   * Have enter key enter edit mode for a cell\n  //   * \u221A When a td is focused, Have esc key move focus to the table\n  //   * X When table is focused, Have esc key blur the focus\n  // TODO-barret-future; Combat edit mode being independent of selection mode\n  // * In row / column selection mode, allow for arrow key navigation by focusing on a single cell, not a TR\n  // * If a cell is focused,\n  //   * `enter key` allows you to go into edit mode; If editing is turned off, the selection is toggled\n  //   * `space key` allows you toggle the selection of the cell\n  // * Arrow key navigation is required\n\n  const resetEditing = useCallback(\n    (\n      {\n        resetIsEditing = false,\n        resetEditValue = false,\n      }: { resetIsEditing?: boolean; resetEditValue?: boolean } = {\n        resetIsEditing: true,\n        resetEditValue: true,\n      }\n    ) => {\n      setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n        if (resetIsEditing) obj_draft.isEditing = false;\n        if (resetEditValue) obj_draft.editValue = undefined;\n      });\n    },\n    [rowIndex, columnIndex, setCellEditMapAtLoc]\n  );\n\n  const handleEsc = (e: ReactKeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key !== \"Escape\") return;\n    // Prevent default behavior\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Turn off editing and the _temp_ edit value\n    resetEditing();\n    selection.focusOffset(rowId, 0);\n  };\n  const handleTab = (e: ReactKeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key !== \"Tab\") return;\n    // Prevent default behavior\n    e.preventDefault();\n    e.stopPropagation();\n\n    const hasShift = e.shiftKey;\n\n    let nextColumnIndex = columnIndex;\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      const newColumnIndex = nextColumnIndex + (hasShift ? -1 : 1);\n\n      if (newColumnIndex < 0 || newColumnIndex >= coldefs.length) {\n        // If the new column index is out of bounds, quit\n        return;\n      }\n\n      nextColumnIndex = newColumnIndex;\n      // Repeat until the loop if the next column is not an HTML column\n      if (coldefs[newColumnIndex]!.meta!.isHtmlColumn !== true) {\n        break;\n      }\n    }\n\n    // Submit changes to the current cell\n    attemptUpdate();\n\n    // Turn on editing in next cell!\n    setCellEditMapAtLoc(rowIndex, nextColumnIndex, (obj_draft) => {\n      obj_draft.isEditing = true;\n    });\n  };\n  // TODO future: Make Cmd-Enter add a newline in a cell.\n  const handleEnter = (e: ReactKeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key !== \"Enter\") return;\n    // Prevent default behavior\n    e.preventDefault();\n    e.stopPropagation();\n\n    const hasShift = e.shiftKey;\n\n    const rowModel = getSortedRowModel();\n    const sortedRowIndex = rowModel.rows.findIndex((row) => row.id === rowId);\n    // Couldn't find row... silently quit\n    if (sortedRowIndex < 0) {\n      return;\n    }\n    const nextSortedRowIndex = sortedRowIndex! + (hasShift ? -1 : 1);\n\n    if (nextSortedRowIndex < 0 || nextSortedRowIndex >= rowModel.rows.length) {\n      // If the new row index is out of bounds, quit\n      return;\n    }\n\n    // Submit changes to the current cell\n    attemptUpdate();\n\n    // Turn on editing in the next cell!\n    // Get the original row index\n    const targetRowIndex = rowModel.rows[nextSortedRowIndex]!.index;\n    setCellEditMapAtLoc(targetRowIndex, columnIndex, (obj_draft) => {\n      obj_draft.isEditing = true;\n    });\n  };\n\n  const onInputKeyDown = (e: ReactKeyboardEvent<HTMLTextAreaElement>) => {\n    [handleEsc, handleEnter, handleTab].forEach((fn) => fn(e));\n  };\n\n  const attemptUpdate = useCallback(() => {\n    // Reset error title\n    setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n      obj_draft.errorTitle = undefined;\n    });\n\n    // Only update if the string form of the value has changed\n    if (`${getCellValueText(cellValue)}` === `${editValue}`) {\n      // Reset all edit info\n      resetEditing();\n      // Set state to prior cell state\n      setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n        obj_draft.state = cellState;\n      });\n      return;\n    }\n\n    // Only turn off editing for cell; Maintain all other edit info\n    resetEditing({ resetIsEditing: true });\n\n    // Set state to saving\n    setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n      obj_draft.state = CellStateEnum.EditSaving;\n    });\n\n    // Update the data!\n    // updateCellsData updates the underlying data via `setData` and `setCellEditMapAtLoc`\n    updateCellsData({\n      patchInfo: patchInfo,\n      patches: [{ rowIndex, columnIndex, value: editValue }],\n      onSuccess: (_patches) => {\n        // Reset `editValue`\n        resetEditing({ resetEditValue: true });\n\n        // console.log(\"Success!!\");\n      },\n      onError: (_err) => {\n        // console.log(\"Error!!\", _err);\n        // // Do not reset edit value here so that users can \"restore\" their prior edit value\n        // resetEditing({ resetEditValue: true });\n      },\n      columns,\n      setData,\n      setCellEditMapAtLoc,\n    });\n  }, [\n    setCellEditMapAtLoc,\n    rowIndex,\n    columnIndex,\n    cellValue,\n    editValue,\n    resetEditing,\n    patchInfo,\n    columns,\n    setData,\n    cellState,\n  ]);\n\n  // Select the input when it becomes editable\n  useEffect(() => {\n    if (!isEditing) return;\n    if (!inputRef.current) return;\n\n    inputRef.current.focus();\n    inputRef.current.select();\n  }, [isEditing]);\n\n  // When editing a cell, set up a global click listener to reset edit info when\n  // clicking outside of the cell\n  // Use MouseDown event to match how selection is performed to prevent the click from bubbling up\n  useEffect(() => {\n    if (!isEditing) return;\n    if (!tdRef.current) return;\n    if (!inputRef.current) return;\n\n    // TODO-barret; Restore cursor position and text selection here\n\n    const onEdtingCellMouseDown = (e: MouseEvent) => {\n      if (!tdRef.current?.contains(e.target as Node)) return;\n      // Prevent the click from bubbling up to the body click listener\n      e.stopPropagation();\n\n      // Do not stop the event from preventing default as we need the click to work for the text area!\n      // e.preventDefault();\n    };\n    const curRef = tdRef.current; // Capture the current ref\n    curRef.addEventListener(\"mousedown\", onEdtingCellMouseDown);\n\n    // Set up global click listener to reset edit info\n    const onBodyMouseDown = (e: MouseEvent) => {\n      if (e.target === inputRef.current) return;\n\n      attemptUpdate();\n      // Turn off editing for this cell\n      resetEditing();\n    };\n    document.body.addEventListener(\"mousedown\", onBodyMouseDown);\n\n    // Tear down global click listener when we're done\n    return () => {\n      curRef.removeEventListener(\"mousedown\", onEdtingCellMouseDown);\n      document.body.removeEventListener(\"mousedown\", onBodyMouseDown);\n    };\n  }, [\n    cellState,\n    attemptUpdate,\n    rowIndex,\n    columnIndex,\n    isEditing,\n    resetEditing,\n  ]);\n\n  // Reselect the input when it comes into view!\n  // (It could be scrolled out of view and then back into view)\n  function onFocus(e: ReactFocusEvent<HTMLTextAreaElement>) {\n    if (isEditing) {\n      e.target.select();\n    }\n  }\n\n  function onChange(e: ReactChangeEvent<HTMLTextAreaElement>) {\n    // Update edit value to cell map\n    setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n      obj_draft.editValue = e.target.value;\n    });\n  }\n\n  // // https://medium.com/@oherterich/creating-a-textarea-with-dynamic-height-using-react-and-typescript-5ed2d78d9848\n  // // Updates the height of a <textarea> when the value changes.\n  // const useAutosizeTextArea = (\n  //   textAreaRef: HTMLTextAreaElement | null,\n  //   value: string\n  // ) => {\n  //   useEffect(() => {\n  //     if (textAreaRef) {\n  //       // We need to reset the height momentarily to get the correct scrollHeight for the textarea\n  //       textAreaRef.style.height = \"0px\";\n  //       const scrollHeight = textAreaRef.scrollHeight;\n\n  //       // We then set the height directly, outside of the render loop\n  //       // Trying to set this with state or a ref will product an incorrect value.\n  //       textAreaRef.style.height = scrollHeight + \"px\";\n  //     }\n  //   }, [textAreaRef, value]);\n  // };\n  // useAutosizeTextArea(inputRef.current, value as string);\n\n  let onCellDoubleClick:\n    | ((e: ReactMouseEvent<HTMLTableCellElement>) => void)\n    | undefined = undefined;\n  let content: ReactElement | ReturnType<typeof flexRender> | undefined =\n    undefined;\n  const cellTitle = errorTitle;\n  let tableCellClass: string | undefined = cellClassName;\n  const addToTableCellClass = (x: string | undefined) => {\n    if (!x) return;\n    if (tableCellClass) {\n      tableCellClass += \" \";\n      tableCellClass += x;\n    } else {\n      tableCellClass = x;\n    }\n  };\n  addToTableCellClass(\n    CellStateClassEnum[isEditing ? CellStateEnum.Editing : cellState]\n  );\n  let attemptRenderAsync = false;\n\n  let editContent: ReactElement | null = null;\n  if (cellState === CellStateEnum.EditSaving) {\n    // If saving, do not allow any clicks or edits\n    content = editValue as string;\n  } else {\n    if (isEditing) {\n      editContent = (\n        <textarea\n          value={String(editValue)}\n          onChange={onChange}\n          // onBlur={onBlur}\n          onFocus={onFocus}\n          onKeyDown={onInputKeyDown}\n          ref={inputRef}\n          // style={{ width: \"100%\", height: \"100%\" }}\n        />\n      );\n    } else if (isHtmlColumn) {\n      addToTableCellClass(\"cell-html\");\n    } else {\n      // `isEditing` is `false` and not an HTML column, so we can allow for double clicks to go into edit mode\n\n      // Only allow transition to edit mode if the cell can be edited\n      if (editCellsIsAllowed) {\n        addToTableCellClass(\"cell-editable\");\n        onCellDoubleClick = (e: ReactMouseEvent<HTMLTableCellElement>) => {\n          // Do not prevent default or stop propagation here!\n          // Other methods need to be able to handle the event as well. e.g. `onBodyClick` above.\n          // e.preventDefault();\n          // e.stopPropagation();\n\n          // Set this cell to editing mode\n          setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n            obj_draft.isEditing = true;\n            obj_draft.editValue = getCellValueText(cellValue) as string;\n          });\n        };\n      }\n    }\n    if (isShinyHtml(cellValue)) {\n      attemptRenderAsync = true;\n    } else {\n      // Render cell contents like normal\n      content = flexRender(cell.column.columnDef.cell, cell.getContext());\n    }\n  }\n\n  useEffect(() => {\n    if (!tdRef.current) return;\n    if (!attemptRenderAsync) return;\n    if (!isShinyHtml(cellValue)) return;\n\n    // TODO-future; Use faster way to make a deep copy\n    const cellValueObjDeepCopy = JSON.parse(JSON.stringify(cellValue.obj));\n    // Render the Shiny content asynchronously to the table's cell\n    window.Shiny.renderContentAsync(tdRef.current, cellValueObjDeepCopy);\n\n    const curTdRef = tdRef.current;\n\n    return () => {\n      // Unbind all Shiny inputs and outputs within the cell\n      window.Shiny.unbindAll!(curTdRef);\n      // Remove DOM elements from cell inserted by `window.Shiny.renderContentAsync`\n      curTdRef.replaceChildren(\"\");\n    };\n  }, [tdRef, cellValue, rowIndex, columnIndex, attemptRenderAsync]);\n\n  return (\n    <td\n      ref={tdRef}\n      onDoubleClick={onCellDoubleClick}\n      title={cellTitle}\n      className={tableCellClass}\n      style={{ ...cellStyle }}\n    >\n      {editContent}\n      {content}\n    </td>\n  );\n};\n\n// // TODO-barret; Consider using https://www.npmjs.com/package/react-contenteditable !\n// const cellValue = cell.getValue();\n// const cellValueType = typeof cellValue;\n// const cellContentIsEditable =\n//   cellValueType === \"string\" ||\n//   cellValueType === \"number\" ||\n//   cellValueType === \"boolean\" ||\n//   cellValueType === \"undefined\" ||\n//   cellValue === null;\n// if (cellContentIsEditable) {\n//   // cellContentEditable = \"\"plaintext-only\";\n//   cellContentEditable = true;\n// }\n// const onInput = (e: ReactChangeEvent<HTMLTableCellElement>) => {\n//   console.log(\"on input!\", e, rowIndex, columnIndex, e.target.textContent);\n// };\n// td attrs for below\n// contentEditable={cellContentEditable}\n// onInput={onInput}\n", "import { enableMapSet } from \"immer\";\nimport { DraftFunction, Updater, useImmer } from \"use-immer\";\nimport type { CellState } from \"./cell\";\n\n// const [cellEditMap, setCellEditMap] = useImmer<\n//   Map<string, { value: string; state: CellState; save_error?: string }>\n// >(new Map<string, { value: string; state: CellState }>());\n// enableMapSet();\n\nexport type CellEdit = {\n  // rowIndex: number;\n  // columnIndex: number;\n  value?: string;\n  state?: CellState;\n  errorTitle?: string;\n  isEditing?: boolean;\n  editValue?: string;\n  // selection location info\n  // cursor position info\n};\nexport type CellEditMap = Map<string, CellEdit>;\nexport type SetCellEditMap = Updater<CellEditMap>;\nexport type SetCellEditMapAtLoc = (\n  rowIndex: number,\n  columnIndex: number,\n  obj_fn: DraftFunction<CellEdit>\n) => void;\nexport const useCellEditMap = () => {\n  const [cellEditMap, setCellEditMap] = useImmer<CellEditMap>(\n    new Map<string, CellEdit>()\n  );\n  enableMapSet();\n  const setCellEditMapAtLoc: SetCellEditMapAtLoc = (\n    rowIndex: number,\n    columnIndex: number,\n    obj_fn: DraftFunction<CellEdit>\n  ) => {\n    setCellEditMap((draft) => {\n      const key = makeCellEditMapKey(rowIndex, columnIndex);\n      const obj = draft.get(key) ?? ({} as CellEdit);\n      obj_fn(obj);\n      // obj.rowIndex = rowIndex;\n      // obj.columnIndex = columnIndex;\n      draft.set(key, obj);\n    });\n  };\n  return {\n    cellEditMap,\n    // setCellEditMap,\n    setCellEditMapAtLoc,\n    resetCellEditMap: () => {\n      setCellEditMap(new Map<string, CellEdit>());\n    },\n  } as const;\n};\n\nexport const makeCellEditMapKey = (rowIndex: number, columnIndex: number) => {\n  return `[${rowIndex}, ${columnIndex}]`;\n};\n\nexport const cellEditMapHasKey = (\n  x: CellEditMap,\n  rowIndex: number,\n  columnIndex: number\n) => {\n  return x.has(makeCellEditMapKey(rowIndex, columnIndex));\n};\nexport const getCellEditMapObj = (\n  x: CellEditMap,\n  rowIndex: number,\n  columnIndex: number\n): [CellEdit, string] => {\n  const key = makeCellEditMapKey(rowIndex, columnIndex);\n  return [x.get(key) ?? ({} as CellEdit), key];\n};\n", "// Find the first item whose top-left corner is fully inside the visible portion of the\n// scroll container\nexport function findFirstItemInView(\n  scrollContainer: HTMLElement,\n  items: NodeList | ChildNode[] | Element[] | HTMLElement[],\n  extraPadding?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  }\n) {\n  const pad = Object.assign(\n    { top: 0, right: 0, bottom: 0, left: 0 },\n    extraPadding\n  );\n  const container = scrollContainer;\n  const top = container.scrollTop + pad.top;\n  const left = container.scrollLeft + pad.left;\n  const bottom = top + container.clientHeight - pad.top - pad.bottom;\n  const right = left + container.clientWidth - pad.left - pad.right;\n\n  for (let i = 0; i < items.length; i++) {\n    const el = items[i] as HTMLElement;\n    const y = el.offsetTop,\n      x = el.offsetLeft;\n    if (y >= top && y <= bottom && x >= left && x <= right) {\n      return el;\n    }\n  }\n  return null;\n}\n\nexport function getStyle(el: Element, styleProp: string): string | undefined {\n  // getComputedStyle can return null when we're inside a hidden iframe on\n  // Firefox; don't attempt to retrieve style props in this case.\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  return document?.defaultView\n    ?.getComputedStyle(el, null)\n    ?.getPropertyValue(styleProp);\n}\n", "import React, { FC, useEffect, useRef, useState } from \"react\";\n\nexport interface FilterNumericProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  // The absolute min/max possible values\n  range: () => [number | undefined, number | undefined];\n\n  // The currently selected min/max values\n  from: number | undefined;\n  to: number | undefined;\n\n  onRangeChange: (from?: number, to?: number) => void;\n}\n\nexport const FilterNumeric: FC<FilterNumericProps> = (props) => {\n  const [editing, setEditing] = useState(false);\n  const { range, from, to, onRangeChange } = props;\n\n  return (\n    <FilterNumericImpl\n      range={range}\n      value={[from, to]}\n      editing={editing}\n      onValueChange={(x) => onRangeChange(...x)}\n      onFocus={() => setEditing(true)}\n      onBlur={() => setEditing(false)}\n    />\n  );\n};\n\nfunction generateLabel(from?: number, to?: number) {\n  if (typeof from === \"undefined\" && typeof to === \"undefined\") {\n    return \"\";\n  } else if (typeof from === \"undefined\") {\n    return `\u2264 ${to}`;\n  } else if (typeof to === \"undefined\") {\n    return `\u2265 ${from}`;\n  } else {\n    return `\u2265${from}, \u2264${to}`;\n  }\n}\n\ninterface FilterNumericImplProps {\n  range: () => [number | undefined, number | undefined];\n  value: [number | undefined, number | undefined];\n  editing: boolean;\n  onValueChange: (range: [number | undefined, number | undefined]) => void;\n  onFocus: () => void;\n  onBlur: () => void;\n}\n\nconst FilterNumericImpl: React.FC<FilterNumericImplProps> = (props) => {\n  const [min, max] = props.value;\n  const { editing, onFocus } = props;\n  const [rangeMin, rangeMax] = props.range();\n\n  const minInputRef = useRef<HTMLInputElement>(null);\n  const maxInputRef = useRef<HTMLInputElement>(null);\n\n  return (\n    <div\n      onBlur={(e) => {\n        if (e.currentTarget.contains(e.relatedTarget)) {\n          return;\n        }\n        return props.onBlur();\n      }}\n      onFocus={() => onFocus()}\n      style={{\n        display: \"flex\",\n        gap: \"0.5rem\",\n      }}\n    >\n      <input\n        ref={minInputRef}\n        className={`form-control form-control-sm ${\n          minInputRef.current?.checkValidity() ? \"\" : \"is-invalid\"\n        }`}\n        style={{ flex: \"1 1 0\", width: \"0\" }}\n        type=\"number\"\n        placeholder={createPlaceholder(editing, \"Min\", rangeMin)}\n        defaultValue={min}\n        // min={rangeMin}\n        // max={rangeMax}\n        step=\"any\"\n        onChange={(e) => {\n          const value = coerceToNum(e.target.value);\n          if (!minInputRef.current) return;\n          minInputRef.current.classList.toggle(\n            \"is-invalid\",\n            !e.target.checkValidity()\n          );\n          props.onValueChange([value, max]);\n        }}\n      />\n      <input\n        ref={maxInputRef}\n        className={`form-control form-control-sm ${\n          maxInputRef.current?.checkValidity() ? \"\" : \"is-invalid\"\n        }`}\n        style={{ flex: \"1 1 0\", width: \"0\" }}\n        type=\"number\"\n        placeholder={createPlaceholder(editing, \"Max\", rangeMax)}\n        defaultValue={max}\n        // min={rangeMin}\n        // max={rangeMax}\n        step=\"any\"\n        onChange={(e) => {\n          const value = coerceToNum(e.target.value);\n          if (!maxInputRef.current) return;\n          maxInputRef.current.classList.toggle(\n            \"is-invalid\",\n            !e.target.checkValidity()\n          );\n          props.onValueChange([min, value]);\n        }}\n      />\n    </div>\n  );\n};\n\nfunction createPlaceholder(\n  editing: boolean,\n  label: string,\n  value: number | undefined\n) {\n  if (!editing) {\n    return undefined;\n  } else if (typeof value === \"undefined\") {\n    return label;\n  } else {\n    return `${label} (${value})`;\n  }\n}\n\nfunction coerceToNum(value: string): number | undefined {\n  if (value === \"\") {\n    return undefined;\n  }\n  return +value;\n}\n", "import {\n  ColumnFiltersOptions,\n  ColumnFiltersState,\n  FilterMeta,\n  Header,\n  Row,\n  getFacetedMinMaxValues,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n} from \"@tanstack/react-table\";\nimport React, { FC, useState } from \"react\";\nimport { FilterNumeric } from \"./filter-numeric\";\n\ntype FilterValueString = string;\ntype FilterValueNumeric =\n  | [number, number]\n  | [number | undefined, number]\n  | [number, number | undefined];\ntype FilterValue = FilterValueString | FilterValueNumeric;\n\nexport type { ColumnFiltersState, FilterValue };\n\nexport function useFilters<TData>(enabled: boolean | undefined): {\n  columnFilters: ColumnFiltersState;\n  setColumnFilters: React.Dispatch<React.SetStateAction<ColumnFiltersState>>;\n  columnFiltersState: { columnFilters: ColumnFiltersState };\n  filtersTableOptions: ColumnFiltersOptions<TData>;\n} {\n  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([]); // can set initial column filter state here\n\n  const filtersTableOptions = enabled\n    ? {\n        getFilteredRowModel: getFilteredRowModel<TData>(),\n        getFacetedRowModel: getFacetedRowModel<TData>(),\n        getFacetedUniqueValues: getFacetedUniqueValues<TData>(),\n        getFacetedMinMaxValues: getFacetedMinMaxValues<TData>(),\n        filterFns: {\n          substring: (\n            row: Row<TData>,\n            columnId: string,\n            value: string,\n            addMeta: (meta: FilterMeta) => void\n          ): boolean => {\n            return row.getValue(columnId)?.toString().includes(value) ?? false;\n          },\n        },\n        onColumnFiltersChange: setColumnFilters,\n      }\n    : {};\n\n  return {\n    columnFilters,\n    columnFiltersState: {\n      columnFilters,\n    },\n    filtersTableOptions,\n    setColumnFilters,\n  };\n}\n\nexport interface FilterProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  header: Header<unknown[], unknown>;\n}\n\nexport const Filter: FC<FilterProps> = ({ header, className, ...props }) => {\n  const typeHint = header.column.columnDef.meta?.typeHint;\n\n  // Do not filter on unknown types\n  if (!typeHint) return null;\n\n  // Do not filter on html types\n  if (typeHint.type === \"html\") return null;\n\n  if (typeHint.type === \"numeric\") {\n    const [from, to] = (header.column.getFilterValue() as\n      | FilterValueNumeric\n      | [undefined, undefined]\n      | undefined) ?? [undefined, undefined];\n\n    const range = () => {\n      return header.column.getFacetedMinMaxValues() ?? [undefined, undefined];\n    };\n\n    return FilterNumeric({\n      from,\n      to,\n      range,\n      onRangeChange: (from, to) => header.column.setFilterValue([from, to]),\n    });\n  }\n\n  return (\n    <input\n      {...props}\n      // If there was a value and now there isn't,\n      // set the filter value to `\"\"` and not `undefined`.\n      // `undefined` will not clear the displayed value.\n      value={(header.column.getFilterValue() as string) || \"\"}\n      className={`form-control form-control-sm ${className}`}\n      type=\"text\"\n      onChange={(e) => header.column.setFilterValue(e.target.value)}\n    />\n  );\n};\n", "export class ImmutableSet<T> {\n  private _set: Set<T>;\n  private static _empty: ImmutableSet<unknown> = new ImmutableSet(new Set());\n\n  private constructor(set: Set<T>) {\n    this._set = set;\n  }\n\n  static empty<T>(): ImmutableSet<T> {\n    return this._empty as ImmutableSet<T>;\n  }\n\n  static just<T>(...values: T[]): ImmutableSet<T> {\n    return this.empty<T>().add(...values);\n  }\n\n  has(value: T): boolean {\n    return this._set.has(value);\n  }\n\n  add(...values: T[]): ImmutableSet<T> {\n    const newSet = new Set(this._set.keys());\n    for (const value of values) {\n      newSet.add(value);\n    }\n    return new ImmutableSet(newSet);\n  }\n\n  toggle(value: T): ImmutableSet<T> {\n    if (this.has(value)) {\n      return this.delete(value);\n    } else {\n      return this.add(value);\n    }\n  }\n\n  delete(value: T): ImmutableSet<T> {\n    const newSet = new Set(this._set.keys());\n    newSet.delete(value);\n    return new ImmutableSet(newSet);\n  }\n\n  clear(): ImmutableSet<T> {\n    return ImmutableSet.empty();\n  }\n\n  [Symbol.iterator]() {\n    return this._set[Symbol.iterator]();\n  }\n\n  toList(): T[] {\n    return [...this._set.keys()];\n  }\n}\n", "import * as React from \"react\";\nimport { useState } from \"react\";\nimport { ImmutableSet } from \"./immutable-set\";\n\nimport { CellStateClassEnum, CellStateEnum } from \"./cell\";\nimport type { ValueOf } from \"./types\";\n\ntype CellSelectionNone = { type: \"none\" };\ntype CellSelectionRow = { type: \"row\"; rows: readonly number[] };\ntype CellSelectionCol = { type: \"col\"; cols: readonly number[] };\ntype CellSelectionRect = {\n  type: \"rect\";\n  rows: readonly [number, number];\n  cols: readonly [number, number];\n};\n\n// For sending and receiving selection info to python\nexport type CellSelection =\n  | CellSelectionNone\n  | CellSelectionRow\n  | CellSelectionCol\n  | CellSelectionRect;\n\nexport interface SelectionSet<TKey, TElement extends HTMLElement> {\n  has(key: TKey): boolean;\n  set(key: TKey, selected: boolean): void;\n  setMultiple(key_arr: TKey[]): void;\n  clear(): void;\n  keys(): ImmutableSet<TKey>;\n  itemHandlers(): {\n    onMouseDown: (event: React.MouseEvent<TElement, MouseEvent>) => void;\n    onKeyDown: (event: React.KeyboardEvent<TElement>) => void;\n  };\n  focusOffset: (start: TKey, offset: number) => TKey | null;\n}\n\n// Keep as strings (and not pointer types) as this is a shape defined by the python side\nexport type SelectionModesProp = {\n  row: \"none\" | \"single\" | \"multiple\";\n  col: \"none\" | \"single\" | \"multiple\";\n  rect: \"none\" | \"cell\" | \"region\";\n};\nexport class SelectionModes {\n  static readonly _NONE = \"none\";\n  static readonly _ROW_SINGLE = \"single\";\n  static readonly _ROW_MULTIPLE = \"multiple\";\n  static readonly _COL_SINGLE = \"single\";\n  static readonly _col_multiple = \"multiple\";\n  static readonly _RECT_CELL = \"cell\";\n  static readonly _RECT_REGION = \"region\";\n\n  static readonly _rowEnum = {\n    NONE: SelectionModes._NONE,\n    SINGLE: SelectionModes._ROW_SINGLE,\n    MULTIPLE: SelectionModes._ROW_MULTIPLE,\n  } as const;\n  static readonly _colEnum = {\n    NONE: SelectionModes._NONE,\n    SINGLE: SelectionModes._COL_SINGLE,\n    MULTIPLE: SelectionModes._col_multiple,\n  } as const;\n  static readonly _rectEnum = {\n    NONE: SelectionModes._NONE,\n    REGION: SelectionModes._RECT_REGION,\n    CELL: SelectionModes._RECT_CELL,\n  } as const;\n\n  row: ValueOf<typeof SelectionModes._rowEnum>;\n  col: ValueOf<typeof SelectionModes._colEnum>;\n  rect: ValueOf<typeof SelectionModes._rectEnum>;\n\n  constructor({\n    row,\n    col,\n    rect,\n  }: {\n    row: SelectionModesProp[\"row\"];\n    col: SelectionModesProp[\"col\"];\n    rect: SelectionModesProp[\"rect\"];\n  }) {\n    if (!Object.values(SelectionModes._rowEnum).includes(row)) {\n      throw new Error(`Invalid row selection mode: ${row}`);\n    }\n    if (!Object.values(SelectionModes._colEnum).includes(col)) {\n      throw new Error(`Invalid col selection mode: ${col}`);\n    }\n    if (!Object.values(SelectionModes._rectEnum).includes(rect)) {\n      throw new Error(`Invalid rect selection mode: ${rect}`);\n    }\n    this.row = row;\n    this.col = col;\n    this.rect = rect;\n  }\n\n  isNone(): boolean {\n    return (\n      this.row === SelectionModes._rowEnum.NONE &&\n      this.col === SelectionModes._colEnum.NONE &&\n      this.rect === SelectionModes._rectEnum.NONE\n    );\n  }\n}\n\nexport function initSelectionModes(\n  selectionModesOption: SelectionModesProp | undefined\n): SelectionModes {\n  // If no option was provided, default to multinative mode\n  if (!selectionModesOption) {\n    selectionModesOption = { row: \"multiple\", col: \"none\", rect: \"none\" };\n  }\n  return new SelectionModes({\n    row: selectionModesOption.row,\n    col: selectionModesOption.col,\n    rect: selectionModesOption.rect,\n  });\n}\n\nexport function useSelection<TKey, TElement extends HTMLElement>({\n  isEditingCell,\n  editCellsIsAllowed,\n  selectionModes,\n  keyAccessor,\n  focusOffset,\n  focusEscape,\n  onKeyDownEnter,\n  between,\n}: {\n  // cellBeingEdited: { rowIndex: number; columnIndex: number } | null;\n  isEditingCell: boolean;\n  editCellsIsAllowed: boolean;\n  selectionModes: SelectionModes;\n  keyAccessor: (el: TElement) => TKey;\n  focusOffset: (start: TKey, offset: number) => TKey | null;\n  focusEscape: (el: TElement) => void;\n  onKeyDownEnter: (el: TElement) => void;\n  between: (from: TKey, to: TKey) => ReadonlyArray<TKey>;\n}): SelectionSet<TKey, TElement> {\n  const [selectedKeys, setSelectedKeys] = useState<ImmutableSet<TKey>>(\n    ImmutableSet.empty()\n  );\n\n  // The anchor is the item that was most recently selected with a click or ctrl-click,\n  // and is used to determine the \"other end\" of a shift-click selection operation.\n  const [anchor, setAnchor] = useState<TKey | null>(null);\n\n  const onMouseDown = (event: React.MouseEvent<TElement, MouseEvent>): void => {\n    if (selectionModes.isNone()) {\n      return;\n    }\n\n    const el = event.currentTarget as TElement;\n    const key = keyAccessor(el);\n    if (isEditingCell) {\n      // Only quit early if that cell is in edit mode\n      if (el.classList.contains(CellStateClassEnum[CellStateEnum.Editing])) {\n        return;\n      }\n    }\n\n    const result = performMouseDownAction<TKey, TElement>(\n      selectionModes,\n      between,\n      selectedKeys,\n      event,\n      key,\n      anchor\n    );\n    if (result) {\n      setSelectedKeys(result.selection);\n      if (result.anchor) {\n        setAnchor(key);\n        el.focus();\n      }\n      event.preventDefault();\n    }\n  };\n\n  const onKeyDown = (event: React.KeyboardEvent<TElement>): void => {\n    if (isEditingCell) {\n      return;\n    }\n    if (selectionModes.isNone()) {\n      return;\n    }\n\n    const el = event.currentTarget as TElement;\n    const key = keyAccessor(el);\n    const selected = selectedKeys.has(key);\n\n    if (event.key === \"Escape\") {\n      focusEscape(el);\n      event.preventDefault();\n      return;\n    }\n\n    // For both row and rows, do not allow for alphanumeric keys to trigger edit mode.\n    // Only allow for this once the anchor is a single cell, such as region selection.\n    // For region selection, allow for alphanumeric keys to trigger edit mode of current cell.\n    // For region selection, allow for enter key to trigger edit mode of current cell.\n\n    if (selectionModes.row === SelectionModes._rowEnum.SINGLE) {\n      if (event.key === \" \" || event.key === \"Enter\") {\n        event.preventDefault();\n        if (editCellsIsAllowed && event.key === \"Enter\") {\n          onKeyDownEnter(el);\n        } else {\n          if (selectedKeys.has(key)) {\n            setSelectedKeys(ImmutableSet.empty());\n          } else {\n            setSelectedKeys(ImmutableSet.just(key));\n          }\n        }\n      } else if (event.key === \"ArrowUp\" || event.key === \"ArrowDown\") {\n        const targetKey = focusOffset(key, event.key === \"ArrowUp\" ? -1 : 1);\n        if (targetKey) {\n          event.preventDefault();\n          if (selected) {\n            setSelectedKeys(ImmutableSet.just(targetKey));\n          }\n        }\n      }\n    } else if (selectionModes.row === SelectionModes._rowEnum.MULTIPLE) {\n      if (event.key === \" \" || event.key === \"Enter\") {\n        event.preventDefault();\n        if (editCellsIsAllowed && event.key === \"Enter\") {\n          onKeyDownEnter(el);\n        } else {\n          setSelectedKeys(selectedKeys.toggle(key));\n        }\n      } else if (event.key === \"ArrowUp\" || event.key === \"ArrowDown\") {\n        if (focusOffset(key, event.key === \"ArrowUp\" ? -1 : 1)) {\n          event.preventDefault();\n        }\n      }\n    }\n  };\n\n  const selection = {\n    has(key: TKey): boolean {\n      return selectedKeys.has(key);\n    },\n\n    set(key: TKey, selected: boolean) {\n      if (selected) {\n        setSelectedKeys(selectedKeys.add(key));\n      } else {\n        setSelectedKeys(selectedKeys.delete(key));\n      }\n    },\n\n    setMultiple(keyArr: TKey[]) {\n      setSelectedKeys(ImmutableSet.just(...keyArr));\n    },\n\n    clear() {\n      setSelectedKeys(selectedKeys.clear());\n    },\n\n    keys() {\n      return selectedKeys;\n    },\n\n    itemHandlers() {\n      return { onMouseDown, onKeyDown };\n    },\n\n    focusOffset,\n  };\n\n  return selection;\n}\n\ndeclare global {\n  interface Navigator {\n    readonly userAgentData?: NavigatorUAData;\n  }\n  interface NavigatorUAData {\n    readonly brands?: { brand: string; version: string }[];\n    readonly mobile?: boolean;\n    readonly platform?: string;\n  }\n}\n\nconst isMac = /^mac/i.test(\n  window.navigator.userAgentData?.platform ?? window.navigator.platform\n);\n\nfunction performMouseDownAction<TKey, TElement>(\n  selectionModes: SelectionModes,\n  between: ((from: TKey, to: TKey) => readonly TKey[]) | undefined,\n  selectedKeys: ImmutableSet<TKey>,\n  event: React.MouseEvent<TElement, MouseEvent>,\n  key: TKey,\n  anchor: TKey | null\n): { selection: ImmutableSet<TKey>; anchor?: true } | null {\n  const { shiftKey, altKey } = event;\n  const ctrlKey = isMac ? event.metaKey : event.ctrlKey;\n  const metaKey = isMac ? event.ctrlKey : event.metaKey;\n\n  if (metaKey || altKey) {\n    return null;\n  }\n\n  if (selectionModes.row === SelectionModes._rowEnum.NONE) {\n    return null;\n  } else if (selectionModes.row === SelectionModes._rowEnum.SINGLE) {\n    if (ctrlKey && !shiftKey) {\n      // Ctrl-click is like simple click, except it removes selection if an item is\n      // already selected\n      if (selectedKeys.has(key)) {\n        return { selection: ImmutableSet.empty(), anchor: true };\n      } else {\n        return { selection: ImmutableSet.just(key), anchor: true };\n      }\n    } else {\n      // Simple click sets selection, always\n      return { selection: ImmutableSet.just(key), anchor: true };\n    }\n    // TODO-barret; multinative should be the new definition of `rows`!\n  } else if (selectionModes.row === SelectionModes._rowEnum.MULTIPLE) {\n    if (shiftKey && ctrlKey) {\n      // Ctrl-Shift-click: Add anchor row through current row to selection\n      if (anchor !== null && between) {\n        const toSelect = between(anchor, key);\n        return { selection: selectedKeys.add(...toSelect) };\n      }\n    } else if (ctrlKey) {\n      // Ctrl-click: toggle the current row and make it anchor\n      return { selection: selectedKeys.toggle(key), anchor: true };\n    } else if (shiftKey) {\n      // Shift-click: replace selection with anchor row through current row\n      if (anchor !== null && between) {\n        const toSelect = between(anchor, key);\n        return { selection: ImmutableSet.just(...toSelect) };\n      }\n    } else {\n      // Regular click: Select the current row and make it anchor\n      return { selection: ImmutableSet.just(key), anchor: true };\n    }\n  } else {\n    throw new Error(`Unsupported row selection mode: ${selectionModes.row}`);\n  }\n  return null;\n}\n", "import {\n  SortingOptions,\n  SortingState,\n  getSortedRowModel,\n} from \"@tanstack/react-table\";\nimport React, { useState } from \"react\";\n\nimport type { ColumnDef, ColumnSort, Updater } from \"@tanstack/react-table\";\n\nexport type { ColumnSort, SortingState };\n\nexport function useSort<TData>({\n  getColDefs,\n}: {\n  getColDefs: () => ColumnDef<unknown[], unknown>[];\n}): {\n  sorting: SortingState;\n  setSorting: React.Dispatch<React.SetStateAction<SortingState>>;\n  sortTableStateOptions: { sorting: SortingState };\n  sortTableOptions: SortingOptions<TData>;\n} {\n  const [sorting, setSorting] = useState<SortingState>([]);\n\n  return {\n    sorting,\n    sortTableStateOptions: {\n      sorting,\n    },\n    sortTableOptions: {\n      onSortingChange: (sortUpdater: Updater<SortingState>) => {\n        const newSorting: SortingState =\n          typeof sortUpdater === \"function\"\n            ? sortUpdater(sorting)\n            : sortUpdater;\n        const coldefs = getColDefs();\n        const htmlColumnsSet = new Set(\n          coldefs\n            .filter((col) => col.meta!.isHtmlColumn)\n            .map((col) => col.header!)\n        );\n\n        const filteredSort =\n          htmlColumnsSet.size == 0\n            ? newSorting\n            : newSorting.filter((sort) => {\n                return !htmlColumnsSet.has(sort.id);\n              });\n\n        setSorting(filteredSort);\n      },\n      getSortedRowModel: getSortedRowModel(),\n    },\n    setSorting,\n  };\n}\n", "import { SortDirection } from \"@tanstack/react-table\";\nimport React, { FC } from \"react\";\n\nconst sortClassName = \"sort-arrow\";\nconst sortCommonProps = {\n  viewBox: [-1, -1, 2, 2].map((x) => x * 1.4).join(\" \"),\n  width: \"100%\",\n  height: \"100%\",\n  style: { paddingLeft: \"3px\" },\n};\n\nconst sortPathCommonProps = {\n  stroke: \"#333333\",\n  strokeWidth: \"0.6\",\n  fill: \"transparent\",\n};\n\nconst sortArrowUp = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...{ ...sortCommonProps, className: `${sortClassName} sort-arrow-up` }}\n  >\n    <path\n      d=\"M -1 0.5 L 0 -0.5 L 1 0.5\"\n      {...sortPathCommonProps}\n      strokeLinecap=\"round\"\n    />\n  </svg>\n);\n\nconst sortArrowDown = (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    {...{ ...sortCommonProps, className: `${sortClassName} sort-arrow-down` }}\n  >\n    <path\n      d=\"M -1 -0.5 L 0 0.5 L 1 -0.5\"\n      {...sortPathCommonProps}\n      strokeLinecap=\"round\"\n    />\n  </svg>\n);\n\ninterface SortArrowProps {\n  direction: SortDirection | false;\n}\n\nexport const SortArrow: FC<SortArrowProps> = ({ direction }) => {\n  if (!direction) {\n    return null;\n  }\n  if (direction === \"asc\") {\n    return sortArrowUp;\n  }\n  if (direction === \"desc\") {\n    return sortArrowDown;\n  }\n  throw new Error(`Unexpected sort direction: '${direction}'`);\n};\n\n//const sortArrowUp = <span className=\"sort-arrow sort-arrow-up\"> \u25B2</span>;\n//const sortArrowDown = <span className=\"sort-arrow sort-arrow-down\"> \u25BC</span>;\n", "// This file is oddly close to `useCellEditMap.tsx`\n\nimport { enableMapSet } from \"immer\";\nimport { useCallback, useEffect } from \"react\";\nimport { Updater, useImmer } from \"use-immer\";\n\nenableMapSet();\n\nexport type CellStyle = { [key: string]: string | null };\n\ntype StyleInfoBody = {\n  location: \"body\";\n  rows: number[] | null;\n  cols: number[] | null;\n  style?: CellStyle;\n  class?: string;\n};\nexport type StyleInfo = StyleInfoBody;\n// export type Styles = StyleInfo[];\n\ntype StyleInfoStoredBody = {\n  location: \"body\";\n  rowIndex: number;\n  columnIndex: number;\n  style?: CellStyle;\n  class?: string;\n};\nexport type StyleInfoStored = StyleInfoStoredBody;\n\ntype StyleLocation = StyleInfo[\"location\"];\n\nexport type StyleInfoMap = Map<string, StyleInfoStored>;\n\nexport const makeStyleInfoMapKey = ({\n  location,\n  rowIndex,\n  columnIndex,\n}: {\n  location: StyleLocation;\n  rowIndex: number;\n  columnIndex: number;\n}) => {\n  return `[${location}, ${rowIndex}, ${columnIndex}]`;\n};\n\nexport type SetStyleInfoStoredMap = Updater<StyleInfoMap>;\nexport type SetStyleInfo = (style: StyleInfo) => void;\nexport type SetStyleInfos = (style: StyleInfo[]) => void;\nexport type ResetStyleInfos = () => void;\n/**\n *\n * @param initStyleInfos Array of initial style information\n * @returns {{styleInfoMap: StyleInfoMap, setStyleInfo: SetStyleInfo}} where `styleInfoMap` is a map of style information and `setStyleInfo` is a function to update the map\n */\nexport const useStyleInfoMap = ({\n  initStyleInfos,\n  nrow,\n  ncol,\n}: {\n  initStyleInfos: StyleInfo[];\n  nrow: number;\n  ncol: number;\n}): {\n  styleInfoMap: StyleInfoMap;\n  setStyleInfo: SetStyleInfo;\n  setStyleInfos: SetStyleInfos;\n  resetStyleInfos: ResetStyleInfos;\n} => {\n  const [styleInfoMap, setStyleInfoMap] = useImmer<StyleInfoMap>(\n    new Map<string, StyleInfoStored>()\n  );\n  const setStyleInfo: SetStyleInfo = useCallback(\n    (styleInfo: StyleInfo) => {\n      const { location, rows, cols } = styleInfo;\n\n      setStyleInfoMap((draft) => {\n        const rowArr = rows ?? Array.from({ length: nrow }, (_, i) => i);\n        const colArr = cols ?? Array.from({ length: ncol }, (_, j) => j);\n        for (const rowIndex of rowArr) {\n          for (const columnIndex of colArr) {\n            const key = makeStyleInfoMapKey({\n              location,\n              rowIndex,\n              columnIndex,\n            });\n            const prevObj = draft.get(key) ?? { style: {}, class: undefined };\n            let newClass: string | undefined = undefined;\n            if (prevObj.class) {\n              if (styleInfo.class) {\n                newClass = `${prevObj.class} ${styleInfo.class}`;\n              } else {\n                newClass = prevObj.class;\n              }\n            } else {\n              if (styleInfo.class) {\n                newClass = styleInfo.class;\n              } else {\n                newClass = undefined;\n              }\n            }\n            draft.set(key, {\n              location,\n              rowIndex,\n              columnIndex,\n              style: {\n                ...prevObj.style,\n                ...styleInfo.style,\n              },\n              class: newClass,\n            });\n          }\n        }\n      });\n    },\n    [ncol, nrow, setStyleInfoMap]\n  );\n\n  const resetStyleInfos = useCallback(() => {\n    setStyleInfoMap((draft) => {\n      draft.clear();\n    });\n  }, [setStyleInfoMap]);\n\n  const setStyleInfos = useCallback(\n    (styleInfos: StyleInfo[]) => {\n      // When settings styleInfos, reset all style infos\n      resetStyleInfos();\n      for (const styleInfo of styleInfos) {\n        setStyleInfo(styleInfo);\n      }\n    },\n    [setStyleInfo, resetStyleInfos]\n  );\n\n  // Init all style infos\n  useEffect(() => {\n    setStyleInfos(initStyleInfos);\n  }, [initStyleInfos, setStyleInfos]);\n\n  return {\n    styleInfoMap,\n    setStyleInfo,\n    setStyleInfos,\n    resetStyleInfos,\n  } as const;\n};\n\nexport const styleInfoMapHasKey = (\n  x: StyleInfoMap,\n  location: StyleLocation,\n  rowIndex: number,\n  columnIndex: number\n) => {\n  return x.has(makeStyleInfoMapKey({ location, rowIndex, columnIndex }));\n};\nexport const getCellStyle = (\n  x: StyleInfoMap,\n  location: StyleLocation,\n  rowIndex: number,\n  columnIndex: number\n): { cellStyle: CellStyle | undefined; cellClassName: string | undefined } => {\n  const key = makeStyleInfoMapKey({ location, rowIndex, columnIndex });\n  const obj = x.get(key);\n  return {\n    cellStyle: obj?.style,\n    cellClassName: obj?.class,\n  };\n};\n\n// Use a DOM element to convert CSS string to object\nconst cssStringToObjDomElement = document.createElement(\"cssStringToObj\");\nfunction cssStringToObj(strVal: string): { [key: string]: string } {\n  cssStringToObjDomElement.style.cssText = strVal;\n  const style = cssStringToObjDomElement.style;\n\n  const ret: { [key: string]: string } = {};\n  Array.from(style).forEach((key) => {\n    ret[key] = style.getPropertyValue(key);\n  });\n\n  return ret;\n}\n", "export default `\n/*\n *\n * # Variables\n *\n */\nshiny-data-frame {\n  --shiny-datagrid-font-size: 0.9em;\n  --shiny-datagrid-padding-x: 0.5em;\n  --shiny-datagrid-padding-y: 0.3em;\n  --shiny-datagrid-padding: var(--shiny-datagrid-padding-y) var(--shiny-datagrid-padding-x);\n  --shiny-datagrid-grid-header-bgcolor: var(--bs-light, #eee);\n  --shiny-datagrid-grid-header-gridlines-color: var(--bs-border-color, #ccc);\n  --shiny-datagrid-grid-header-gridlines-style: solid;\n  --shiny-datagrid-grid-gridlines-color: var(--bs-border-color, #ccc);\n  --shiny-datagrid-grid-gridlines-style: solid;\n  --shiny-datagrid-table-header-bottom-border: 1px solid;\n  --shiny-datagrid-table-top-border: 1px solid;\n  --shiny-datagrid-table-bottom-border: 1px solid;\n  --shiny-datagrid-grid-body-hover-bgcolor: var(--shiny-datagrid-grid-header-bgcolor);\n  --shiny-datagrid-grid-body-selected-bgcolor: #b4d5fe;\n  --shiny-datagrid-grid-body-selected-color: var(--bs-dark);\n  --shiny-datagrid-grid-header-selected-bgcolor: color-mix(\n    in srgb,\n    var(--shiny-datagrid-grid-header-bgcolor) 30%,\n    var(--shiny-datagrid-grid-body-selected-bgcolor)\n  );\n  --shiny-datagrid-table-cell-edit-background-color: var(--bs-body-bg);\n  --shiny-datagrid-table-cell-edit-success-border-color: color-mix(in srgb, var(--bs-success) 20%, transparent);\n  --shiny-datagrid-table-cell-edit-success-border-style: var(--shiny-datagrid-grid-gridlines-style);\n  --shiny-datagrid-table-cell-edit-success-bgcolor: color-mix(in srgb, var(--bs-success) 10%, transparent);\n  --shiny-datagrid-table-cell-edit-failure-border-color: color-mix(in srgb, var(--bs-danger) 40%, transparent);\n  --shiny-datagrid-table-cell-edit-failure-border-style: var(--shiny-datagrid-grid-gridlines-style);\n  --shiny-datagrid-table-cell-edit-failure-bgcolor: color-mix(in srgb, var(--bs-danger) 10%, transparent);\n  --shiny-datagrid-table-cell-edit-saving-color: var(--bs-gray-500);\n}\n\n/*\n *\n * # BASE STYLES\n *\n */\nshiny-data-frame *,\nshiny-data-frame *::before,\nshiny-data-frame *::after {\n  box-sizing: border-box;\n}\n\nshiny-data-frame .shiny-data-grid svg.sort-arrow {\n  display: inline-block;\n  width: 0.85em;\n  height: 0.85em;\n  margin-bottom: 0.15em;\n}\n\nshiny-data-frame .shiny-data-grid {\n  max-width: 100%;\n  height: auto;\n}\nshiny-data-frame .shiny-data-grid.scrolling {\n  height: 500px;\n}\nshiny-data-frame .shiny-data-grid > table {\n  border-collapse: separate;\n  border-spacing: 0;\n}\nshiny-data-frame .shiny-data-grid > table > thead {\n  position: sticky;\n  top: 0;\n}\nshiny-data-frame .shiny-data-grid > table > thead > tr > th {\n  text-align: left;\n  white-space: nowrap;\n}\nshiny-data-frame .shiny-data-grid > table > thead > tr > th:focus-visible {\n  outline: 5px auto Highlight;\n  outline: 5px auto -webkit-focus-ring-color;\n}\nshiny-data-frame .shiny-data-grid > table.filtering > thead > tr:nth-last-child(2) > th {\n  border-bottom: none;\n}\nshiny-data-frame .shiny-data-grid > table.filtering > thead > tr.filters > th {\n  font-weight: unset;\n  padding-top: 0;\n  /* Slight boost to bottom padding */\n  padding-bottom: var(--shiny-datagrid-padding-x);\n}\nshiny-data-frame .shiny-data-grid > table.filtering > thead > tr.filters > th > input {\n  width: 100%;\n}\n\nshiny-data-frame .shiny-data-grid > .shiny-data-grid-summary {\n  font-size: var(--shiny-datagrid-font-size);\n  padding-top: 0.3em;\n}\n\n/*\n *\n * # DATATABLE STYLES\n *\n */\nshiny-data-frame .shiny-data-grid.shiny-data-grid-table {\n  border-top: var(--shiny-datagrid-table-top-border);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-table.scrolling {\n  border-bottom: var(--shiny-datagrid-table-bottom-border);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-table > table > thead > tr:last-child > th {\n  border-bottom: var(--shiny-datagrid-table-header-bottom-border);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-table > table > tbody > tr[aria-selected=true] {\n  --shiny-datagrid-grid-gridlines-color: var(--shiny-datagrid-grid-body-selected-bgcolor);\n  background-color: var(--shiny-datagrid-grid-body-selected-bgcolor);\n  color: var(--shiny-datagrid-grid-body-selected-color);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-table > table > tbody > tr[aria-selected=true] td {\n  background-color: var(--shiny-datagrid-grid-body-selected-bgcolor);\n  color: var(--shiny-datagrid-grid-body-selected-color);\n}\n\n/*\n *\n * # GRID STYLES\n *\n */\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table {\n  font-size: var(--shiny-datagrid-font-size);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > thead > tr > th,\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > thead > tr > td {\n  background-color: var(--shiny-datagrid-grid-header-bgcolor);\n  padding: var(--shiny-datagrid-padding);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr:focus-visible {\n  outline: 5px auto Highlight;\n  outline: 5px auto -webkit-focus-ring-color;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr:hover {\n  --shiny-datagrid-grid-gridlines-color: inherit;\n  background-color: var(--shiny-datagrid-grid-body-hover-bgcolor);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr[aria-selected=true] {\n  background-color: var(--shiny-datagrid-grid-body-selected-bgcolor);\n  color: var(--shiny-datagrid-grid-body-selected-color);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr > td {\n  padding: var(--shiny-datagrid-padding);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr:not([aria-selected=true]) > td.row-number {\n  background-color: var(--shiny-datagrid-grid-header-bgcolor);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr[aria-selected=true] > td.row-number {\n  background-color: var(--shiny-datagrid-grid-header-selected-bgcolor);\n}\n\n/* ## Grid borders */\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table {\n  border-collapse: separate;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > thead > tr:first-child > th {\n  border-top-style: var(--shiny-datagrid-grid-gridlines-style);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > thead > tr > th {\n  border: 1px var(--shiny-datagrid-grid-gridlines-style) var(--shiny-datagrid-grid-header-gridlines-color);\n  border-top-style: none;\n  border-left-style: none;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > thead > tr > th:first-child {\n  border-left-style: var(--shiny-datagrid-grid-gridlines-style);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr > td {\n  border: 1px var(--shiny-datagrid-grid-gridlines-style) var(--shiny-datagrid-grid-gridlines-color);\n  border-top-style: none;\n  border-left-style: none;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr > td:first-child {\n  border-left-style: var(--shiny-datagrid-grid-gridlines-style);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling {\n  border: var(--shiny-datagrid-grid-gridlines-style) 1px var(--shiny-datagrid-grid-header-gridlines-color);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling > table > thead > tr:first-child > th {\n  border-top-style: none;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling > table > tbody > tr:last-child > td {\n  border-bottom-style: none;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling > table > thead > tr > th:first-child,\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling > table > tbody > tr > td:first-child {\n  border-left-style: none;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling > table > thead > tr > th:last-child,\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling > table > tbody > tr > td:last-child {\n  border-right-style: none;\n}\n\n/*\n *\n * # FILLING LAYOUT STYLES\n *\n */\n/* Center the table when inside of a card */\n.card-body shiny-data-frame .shiny-data-grid {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n/* When .shiny-data-grid is not scrolling, the containers shouldn't flex */\nshiny-data-frame:has(> div > .shiny-data-grid:not(.scrolling)) {\n  flex: 0 0 auto;\n}\nshiny-data-frame > div:has(> .shiny-data-grid:not(.scrolling)) {\n  flex: 0 0 auto;\n}\n\nshiny-data-frame .table-corner {\n  width: 0;\n  min-width: 25px;\n}\n\n/*\n *\n * # CELL EDITING STYLES\n *\n */\nshiny-data-frame .shiny-data-grid > table > tbody > tr > td.cell-edit-editing {\n  color: transparent;\n  position: relative;\n}\nshiny-data-frame .shiny-data-grid > table > tbody > tr > td.cell-edit-editing :not(textarea) {\n  visibility: hidden;\n}\nshiny-data-frame .shiny-data-grid > table > tbody > tr > td.cell-edit-editing > textarea {\n  position: absolute;\n  padding: var(--shiny-datagrid-padding);\n  background-color: var(--shiny-datagrid-table-cell-edit-background-color);\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: none;\n  resize: none;\n}\n\nshiny-data-frame .shiny-data-grid > table > tbody > tr > td.cell-html {\n  cursor: default;\n}\nshiny-data-frame .shiny-data-grid > table > tbody > tr > td.cell-editable {\n  cursor: text;\n}\nshiny-data-frame .shiny-data-grid > table > tbody > tr > td.cell-edit-saving {\n  color: var(--shiny-datagrid-table-cell-edit-saving-color);\n  font-style: var(--shiny-datagrid-table-cell-edit-saving-font-style);\n}\nshiny-data-frame .shiny-data-grid > table > tbody > tr > td.cell-edit-failure {\n  outline: 2px var(--shiny-datagrid-table-cell-edit-failure-border-style) var(--shiny-datagrid-table-cell-edit-failure-border-color);\n  background-color: var(--shiny-datagrid-table-cell-edit-failure-bgcolor);\n}`;\n", "import React, { useState } from \"react\";\nimport { findFirstItemInView } from \"./dom-utils\";\n\nexport interface TabindexGroup<TElement extends HTMLElement> {\n  containerTabIndex: number;\n  containerHandlers: {\n    onFocus: (event: React.FocusEvent<TElement>) => void;\n    onBlur: (event: React.FocusEvent<TElement>) => void;\n  };\n}\n\nexport function useTabindexGroup<TContainerElement extends HTMLElement>(\n  container: TContainerElement | null,\n  focusableItems: () => NodeList,\n  extraPadding?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  }\n): TabindexGroup<TContainerElement> {\n  const [tabIndex, setTabIndex] = useState(0);\n\n  const onFocus = React.useCallback(\n    (event: React.FocusEvent<TContainerElement>) => {\n      // When focus is within (or on, but we only really care about within) the\n      // container, remove it from the tab order. If we don't set the tab stop to -1,\n      // then the logic below (that, on container focus, moves focus to the first item)\n      // causes Shift-Tab from a focused item to break, as focus moves to the container\n      // and then (back) to the first item.\n      setTabIndex(-1);\n\n      if (event.target !== event.currentTarget) {\n        // Not interested in capturing, only care about focus on the container itself\n        return;\n      }\n\n      findFirstItemInView(container!, focusableItems(), extraPadding)?.focus();\n    },\n    [container, focusableItems, extraPadding]\n  );\n\n  const onBlur = React.useCallback(\n    (event: React.FocusEvent<TContainerElement>) => {\n      setTabIndex(0);\n    },\n    []\n  );\n\n  return {\n    containerTabIndex: tabIndex,\n    containerHandlers: {\n      onFocus,\n      onBlur,\n    },\n  };\n}\n", "import { VirtualItem } from \"@tanstack/react-virtual\";\nimport React, { useMemo } from \"react\";\n\n/**\n * Create a summary\n *\n * @param summaryTemplate A string with \"{start}\", \"{end}\", and \"{total}\"\n * @param scrollContainer Scrolling container of the table/grid\n * @param virtualRows VirtualItem objects that might currently be visible\n * @param thead The thead tag of the table\n * @param nrows Number of total rows of data that exist\n */\nexport function useSummary(\n  summaryTemplate: string | boolean | undefined,\n  scrollContainer: HTMLElement | null,\n  virtualRows: VirtualItem<Element>[],\n  thead: HTMLTableSectionElement | null,\n  nrows: number\n): JSX.Element | null {\n  return useMemo(() => {\n    const summaryOption = summaryTemplate ?? true;\n    if (!summaryOption) {\n      return null;\n    }\n\n    const template =\n      typeof summaryOption === \"string\"\n        ? summaryOption\n        : \"Viewing rows {start} through {end} of {total}\";\n\n    if (!scrollContainer) {\n      return null;\n    }\n    if (virtualRows.length === 0) {\n      return null;\n    }\n\n    if (!thead) return null;\n\n    const top = scrollContainer.scrollTop + thead.clientHeight;\n    const bot = scrollContainer.scrollTop + scrollContainer.clientHeight;\n\n    const [firstIndex, lastIndex] = findRangeIndex(\n      top,\n      bot,\n      virtualRows,\n      (vrow, start) => vrow.start + vrow.size / 2\n    );\n\n    if (firstIndex === null || lastIndex === null) {\n      // Something must've gone wrong if there are rows but none of them are within the\n      // visible scroll area... shrug\n      return null;\n    }\n\n    const firstRow = virtualRows[firstIndex];\n    const lastRow = virtualRows[lastIndex];\n\n    if (firstRow === undefined || lastRow === undefined) {\n      // This should never happen, but just in case...\n      return null;\n    }\n\n    if (firstRow.index === 0 && lastRow.index === nrows - 1) {\n      // Viewing all rows; no need for a summary\n      return null;\n    }\n\n    const summaryMessage = formatSummary(\n      template,\n      firstRow.index + 1,\n      lastRow.index + 1,\n      nrows\n    );\n\n    return <div className=\"shiny-data-grid-summary\">{summaryMessage}</div>;\n  }, [summaryTemplate, scrollContainer, virtualRows, thead, nrows]);\n}\n\n/**\n * Find the subset of (sorted) items that are between start and end (inclusive), where\n * each item's value to compare is calculated by a mapping function. The mapping\n * function may behave differently when comparing to start vs. end.\n *\n * @param start The smallest value to include.\n * @param end The largest value to include.\n * @param items A set of items to be evaluated, in sorted order.\n * @param map A function for converting from an item to a comparison value; for example,\n *   if 'start' and 'end' are vertical pixel coordinates, then the function might\n *   return the item's vertical top (for start) or bottom (for end) coordinate.\n * @returns The start and end indexes into the 'items' array indicating the first and\n *   last item that is included.\n */\nfunction findRangeIndex<TItem>(\n  start: number,\n  end: number,\n  items: TItem[],\n  map: (x: TItem, start: boolean) => number\n): [first: number | null, last: number | null] {\n  let first: number | null = null;\n  let last: number | null = null;\n\n  for (let i = 0; i < items.length; i++) {\n    const item: TItem = items[i]!;\n    if (first === null) {\n      if (map(item, true) >= start) {\n        first = i;\n        last = i;\n      }\n    } else {\n      if (map(item, false) <= end) {\n        last = i;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return [first, last];\n}\n\nfunction formatSummary(\n  template: string,\n  start: number,\n  end: number,\n  total: number\n) {\n  return template.replace(/\\{(start|end|total)\\}/g, (substr, token) => {\n    if (token === \"start\") {\n      return start + \"\";\n    } else if (token === \"end\") {\n      return end + \"\";\n    } else if (token === \"total\") {\n      return total + \"\";\n    } else {\n      return substr;\n    }\n  });\n}\n", "/* eslint-disable react-hooks/rules-of-hooks */\n\n// TODO-barret-future; Try to group all related code into a file and make index.tsx as small as possible. Try to move all logic into files and keep the main full of `useFOO` functions.\n\n// TODO-barret-future; Instead of deconstructinng all of the use state objects, keep it as a dictionary and shorten the method names. The docs can live on the _useFoo` function return type. Ex: CellEditMapReturnObject 's setCellEditMapAtLoc should contain JSDoc on it's objects. Then we'd have a `cellEditMap.setAtLoc` method.\n\nimport {\n  Column,\n  ColumnDef,\n  RowData,\n  RowModel,\n  TableOptions,\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { Virtualizer, useVirtualizer } from \"@tanstack/react-virtual\";\nimport React, {\n  FC,\n  StrictMode,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from \"react\";\nimport { Root, createRoot } from \"react-dom/client\";\nimport { ErrorsMessageValue } from \"rstudio-shiny/srcts/types/src/shiny/shinyapp\";\nimport { useImmer } from \"use-immer\";\nimport { TableBodyCell } from \"./cell\";\nimport { getCellEditMapObj, useCellEditMap } from \"./cell-edit-map\";\nimport {\n  addPatchToData,\n  cellPatchPyArrToCellPatchArr,\n  type CellPatchPy,\n} from \"./data-update\";\nimport { findFirstItemInView, getStyle } from \"./dom-utils\";\nimport { ColumnFiltersState, Filter, FilterValue, useFilters } from \"./filter\";\nimport type { CellSelection, SelectionModesProp } from \"./selection\";\nimport { SelectionModes, initSelectionModes, useSelection } from \"./selection\";\nimport { SortingState, useSort } from \"./sort\";\nimport { SortArrow } from \"./sort-arrows\";\nimport { StyleInfo, getCellStyle, useStyleInfoMap } from \"./style-info\";\nimport css from \"./styles.scss\";\nimport { useTabindexGroup } from \"./tabindex-group\";\nimport { useSummary } from \"./table-summary\";\nimport { PandasData, PatchInfo, TypeHint } from \"./types\";\n\n// TODO-barret-future set selected cell as input! (Might be a followup?)\n\n// TODO-barret; Type support\n// export interface PandasData<TIndex> {\n//   columns: ReadonlyArray<string>;\n//   // index: ReadonlyArray<TIndex>;\n//   data: unknown[][];\n//   typeHints?: ReadonlyArray<TypeHint>;\n//   options: DataGridOptions;\n// }\n\ndeclare module \"@tanstack/table-core\" {\n  interface ColumnMeta<TData extends RowData, TValue> {\n    colIndex: number;\n    typeHint: TypeHint | undefined;\n    isHtmlColumn: boolean;\n  }\n  // interface TableMeta<TData extends RowData> {\n  //   updateCellsData: (cellInfos: UpdateCellData[]) => void;\n  // }\n}\n\n// // TODO-barret-future; Use window.setSelectionRange() and this method to reselect text when scrolling out of view\n// const useSelectedText = () => {\n//   const [text, setText] = useState(\"\");\n//   const select = () => {\n//     const selected = window.getSelection() as Selection;\n//     setText(selected.toString());\n//   };\n//   return [select, text] as const;\n// };\n\n//\n\n// TODO: Right-align numeric columns, maybe change font\n// TODO: Explicit column widths\n// TODO: Filtering\n// TODO: Editing\n// TODO: Pagination\n// TODO: Range selection + copying\n// TODO: Find\n// TODO: Server-side mode (don't pull all data to client at once)\n// TODO: Localization of summary\n// TODO: Accessibility review\n// TODO: Drag to resize columns\n// TODO: Drag to resize table/grid\n// TODO: Row numbers\n\ntype ShinyDataGridServerInfo<TIndex> = {\n  payload: PandasData<TIndex>;\n  patchInfo: PatchInfo;\n  selectionModes: SelectionModesProp;\n};\n\ninterface ShinyDataGridProps<TIndex> {\n  id: string | null;\n  gridInfo: ShinyDataGridServerInfo<TIndex>;\n  bgcolor?: string;\n}\n\nconst ShinyDataGrid: FC<ShinyDataGridProps<unknown>> = ({\n  id,\n  gridInfo: { payload, patchInfo, selectionModes: selectionModesProp },\n  bgcolor,\n}) => {\n  const {\n    columns: columnsProp,\n    typeHints: typeHintsProp,\n    data: tableDataProp,\n    options: payloadOptions = {\n      width: undefined,\n      height: undefined,\n      fill: false,\n      styles: [],\n    },\n    htmlDeps,\n  } = payload;\n  const {\n    width,\n    height,\n    fill,\n    filters: withFilters,\n    styles: initStyleInfos,\n  } = payloadOptions;\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const theadRef = useRef<HTMLTableSectionElement>(null);\n  const tbodyRef = useRef<HTMLTableSectionElement>(null);\n\n  const [columns, setColumns] = useImmer(columnsProp);\n  const [typeHints, setTypeHints] = useImmer(typeHintsProp);\n\n  const _useStyleInfo = useStyleInfoMap({\n    initStyleInfos: initStyleInfos ?? [],\n    nrow: tableDataProp.length,\n    ncol: columns.length,\n  });\n  /**\n   * Contains all style information for the full table.\n   *\n   * Currently only the \"data\" location is supported.\n   */\n  const styleInfoMap = _useStyleInfo.styleInfoMap;\n  const { setStyleInfos } = _useStyleInfo;\n\n  const _cellEditMap = useCellEditMap();\n  /**\n   * Contains all cell state and edit information\n   *\n   * If a cell's state is not in this map, it is assumed to be in the default display state.\n   */\n  const cellEditMap = _cellEditMap.cellEditMap;\n  /**\n   * Set a cell's state or edit value in the `cellEditMap`\n   */\n  const setCellEditMapAtLoc = _cellEditMap.setCellEditMapAtLoc;\n  /**\n   * Reset the `cellEditMap` to an empty state\n   */\n  const resetCellEditMap = _cellEditMap.resetCellEditMap;\n\n  /**\n   * Determines if the user is allowed to edit cells in the table.\n   */\n  const editCellsIsAllowed = payloadOptions[\"editable\"] === true;\n\n  /**\n   * Determines if any cell is currently being edited\n   *\n   * This is currently being used to prevent row selection when a cell is being edited.\n   */\n  const isEditingCell = useMemo<boolean>(() => {\n    for (const cellEdit of cellEditMap.values()) {\n      if (cellEdit.isEditing) {\n        return true;\n      }\n    }\n    return false;\n  }, [cellEditMap]);\n\n  /**\n   * Column definitions for the table\n   */\n  const coldefs = useMemo<ColumnDef<unknown[], unknown>[]>(\n    () =>\n      columns.map((colname, colIndex) => {\n        const typeHint = typeHints?.[colIndex];\n\n        const isHtmlColumn = typeHint?.type === \"html\";\n        const enableSorting = isHtmlColumn ? false : undefined;\n\n        return {\n          accessorFn: (row, index) => {\n            return row[colIndex];\n          },\n          // TODO: delegate this decision to something in filter.tsx\n          filterFn:\n            typeHint?.type === \"numeric\" ? \"inNumberRange\" : \"includesString\",\n          header: colname,\n          meta: {\n            colIndex,\n            isHtmlColumn,\n            typeHint,\n          },\n          cell: ({ getValue }) => {\n            const ret = getValue();\n\n            // Regardless of type, if the value is null or undefined,\n            // return an empty string\n            if (ret === null || ret === undefined) {\n              return \"\";\n            }\n            switch (typeHint?.type) {\n              // Return the value as is\n              case \"numeric\":\n              case \"date\":\n              case \"datetime\":\n              case \"duration\":\n              case \"categorical\":\n              case \"html\":\n                return ret;\n              // Convert the value to a string\n              case \"string\":\n              case \"boolean\":\n                return String(ret);\n              // Convert the value to a JSON string if it isn't a string already\n              case \"unknown\":\n              case \"object\":\n                if (typeof ret === \"string\") {\n                  return ret;\n                }\n                return JSON.stringify(ret);\n              default:\n                return ret;\n            }\n          },\n          enableSorting,\n        };\n      }),\n    [columns, typeHints]\n  );\n\n  // TODO-barret-future; Possible pagination helper\n  // function useSkipper() {\n  //   const shouldSkipRef = React.useRef(true);\n  //   const shouldSkip = shouldSkipRef.current;\n\n  //   // Wrap a function with this to skip a pagination reset temporarily\n  //   const skip = React.useCallback(() => {\n  //     shouldSkipRef.current = false;\n  //   }, []);\n\n  //   React.useEffect(() => {\n  //     shouldSkipRef.current = true;\n  //   });\n\n  //   return [shouldSkip, skip] as const;\n  // }\n  // const [autoResetPageIndex, skipAutoResetPageIndex] = useSkipper();\n\n  /**\n   * Copy of the original data\n   */\n  const dataOriginal = useMemo(() => tableDataProp, [tableDataProp]);\n\n  const _tableData = useImmer(tableDataProp);\n  /** Up-to-date data for the table */\n  const tableData = _tableData[0];\n  /** Function to update the data in the table */\n  const setTableData = _tableData[1];\n\n  const getColDefs = (): ColumnDef<unknown[], unknown>[] => {\n    return coldefs;\n  };\n\n  const _sort = useSort({ getColDefs });\n  /** Sorting state of the table */\n  const sorting = _sort.sorting;\n  /** Table options specific for sorting */\n  const sortTableStateOptions = _sort.sortTableStateOptions;\n  /** Sorting state of the table */\n  const sortTableOptions = _sort.sortTableOptions;\n  /** Set the sorting state of the table */\n  const setSorting = _sort.setSorting;\n\n  const {\n    columnFilters,\n    columnFiltersState,\n    filtersTableOptions,\n    setColumnFilters,\n  } = useFilters<unknown[]>(withFilters);\n\n  const updateData = useCallback(\n    ({\n      data,\n      columns,\n      typeHints,\n    }: {\n      data: PandasData<unknown>[\"data\"];\n      columns: readonly string[];\n      typeHints: readonly TypeHint[] | undefined;\n    }) => {\n      setColumns(columns);\n      setTableData(data);\n      setTypeHints(typeHints);\n      resetCellEditMap();\n\n      // Make map for quick lookup of type hints\n      const newTypeHintMap = new Map<string, TypeHint>();\n      typeHints?.forEach((hint, i) => {\n        newTypeHintMap.set(columns[i]!, hint);\n      });\n      // Filter out sorting and column filters that are no longer valid\n      const newSort = sorting.filter((sort) => newTypeHintMap.has(sort.id));\n      const newColumnFilter = columnFilters.filter((filter) => {\n        const typeHint = newTypeHintMap.get(filter.id);\n        if (!typeHint) return false;\n        // Maintain the filter if it's a numeric filter\n        // Drop if it's a string filter\n        if (typeHint.type === \"numeric\") {\n          return (\n            filter.value === null ||\n            (Array.isArray(filter.value) &&\n              filter.value.every((v) => v !== null))\n          );\n        }\n        // Maintain string filters\n        return typeof filter.value === \"string\";\n      });\n\n      setColumnFilters(newColumnFilter);\n      setSorting(newSort);\n    },\n    [\n      columnFilters,\n      resetCellEditMap,\n      setColumnFilters,\n      setColumns,\n      setSorting,\n      setTableData,\n      setTypeHints,\n      sorting,\n    ]\n  );\n\n  const options: TableOptions<unknown[]> = {\n    data: tableData,\n    columns: coldefs,\n    state: {\n      ...sortTableStateOptions,\n      ...columnFiltersState,\n    },\n    getCoreRowModel: getCoreRowModel(),\n    ...sortTableOptions,\n    ...filtersTableOptions,\n    // debugAll: true,\n    // Provide our updateCellsData function to our table meta\n    // autoResetPageIndex,\n    // meta: {\n    //   updateCellsData: (cellInfos: UpdateCellData[]) => {},\n    // },\n  };\n  const table = useReactTable(options);\n\n  const rowVirtualizer = useVirtualizer({\n    count: table.getFilteredRowModel().rows.length,\n    getScrollElement: () => containerRef.current,\n    estimateSize: () => 31,\n    overscan: 15,\n    paddingStart: theadRef.current?.clientHeight ?? 0,\n    // In response to https://github.com/posit-dev/py-shiny/pull/538/files#r1228352446\n    // (the default scrollingDelay is 150)\n    isScrollingResetDelay: 10,\n  });\n\n  // Reset scroll when dataset changes\n  useLayoutEffect(() => {\n    rowVirtualizer.scrollToOffset(0);\n  }, [payload, rowVirtualizer]);\n\n  const totalSize = rowVirtualizer.getTotalSize();\n  const virtualRows = rowVirtualizer.getVirtualItems();\n\n  // paddingTop and paddingBottom are to force the <tbody> to add up to the correct\n  // virtual height.\n  // paddingTop must subtract out the thead height, since thead is inside the scroll\n  // container but not virtualized.\n  const paddingTop =\n    (virtualRows.length > 0 ? virtualRows?.[0]?.start || 0 : 0) -\n      (theadRef.current?.clientHeight ?? 0) ?? 0;\n  const paddingBottom =\n    virtualRows.length > 0\n      ? totalSize - (virtualRows?.[virtualRows.length - 1]?.end || 0)\n      : 0;\n\n  const summary = useSummary(\n    payloadOptions[\"summary\"],\n    containerRef?.current,\n    virtualRows,\n    theadRef.current,\n    rowVirtualizer.options.count\n  );\n\n  const tableStyle = payloadOptions[\"style\"] ?? \"grid\";\n  const containerClass =\n    tableStyle === \"grid\" ? \"shiny-data-grid-grid\" : \"shiny-data-grid-table\";\n  const tableClass = tableStyle === \"table\" ? \"table table-sm\" : null;\n\n  // ### Row selection ###############################################################\n\n  const selectionModes = initSelectionModes(selectionModesProp);\n\n  const canSelect = !selectionModes.isNone();\n  const canMultiRowSelect = selectionModes.row !== SelectionModes._rowEnum.NONE;\n\n  const selection = useSelection<string, HTMLTableRowElement>({\n    isEditingCell,\n    editCellsIsAllowed,\n    selectionModes,\n    keyAccessor: (el) => {\n      return el.dataset.key!;\n    },\n    focusEscape: (el) => {\n      setTimeout(() => {\n        el?.blur();\n        containerRef.current?.focus();\n      }, 0);\n    },\n    focusOffset: (key, offset = 0) => {\n      const rowModel = table.getSortedRowModel();\n      let index = rowModel.rows.findIndex((row) => row.id === key);\n      if (index < 0) {\n        return null;\n      }\n      index += offset;\n      if (index < 0 || index >= rowModel.rows.length) {\n        return null;\n      }\n      const targetKey = rowModel.rows[index]!.id;\n      rowVirtualizer.scrollToIndex(index);\n      setTimeout(() => {\n        const targetEl = containerRef.current?.querySelector(\n          `[data-key='${targetKey}']`\n        ) as HTMLElement | null;\n        targetEl?.focus();\n      }, 0);\n      return targetKey;\n    },\n    between: (fromKey, toKey) =>\n      findKeysBetween(table.getSortedRowModel(), fromKey, toKey),\n    onKeyDownEnter: (el) => {\n      // Retrieve all editable cells in the row\n      const childrenNodes = Array(...el.childNodes.values()).filter((node) => {\n        return (\n          node instanceof HTMLElement &&\n          node.classList.contains(\"cell-editable\")\n        );\n      });\n      if (childrenNodes.length === 0) return; // Quit early\n\n      // Find the first editable cell in the row\n      const firstItem = findFirstItemInView(\n        containerRef.current!,\n        childrenNodes\n      );\n      if (!firstItem) return; // Quit early\n\n      // Submit the double click event to the cell to trigger edit mode for the cell\n      const doubleClickEvent = new MouseEvent(\"dblclick\", {\n        bubbles: true,\n        cancelable: true,\n      });\n      firstItem.dispatchEvent(doubleClickEvent);\n    },\n  });\n\n  useEffect(() => {\n    const handleCellSelection = (\n      event: CustomEvent<{ cellSelection: CellSelection }>\n    ) => {\n      // We convert \"None\" to an empty tuple on the python side\n      // so an empty array indicates that selection should be cleared.\n\n      const cellSelection = event.detail.cellSelection;\n\n      if (cellSelection.type === \"none\") {\n        selection.clear();\n        return;\n        // } else if (cellSelection.type === \"all\") {\n        //   rowSelection.setMultiple(rowData.map((_, i) => String(i)));\n        //   return;\n      } else if (cellSelection.type === \"row\") {\n        selection.setMultiple(cellSelection.rows.map(String));\n        return;\n      } else {\n        console.error(\"Unhandled cell selection update:\", cellSelection);\n      }\n    };\n\n    if (!id) return;\n\n    const element = document.getElementById(id);\n    if (!element) return;\n\n    element.addEventListener(\n      \"updateCellSelection\",\n      handleCellSelection as EventListener\n    );\n\n    return () => {\n      element.removeEventListener(\n        \"updateCellSelection\",\n        handleCellSelection as EventListener\n      );\n    };\n  }, [id, selection, tableData]);\n\n  useEffect(() => {\n    if (!htmlDeps) return;\n    // Register the Shiny HtmlDependencies\n    window.Shiny.renderDependenciesAsync([...htmlDeps]);\n  }, [htmlDeps]);\n\n  useEffect(() => {\n    const handleAddPatches = (\n      event: CustomEvent<{\n        patches: CellPatchPy[];\n      }>\n    ) => {\n      const evtPatches = event.detail.patches;\n      const newPatches = cellPatchPyArrToCellPatchArr(evtPatches);\n\n      // Update data with extra patches\n      addPatchToData({\n        setData: setTableData,\n        newPatches,\n        setCellEditMapAtLoc,\n      });\n    };\n\n    if (!id) return;\n\n    const element = document.getElementById(id);\n    if (!element) return;\n\n    element.addEventListener(\"addPatches\", handleAddPatches as EventListener);\n\n    return () => {\n      element.removeEventListener(\n        \"addPatches\",\n        handleAddPatches as EventListener\n      );\n    };\n  }, [columns, id, setCellEditMapAtLoc, setSorting, setTableData]);\n\n  useEffect(() => {\n    const handleUpdateData = (\n      event: CustomEvent<{\n        data: PandasData<unknown>[\"data\"];\n        columns: PandasData<unknown>[\"columns\"];\n        typeHints: PandasData<unknown>[\"typeHints\"];\n      }>\n    ) => {\n      const evtData = event.detail;\n\n      updateData(evtData);\n    };\n\n    if (!id) return;\n\n    const element = document.getElementById(id);\n    if (!element) return;\n\n    element.addEventListener(\"updateData\", handleUpdateData as EventListener);\n\n    return () => {\n      element.removeEventListener(\n        \"updateData\",\n        handleUpdateData as EventListener\n      );\n    };\n  }, [columns, id, resetCellEditMap, setTableData, updateData]);\n\n  useEffect(() => {\n    const handleColumnSort = (\n      event: CustomEvent<{ sort: { col: number; desc: boolean }[] }>\n    ) => {\n      const shinySorting = event.detail.sort;\n      const columnSorting: SortingState = [];\n\n      shinySorting.map((sort) => {\n        columnSorting.push({\n          id: columns[sort.col]!,\n          desc: sort.desc,\n        });\n      });\n      setSorting(columnSorting);\n    };\n\n    if (!id) return;\n\n    const element = document.getElementById(id);\n    if (!element) return;\n\n    element.addEventListener(\n      \"updateColumnSort\",\n      handleColumnSort as EventListener\n    );\n\n    return () => {\n      element.removeEventListener(\n        \"updateColumnSort\",\n        handleColumnSort as EventListener\n      );\n    };\n  }, [columns, id, setSorting]);\n\n  useEffect(() => {\n    const handleColumnFilter = (\n      event: CustomEvent<{ filter: { col: number; value: FilterValue }[] }>\n    ) => {\n      const shinyFilters = event.detail.filter;\n\n      const columnFilters: ColumnFiltersState = [];\n      shinyFilters.map((filter) => {\n        columnFilters.push({\n          id: columns[filter.col]!,\n          value: filter.value,\n        });\n      });\n      setColumnFilters(columnFilters);\n    };\n\n    if (!id) return;\n\n    const element = document.getElementById(id);\n    if (!element) return;\n\n    element.addEventListener(\n      \"updateColumnFilter\",\n      handleColumnFilter as EventListener\n    );\n\n    return () => {\n      element.removeEventListener(\n        \"updateColumnFilter\",\n        handleColumnFilter as EventListener\n      );\n    };\n  }, [columns, id, setColumnFilters]);\n\n  useEffect(() => {\n    const handleStyles = (event: CustomEvent<{ styles: StyleInfo[] }>) => {\n      const styles = event.detail.styles;\n      setStyleInfos(styles);\n    };\n\n    if (!id) return;\n\n    const element = document.getElementById(id);\n    if (!element) return;\n\n    element.addEventListener(\"updateStyles\", handleStyles as EventListener);\n\n    return () => {\n      element.removeEventListener(\n        \"updateStyles\",\n        handleStyles as EventListener\n      );\n    };\n  }, [id, setStyleInfos]);\n\n  useEffect(() => {\n    if (!id) return;\n    let shinyValue: CellSelection | null = null;\n    if (selectionModes.isNone()) {\n      shinyValue = null;\n    } else if (selectionModes.row !== SelectionModes._rowEnum.NONE) {\n      const rowSelectionKeys = selection.keys().toList();\n      const rowsById = table.getSortedRowModel().rowsById;\n      shinyValue = {\n        type: \"row\",\n        rows: rowSelectionKeys\n          .map((key) => {\n            if (!(key in rowsById)) {\n              return null;\n            }\n            return rowsById[key]!.index;\n          })\n          .filter((x): x is number => x !== null),\n      };\n    } else {\n      console.error(\"Unhandled row selection mode:\", selectionModes);\n    }\n    window.Shiny.setInputValue!(`${id}_cell_selection`, shinyValue);\n  }, [id, selection, selectionModes, table, table.getSortedRowModel]);\n\n  useEffect(() => {\n    if (!id) return;\n    const shinySort: { col: number; desc: boolean }[] = [];\n    sorting.map((sortObj) => {\n      const columnNum = columns.indexOf(sortObj.id);\n      shinySort.push({\n        col: columnNum,\n        desc: sortObj.desc,\n      });\n    });\n    window.Shiny.setInputValue!(`${id}_sort`, shinySort);\n\n    // Deprecated as of 2024-05-21\n    window.Shiny.setInputValue!(`${id}_column_sort`, shinySort);\n  }, [columns, id, sorting]);\n  useEffect(() => {\n    if (!id) return;\n    const shinyFilter: {\n      col: number;\n      value: FilterValue;\n    }[] = [];\n    columnFilters.map((filterObj) => {\n      const columnNum = columns.indexOf(filterObj.id);\n      shinyFilter.push({\n        col: columnNum,\n        value: filterObj.value as FilterValue,\n      });\n    });\n    window.Shiny.setInputValue!(`${id}_filter`, shinyFilter);\n\n    // Deprecated as of 2024-05-21\n    window.Shiny.setInputValue!(`${id}_column_filter`, shinyFilter);\n  }, [id, columnFilters, columns]);\n  useEffect(() => {\n    if (!id) return;\n\n    const shinyRows: number[] = table\n      // Already prefiltered rows!\n      .getSortedRowModel()\n      .rows.map((row) => row.index);\n    window.Shiny.setInputValue!(`${id}_data_view_rows`, shinyRows);\n\n    // Legacy value as of 2024-05-13\n    window.Shiny.setInputValue!(`${id}_data_view_indices`, shinyRows);\n  }, [\n    id,\n    table,\n    // Update with either sorting or columnFilters update!\n    sorting,\n    columnFilters,\n  ]);\n\n  // Restored for legacy purposes. Only send selected rows to Shiny when row selection is performed.\n  useEffect(() => {\n    if (!id) return;\n    let shinyValue: number[] | null = null;\n    if (selectionModes.row !== SelectionModes._rowEnum.NONE) {\n      const rowSelectionKeys = selection.keys().toList();\n      const rowsById = table.getSortedRowModel().rowsById;\n      shinyValue = rowSelectionKeys\n        .map((key) => {\n          if (!(key in rowsById)) {\n            return null;\n          }\n          return rowsById[key]!.index;\n        })\n        .filter((x): x is number => x !== null)\n        .sort();\n    }\n    window.Shiny.setInputValue!(`${id}_selected_rows`, shinyValue);\n  }, [id, selection, selectionModes, table]);\n\n  // ### End row selection ############################################################\n\n  // ### Editable cells ###############################################################\n  // type TKey = DOMStringMap[string]: string\n  type TKey = typeof HTMLTableRowElement.prototype.dataset.key;\n  type TElement = HTMLTableRowElement;\n\n  // ### End editable cells ###########################################################\n\n  //\n\n  //\n\n  //\n  const tbodyTabItems = React.useCallback(\n    () => tbodyRef.current!.querySelectorAll(\"[tabindex='-1']\"),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [tbodyRef.current]\n  );\n  const tbodyTabGroup = useTabindexGroup(containerRef.current, tbodyTabItems, {\n    top: theadRef.current?.clientHeight ?? 0,\n  });\n\n  // Reset sorting and selection whenever dataset changes. (Should we do this?)\n  // NOTE-2024-02-21-barret; Maybe only reset sorting if the column information changes?\n  useEffect(() => {\n    return () => {\n      table.resetSorting();\n      selection.clear();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [payload]);\n\n  const headerRowCount = table.getHeaderGroups().length;\n\n  // Maintain the .scrolling class: present if the amount of data in the table causes\n  // vertical overflow, absent if not.\n  useLayoutEffect(() => {\n    // If no data, we're definitely not scrolling. Otherwise, we need to test.\n    let scrolling = tableData.length > 0;\n    if (scrolling) {\n      // We need to add .scrolling before comparing scrollHeight/clientHeight. If not,\n      // then if there's already a scrollworthy amount of data, we might get stuck in\n      // non-scrolling state because the clientHeight is expanding within a fixed\n      // container. (See https://github.com/posit-dev/py-shiny/issues/1549)\n      containerRef.current?.classList.add(\"scrolling\");\n      const scrollHeight = containerRef.current?.scrollHeight;\n      const clientHeight = containerRef.current?.clientHeight;\n      if (scrollHeight && clientHeight && scrollHeight <= clientHeight) {\n        scrolling = false;\n      }\n    }\n    containerRef.current?.classList.toggle(\"scrolling\", scrolling);\n  }, [\n    tableData.length,\n    containerRef.current?.scrollHeight,\n    containerRef.current?.clientHeight,\n  ]);\n\n  const makeHeaderKeyDown =\n    (column: Column<unknown[], unknown>) => (event: React.KeyboardEvent) => {\n      if (event.key === \" \" || event.key === \"Enter\") {\n        column.toggleSorting(undefined, event.shiftKey);\n      }\n    };\n\n  const measureEl = useVirtualizerMeasureWorkaround(rowVirtualizer);\n\n  let className = `shiny-data-grid ${containerClass}`;\n  if (fill) {\n    className += \" html-fill-item\";\n  }\n\n  const includeRowNumbers =\n    false && selectionModes.row !== SelectionModes._rowEnum.NONE;\n\n  return (\n    <>\n      <div\n        className={className}\n        ref={containerRef}\n        style={{ width, height, overflow: \"auto\" }}\n      >\n        <table\n          className={tableClass + (withFilters ? \" filtering\" : \"\")}\n          aria-rowcount={table.getRowCount()}\n          aria-multiselectable={canMultiRowSelect}\n          style={{\n            width: width === null || width === \"auto\" ? undefined : \"100%\",\n          }}\n        >\n          <thead ref={theadRef} style={{ backgroundColor: bgcolor }}>\n            {table.getHeaderGroups().map((headerGroup, i) => (\n              <tr\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore:next-line\n                key={headerGroup.id}\n                aria-rowindex={i + 1}\n              >\n                {includeRowNumbers && <th className=\"table-corner\"></th>}\n\n                {headerGroup.headers.map((header) => {\n                  const headerContent = header.isPlaceholder ? undefined : (\n                    <div\n                      style={{\n                        cursor: header.column.getCanSort()\n                          ? \"pointer\"\n                          : undefined,\n                        userSelect: header.column.getCanSort()\n                          ? \"none\"\n                          : undefined,\n                      }}\n                    >\n                      {flexRender(\n                        header.column.columnDef.header,\n                        header.getContext()\n                      )}\n                      <SortArrow direction={header.column.getIsSorted()} />\n                    </div>\n                  );\n\n                  return (\n                    <th\n                      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                      // @ts-ignore:next-line\n                      key={header.id}\n                      colSpan={header.colSpan}\n                      style={{\n                        width: header.getSize(),\n                        // When row numbers are displayed, this value is helpful instead of `width`\n                        // minWidth: header.getSize()\n                      }}\n                      scope=\"col\"\n                      tabIndex={0}\n                      onClick={header.column.getToggleSortingHandler()}\n                      onKeyDown={makeHeaderKeyDown(header.column)}\n                      className={\n                        header.column.getCanSort() ? undefined : \"header-html\"\n                      }\n                    >\n                      {headerContent}\n                    </th>\n                  );\n                })}\n              </tr>\n            ))}\n            {withFilters && (\n              <tr className=\"filters\">\n                {includeRowNumbers && <th className=\"table-corner\"></th>}\n                {table.getFlatHeaders().map((header) => {\n                  const thKey = `filter-${header.id}`;\n                  return (\n                    <th\n                      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                      // @ts-ignore:next-line\n                      key={thKey}\n                    >\n                      <Filter header={header} />\n                    </th>\n                  );\n                })}\n              </tr>\n            )}\n          </thead>\n          <tbody\n            ref={tbodyRef}\n            tabIndex={tbodyTabGroup.containerTabIndex}\n            {...tbodyTabGroup.containerHandlers}\n          >\n            {paddingTop > 0 && <tr style={{ height: `${paddingTop}px` }}></tr>}\n            {virtualRows.map((virtualRow) => {\n              const row = table.getRowModel().rows[virtualRow.index];\n              return (\n                row && (\n                  <tr\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore:next-line\n                    key={virtualRow.key}\n                    data-index={virtualRow.index}\n                    aria-rowindex={virtualRow.index + headerRowCount}\n                    data-key={row.id}\n                    ref={measureEl}\n                    aria-selected={selection.has(row.id)}\n                    tabIndex={-1}\n                    {...selection.itemHandlers()}\n                  >\n                    {includeRowNumbers && (\n                      <td className=\"row-number\">{row.index + 1}</td>\n                    )}\n                    {row.getVisibleCells().map((cell) => {\n                      // TODO-barret; Only send in the cell data that is needed;\n                      const rowIndex = cell.row.index;\n                      const columnIndex = cell.column.columnDef.meta!.colIndex;\n                      const [cellEditInfo, _key] = getCellEditMapObj(\n                        cellEditMap,\n                        rowIndex,\n                        columnIndex\n                      );\n                      const { cellStyle, cellClassName } = getCellStyle(\n                        styleInfoMap,\n                        \"body\",\n                        rowIndex,\n                        columnIndex\n                      );\n\n                      return (\n                        <TableBodyCell\n                          key={cell.id}\n                          rowId={cell.row.id}\n                          containerRef={containerRef}\n                          cell={cell}\n                          patchInfo={patchInfo}\n                          editCellsIsAllowed={editCellsIsAllowed}\n                          columns={columns}\n                          coldefs={coldefs}\n                          rowIndex={rowIndex}\n                          columnIndex={columnIndex}\n                          getSortedRowModel={table.getSortedRowModel}\n                          cellEditInfo={cellEditInfo}\n                          cellStyle={cellStyle}\n                          cellClassName={cellClassName}\n                          setData={setTableData}\n                          setCellEditMapAtLoc={setCellEditMapAtLoc}\n                          selection={selection}\n                        ></TableBodyCell>\n                      );\n                    })}\n                  </tr>\n                )\n              );\n            })}\n            {paddingBottom > 0 && (\n              <tr style={{ height: `${paddingBottom}px` }}></tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      {summary}\n    </>\n  );\n};\n\nfunction findKeysBetween<TData>(\n  rowModel: RowModel<TData>,\n  fromKey: string,\n  toKey: string\n): readonly string[] {\n  let fromIdx = rowModel.rows.findIndex((row) => row.id === fromKey);\n  let toIdx = rowModel.rows.findIndex((row) => row.id === toKey);\n  if (fromIdx < 0 || toIdx < 0) {\n    return [];\n  }\n  if (fromIdx > toIdx) {\n    // Swap order to simplify things\n    [fromIdx, toIdx] = [toIdx, fromIdx];\n  }\n  const keys = [];\n  for (let i = fromIdx; i <= toIdx; i++) {\n    keys.push(rowModel.rows[i]!.id);\n  }\n  return keys;\n}\n\n/**\n * Works around a problem where the ref={...} callback is called before the element to\n * be measured is attached to the DOM, which will result in the virtualizer using its\n * estimated size instead of the actual size. This hook will detect when elements that\n * are not yet attached to the DOM are measured, and will retry measuring them in the\n * useEffect.\n * @returns A callback that can be used as a ref for an element that needs to be measured.\n */\nfunction useVirtualizerMeasureWorkaround(\n  rowVirtualizer: Virtualizer<HTMLDivElement, Element>\n) {\n  // Tracks elements that need to be measured, but are not yet attached to the DOM\n  const measureTodoQueue = useRef<HTMLElement[]>([]);\n\n  // This is the callback that will be passed back to the caller, intended to be used as\n  // a ref for each virtual item's element.\n  const measureElementWithRetry = useCallback(\n    (el: Element | null) => {\n      if (!el) {\n        return;\n      }\n\n      if (el.isConnected) {\n        rowVirtualizer.measureElement(el);\n      } else {\n        measureTodoQueue.current.push(el as HTMLElement);\n      }\n    },\n    [rowVirtualizer]\n  );\n\n  // Once the DOM is updated, try to measure any elements that were not yet attached\n  useLayoutEffect(() => {\n    if (measureTodoQueue.current.length > 0) {\n      const todo = measureTodoQueue.current.splice(0);\n      // The next line can mutate measureTodoQueue.current, hence the need to splice out\n      // all the items to work on before actually calling measureElement on any of them.\n      todo.forEach(rowVirtualizer.measureElement);\n    }\n  });\n\n  return measureElementWithRetry;\n}\n\nclass ShinyDataFrameOutputBinding extends window.Shiny.OutputBinding {\n  find(scope: HTMLElement | JQuery<HTMLElement>): JQuery<HTMLElement> {\n    return $(scope).find(\"shiny-data-frame\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  renderValue(el: ShinyDataFrameOutput, data: any): void {\n    el.renderValue(data);\n  }\n\n  renderError(el: ShinyDataFrameOutput, err: ErrorsMessageValue): void {\n    el.classList.add(\"shiny-output-error\");\n    el.renderError(err);\n  }\n\n  clearError(el: ShinyDataFrameOutput): void {\n    el.classList.remove(\"shiny-output-error\");\n    el.clearError();\n  }\n}\nwindow.Shiny.outputBindings.register(\n  new ShinyDataFrameOutputBinding(),\n  \"shinyDataFrame\"\n);\n\nfunction getComputedBgColor(el: HTMLElement | null): string | undefined {\n  if (!el) {\n    // Top of document, can't recurse further\n    return undefined;\n  }\n\n  const bgColor = getStyle(el, \"background-color\");\n\n  if (!bgColor) return bgColor;\n  const m = bgColor.match(\n    /^rgba\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*\\)$/\n  );\n\n  if (bgColor === \"transparent\" || (m && parseFloat(m[4]!) === 0)) {\n    // No background color on this element. See if it has a background image.\n    const bgImage = getStyle(el, \"background-image\");\n\n    if (bgImage && bgImage !== \"none\") {\n      // Failed to detect background color, since it has a background image\n      return undefined;\n    } else {\n      // Recurse\n      return getComputedBgColor(el.parentElement);\n    }\n  }\n  return bgColor;\n}\n\nconst cssTemplate = document.createElement(\"template\");\ncssTemplate.innerHTML = `<style>${css}</style>`;\n\nexport class ShinyDataFrameOutput extends HTMLElement {\n  reactRoot?: Root;\n  errorRoot!: HTMLSpanElement;\n\n  connectedCallback() {\n    // Currently not using shadow DOM since Bootstrap's table styling is pretty nice and\n    // I don't have time to duplicate all that right now.\n    // this.attachShadow({ mode: \"open\" });\n    // const target = this.shadowRoot!;\n\n    const [target] = [this]; // brackets are to avoid linter\n\n    target.appendChild(cssTemplate.content.cloneNode(true));\n\n    // Need to put error messages in an inline element (<span>) instead of in the\n    // reactRoot div, because we want the error messages to appear on the same line as\n    // \"Error:\".\n    this.errorRoot = document.createElement(\"span\");\n    target.appendChild(this.errorRoot);\n\n    const myDiv = document.createElement(\"div\");\n    myDiv.classList.add(\"html-fill-container\", \"html-fill-item\");\n    target.appendChild(myDiv);\n\n    this.reactRoot = createRoot(myDiv);\n\n    // If there is a <script class=\"data\"> element it contains static data.\n    // Render it now.\n    const dataEl = this.querySelector(\n      \"script.data\"\n    ) as HTMLScriptElement | null;\n    if (dataEl) {\n      const data = JSON.parse(dataEl.innerText);\n      this.renderValue(data);\n    }\n  }\n\n  renderValue(value: ShinyDataGridServerInfo<unknown> | null) {\n    this.clearError();\n\n    if (!value) {\n      this.reactRoot!.render(null);\n      return;\n    }\n\n    this.reactRoot!.render(\n      <StrictMode>\n        <ShinyDataGrid\n          id={this.id}\n          gridInfo={value}\n          bgcolor={getComputedBgColor(this)}\n        ></ShinyDataGrid>\n      </StrictMode>\n    );\n  }\n\n  renderError(err: ErrorsMessageValue) {\n    this.reactRoot!.render(null);\n    this.errorRoot.innerText = err.message;\n  }\n\n  clearError() {\n    this.reactRoot!.render(null);\n    this.errorRoot.innerText = \"\";\n  }\n}\n\ncustomElements.define(\"shiny-data-frame\", ShinyDataFrameOutput);\n\n// This is the shim between Shiny's messaging passing behaviour and React.\n// The python code sends a custom message which includes an id, handler\n// and obbject and we use that information to dispatch it to the\n// react listener.\n// It would be better to have something similar to session.send_input_message\n// for updating outputs, but that requires changes to ShinyJS.\nwindow.Shiny.addCustomMessageHandler(\n  \"shinyDataFrameMessage\",\n  function (message) {\n    const evt = new CustomEvent(message.handler, {\n      detail: message.obj,\n    });\n    const el = document.getElementById(message.id);\n    el?.dispatchEvent(evt);\n  }\n);\n"],
  "mappings": "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",
  "names": ["MODE_HYDRATE", "slice", "options", "vnodeId", "isValidElement", "rerenderQueue", "prevDebounce", "defer", "depthSort", "eventClock", "eventProxy", "eventProxyCapture", "i", "EMPTY_OBJ", "EMPTY_ARR", "IS_NON_DIMENSIONAL", "isArray", "Array", "assign", "obj", "props", "removeNode", "node", "parentNode", "removeChild", "createElement", "type", "children", "key", "ref", "normalizedProps", "arguments", "length", "call", "defaultProps", "createVNode", "original", "vnode", "__k", "__", "__b", "__e", "__d", "__c", "constructor", "__v", "__i", "__u", "createRef", "current", "Fragment", "BaseComponent", "context", "this", "getDomSibling", "childIndex", "sibling", "updateParentDomPointers", "child", "base", "enqueueRender", "c", "push", "process", "debounceRendering", "renderQueueLength", "component", "newVNode", "oldVNode", "oldDom", "commitQueue", "refQueue", "sort", "shift", "diff", "__P", "namespaceURI", "commitRoot", "diffChildren", "parentDom", "renderResult", "newParentVNode", "oldParentVNode", "globalContext", "namespace", "excessDomChildren", "isHydrating", "childVNode", "newDom", "firstChildDom", "oldChildren", "newChildrenLength", "constructNewChildrenArray", "applyRef", "contains", "insert", "nextSibling", "skewedIndex", "matchingIndex", "oldChildrenLength", "remainingOldChildren", "skew", "String", "findMatchingIndex", "unmount", "parentVNode", "insertBefore", "nodeType", "toChildArray", "out", "some", "x", "y", "setStyle", "style", "value", "setProperty", "test", "dom", "name", "oldValue", "useCapture", "o", "cssText", "replace", "toLowerCase", "l", "_attached", "addEventListener", "removeEventListener", "e", "removeAttribute", "setAttribute", "createEventProxy", "eventHandler", "_dispatched", "event", "tmp", "isNew", "oldProps", "oldState", "snapshot", "clearProcessingException", "newProps", "isClassComponent", "provider", "componentContext", "renderHook", "count", "newType", "outer", "prototype", "render", "contextType", "__E", "doRender", "sub", "state", "__n", "__h", "_sb", "__s", "getDerivedStateFromProps", "componentWillMount", "componentDidMount", "componentWillReceiveProps", "shouldComponentUpdate", "forEach", "componentWillUpdate", "componentDidUpdate", "__r", "getChildContext", "getSnapshotBeforeUpdate", "indexOf", "diffElementNodes", "diffed", "root", "cb", "newHtml", "oldHtml", "newChildren", "inputValue", "checked", "localName", "document", "createTextNode", "createElementNS", "is", "data", "childNodes", "attributes", "__html", "innerHTML", "skipRemove", "r", "componentWillUnmount", "replaceNode", "firstChild", "hydrate", "cloneElement", "createContext", "defaultValue", "contextId", "Consumer", "contextValue", "Provider", "subs", "ctx", "_props", "old", "splice", "error", "errorInfo", "ctor", "handled", "getDerivedStateFromError", "setState", "componentDidCatch", "undefined", "update", "callback", "s", "forceUpdate", "Promise", "then", "bind", "resolve", "setTimeout", "a", "b", "currentIndex", "currentComponent", "previousComponent", "prevRaf", "currentHook", "afterPaintEffects", "options", "_options", "oldBeforeDiff", "__b", "oldBeforeRender", "__r", "oldAfterDiff", "diffed", "oldCommit", "__c", "oldBeforeUnmount", "unmount", "oldRoot", "__", "getHookState", "index", "type", "__h", "hooks", "__H", "length", "push", "useState", "initialState", "useReducer", "invokeOrReturn", "reducer", "init", "hookState", "_reducer", "action", "currentValue", "__N", "nextValue", "setState", "_hasScuFromHooks", "updateHookState", "p", "s", "c", "stateHooks", "filter", "x", "every", "prevScu", "call", "this", "shouldUpdate", "forEach", "hookItem", "props", "shouldComponentUpdate", "prevCWU", "componentWillUpdate", "__e", "tmp", "useEffect", "callback", "args", "state", "__s", "argsChanged", "_pendingArgs", "useLayoutEffect", "useRef", "initialValue", "useMemo", "current", "useImperativeHandle", "ref", "createHandle", "concat", "factory", "useCallback", "useContext", "context", "provider", "sub", "value", "useDebugValue", "formatter", "useId", "state", "getHookState", "currentIndex", "root", "currentComponent", "__v", "__m", "__", "mask", "flushAfterPaintEffects", "component", "afterPaintEffects", "shift", "__P", "__H", "__h", "forEach", "invokeCleanup", "invokeEffect", "e", "options", "__e", "__b", "vnode", "oldBeforeDiff", "parentDom", "__k", "oldRoot", "__r", "oldBeforeRender", "hooks", "__c", "previousComponent", "hookItem", "__N", "_pendingArgs", "diffed", "oldAfterDiff", "c", "length", "push", "prevRaf", "requestAnimationFrame", "afterNextFrame", "commitQueue", "some", "filter", "cb", "oldCommit", "unmount", "oldBeforeUnmount", "hasErrored", "s", "HAS_RAF", "callback", "raf", "done", "clearTimeout", "timeout", "cancelAnimationFrame", "setTimeout", "hook", "comp", "cleanup", "argsChanged", "oldArgs", "newArgs", "arg", "index", "invokeOrReturn", "f", "assign", "obj", "props", "i", "shallowDiffers", "a", "b", "PureComponent", "p", "c", "this", "context", "memo", "comparer", "shouldUpdate", "nextProps", "ref", "updateRef", "call", "current", "Memoed", "shouldComponentUpdate", "createElement", "displayName", "name", "prototype", "isReactComponent", "Component", "isPureReactComponent", "state", "oldDiffHook", "options", "__b", "vnode", "type", "__f", "REACT_FORWARD_SYMBOL", "Symbol", "for", "forwardRef", "fn", "Forwarded", "clone", "$$typeof", "render", "mapFn", "children", "toChildArray", "map", "Children", "forEach", "count", "length", "only", "normalized", "toArray", "oldCatchError", "error", "newVNode", "oldVNode", "errorInfo", "then", "component", "__", "__c", "__e", "__k", "oldUnmount", "unmount", "detachedClone", "detachedParent", "parentDom", "__H", "effect", "__P", "child", "removeOriginal", "originalParent", "__v", "appendChild", "Suspense", "__u", "_suspenders", "suspended", "__a", "lazy", "loader", "prom", "Lazy", "exports", "default", "e", "SuspenseList", "_next", "_map", "__R", "promise", "suspendingVNode", "suspendingComponent", "push", "resolve", "resolved", "onResolved", "onSuspensionComplete", "suspendedVNode", "__O", "setState", "pop", "forceUpdate", "componentWillUnmount", "document", "detachedComponent", "fallback", "Fragment", "list", "node", "delete", "revealOrder", "size", "ContextProvider", "getChildContext", "Portal", "_this", "container", "_container", "_temp", "nodeType", "parentNode", "childNodes", "contains", "insertBefore", "before", "removeChild", "splice", "indexOf", "createPortal", "el", "containerInfo", "delegated", "get", "unsuspend", "wrappedUnsuspend", "Map", "reverse", "set", "componentDidUpdate", "componentDidMount", "REACT_ELEMENT_TYPE", "CAMEL_PROPS", "ON_ANI", "CAMEL_REPLACE", "IS_DOM", "onChangeInputType", "test", "parent", "callback", "textContent", "preactRender", "hydrate", "preactHydrate", "key", "Object", "defineProperty", "configurable", "v", "writable", "value", "oldEventHook", "event", "empty", "isPropagationStopped", "cancelBubble", "isDefaultPrevented", "defaultPrevented", "persist", "nativeEvent", "currentComponent", "classNameDescriptorNonEnumberable", "enumerable", "class", "oldVNodeHook", "normalizedProps", "lowerCased", "toLowerCase", "replace", "multiple", "Array", "isArray", "selected", "defaultValue", "className", "oldBeforeRender", "__r", "oldDiffed", "diffed", "dom", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "ReactCurrentDispatcher", "readContext", "__n", "useCallback", "useContext", "useDebugValue", "useDeferredValue", "useEffect", "useId", "useImperativeHandle", "useInsertionEffect", "useLayoutEffect", "useMemo", "useReducer", "useRef", "useState", "useSyncExternalStore", "useTransition", "createFactory", "type", "createElement", "bind", "isValidElement", "element", "$$typeof", "REACT_ELEMENT_TYPE", "isFragment", "Fragment", "isMemo", "displayName", "String", "startsWith", "cloneElement", "preactCloneElement", "apply", "arguments", "unmountComponentAtNode", "container", "__k", "preactRender", "findDOMNode", "component", "base", "nodeType", "unstable_batchedUpdates", "callback", "arg", "flushSync", "StrictMode", "startTransition", "cb", "useDeferredValue", "val", "useTransition", "useInsertionEffect", "useLayoutEffect", "isElement", "useSyncExternalStore", "subscribe", "getSnapshot", "value", "useState", "_instance", "__", "_getSnapshot", "_useState", "forceUpdate", "didSnapshotChange", "useEffect", "inst", "x", "y", "latestGetSnapshot", "prevValue", "nextValue", "error", "index", "useId", "useReducer", "useRef", "useImperativeHandle", "useMemo", "useCallback", "useContext", "useDebugValue", "version", "Children", "render", "hydrate", "createPortal", "createContext", "createRef", "Component", "PureComponent", "memo", "forwardRef", "Suspense", "SuspenseList", "lazy", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "functionalUpdate", "updater", "input", "makeStateUpdater", "key", "instance", "updater", "setState", "old", "functionalUpdate", "isFunction", "d", "Function", "isNumberArray", "Array", "isArray", "every", "val", "flattenBy", "arr", "getChildren", "flat", "recurse", "subArr", "forEach", "item", "push", "children", "length", "memo", "getDeps", "fn", "opts", "deps", "result", "depArgs", "depTime", "debug", "Date", "now", "newDeps", "depsChanged", "some", "dep", "index", "resultTime", "onChange", "depEndTime", "Math", "round", "resultEndTime", "resultFpsPercentage", "pad", "str", "num", "String", "console", "info", "max", "min", "getMemoOptions", "tableOptions", "debugLevel", "_tableOptions$debugAl", "debugAll", "createCell", "table", "row", "column", "columnId", "getRenderValue", "_cell$getValue", "cell", "getValue", "options", "renderFallbackValue", "id", "renderValue", "getContext", "_features", "feature", "createColumn", "columnDef", "depth", "parent", "_ref", "_resolvedColumnDef$id", "defaultColumn", "_getDefaultColumnDef", "resolvedColumnDef", "accessorKey", "replace", "undefined", "header", "accessorFn", "includes", "originalRow", "split", "_result", "warn", "process", "Error", "columns", "getFlatColumns", "_column$columns", "flatMap", "getLeafColumns", "_getOrderColumnsFn", "orderColumns", "_column$columns2", "leafColumns", "createHeader", "_options$id", "isPlaceholder", "placeholderId", "subHeaders", "colSpan", "rowSpan", "headerGroup", "getLeafHeaders", "leafHeaders", "recurseHeader", "h", "map", "Headers", "createTable", "getHeaderGroups", "getAllColumns", "getVisibleLeafColumns", "getState", "columnPinning", "left", "right", "allColumns", "_left$map$filter", "_right$map$filter", "leftColumns", "find", "filter", "Boolean", "rightColumns", "centerColumns", "headerGroups", "buildHeaderGroups", "getCenterHeaderGroups", "getLeftHeaderGroups", "_left$map$filter2", "orderedLeafColumns", "getRightHeaderGroups", "_right$map$filter2", "getFooterGroups", "reverse", "getLeftFooterGroups", "getCenterFooterGroups", "getRightFooterGroups", "getFlatHeaders", "headers", "getLeftFlatHeaders", "getCenterFlatHeaders", "getRightFlatHeaders", "getCenterLeafHeaders", "flatHeaders", "_header$subHeaders", "getLeftLeafHeaders", "_header$subHeaders2", "getRightLeafHeaders", "_header$subHeaders3", "center", "_left$0$headers", "_left$", "_center$0$headers", "_center$", "_right$0$headers", "_right$", "columnsToGroup", "headerFamily", "_headerGroups$0$heade", "_headerGroups$", "maxDepth", "findMaxDepth", "getIsVisible", "createHeaderGroup", "headersToGroup", "join", "pendingParentHeaders", "headerToGroup", "latestPendingParentHeader", "isLeafHeader", "bottomHeaders", "recurseHeadersForSpans", "filteredHeaders", "childRowSpans", "childColSpan", "childRowSpan", "minChildRowSpan", "createRow", "original", "rowIndex", "subRows", "parentId", "_valuesCache", "_uniqueValuesCache", "hasOwnProperty", "getColumn", "getUniqueValues", "_row$getValue", "getLeafRows", "getParentRow", "getRow", "getParentRows", "parentRows", "currentRow", "parentRow", "getAllCells", "getAllLeafColumns", "_getAllCellsByColumnId", "allCells", "reduce", "acc", "i", "ColumnFaceting", "_getFacetedRowModel", "getFacetedRowModel", "getPreFilteredRowModel", "_getFacetedUniqueValues", "getFacetedUniqueValues", "Map", "_getFacetedMinMaxValues", "getFacetedMinMaxValues", "includesString", "filterValue", "search", "toLowerCase", "toString", "autoRemove", "testFalsey", "includesStringSensitive", "_row$getValue2", "equalsString", "_row$getValue3", "arrIncludes", "_row$getValue4", "arrIncludesAll", "_row$getValue5", "arrIncludesSome", "_row$getValue6", "equals", "weakEquals", "inNumberRange", "rowValue", "resolveFilterValue", "unsafeMin", "unsafeMax", "parsedMin", "parseFloat", "parsedMax", "Number", "isNaN", "Infinity", "temp", "filterFns", "ColumnFiltering", "getDefaultColumnDef", "filterFn", "getInitialState", "state", "columnFilters", "getDefaultOptions", "onColumnFiltersChange", "filterFromLeafRows", "maxLeafRowFilterDepth", "getAutoFilterFn", "firstRow", "getCoreRowModel", "flatRows", "value", "getFilterFn", "_table$options$filter", "_table$options$filter2", "getCanFilter", "_column$columnDef$ena", "_table$options$enable", "_table$options$enable2", "enableColumnFilter", "enableColumnFilters", "enableFilters", "getIsFiltered", "getFilterIndex", "getFilterValue", "_table$getState$colum", "_table$getState$colum2", "_table$getState$colum3", "findIndex", "setFilterValue", "setColumnFilters", "previousFilter", "newFilter", "shouldAutoRemoveFilter", "_old$filter", "newFilterObj", "_old$map", "_table", "columnFiltersMeta", "updateFn", "_functionalUpdate", "resetColumnFilters", "defaultState", "_table$initialState$c", "_table$initialState", "initialState", "getFilteredRowModel", "_getFilteredRowModel", "manualFiltering", "sum", "_leafRows", "childRows", "next", "nextValue", "extent", "mean", "leafRows", "count", "median", "values", "mid", "floor", "nums", "sort", "a", "b", "unique", "from", "Set", "uniqueCount", "size", "_columnId", "aggregationFns", "ColumnGrouping", "aggregatedCell", "props", "_toString", "_props$getValue", "aggregationFn", "grouping", "onGroupingChange", "groupedColumnMode", "toggleGrouping", "setGrouping", "getCanGroup", "enableGrouping", "getGroupingValue", "getIsGrouped", "_table$getState$group", "getGroupedIndex", "_table$getState$group2", "indexOf", "getToggleGroupingHandler", "canGroup", "getAutoAggregationFn", "Object", "prototype", "call", "getAggregationFn", "_table$options$aggreg", "_table$options$aggreg2", "resetGrouping", "_table$initialState$g", "getPreGroupedRowModel", "getGroupedRowModel", "_getGroupedRowModel", "manualGrouping", "groupingColumnId", "_groupingValuesCache", "getIsPlaceholder", "getIsAggregated", "_row$subRows", "nonGroupingColumns", "col", "groupingColumns", "g", "ColumnOrdering", "columnOrder", "onColumnOrderChange", "getIndex", "position", "_getVisibleLeafColumns", "getIsFirstColumn", "_columns$", "getIsLastColumn", "_columns", "setColumnOrder", "resetColumnOrder", "orderedColumns", "columnOrderCopy", "columnsCopy", "targetColumnId", "shift", "foundIndex", "splice", "getDefaultColumnPinningState", "ColumnPinning", "onColumnPinningChange", "pin", "columnIds", "setColumnPinning", "_old$left3", "_old$right3", "_old$left", "_old$right", "_old$left2", "_old$right2", "getCanPin", "_d$columnDef$enablePi", "enablePinning", "enableColumnPinning", "getIsPinned", "leafColumnIds", "isLeft", "isRight", "getPinnedIndex", "getCenterVisibleCells", "_getAllVisibleCells", "leftAndRight", "getLeftVisibleCells", "cells", "getRightVisibleCells", "resetColumnPinning", "getIsSomeColumnsPinned", "_pinningState$positio", "pinningState", "_pinningState$left", "_pinningState$right", "getLeftLeafColumns", "getRightLeafColumns", "getCenterLeafColumns", "defaultColumnSizing", "minSize", "maxSize", "MAX_SAFE_INTEGER", "getDefaultColumnSizingInfoState", "startOffset", "startSize", "deltaOffset", "deltaPercentage", "isResizingColumn", "columnSizingStart", "ColumnSizing", "columnSizing", "columnSizingInfo", "columnResizeMode", "columnResizeDirection", "onColumnSizingChange", "onColumnSizingInfoChange", "getSize", "_column$columnDef$min", "_column$columnDef$max", "columnSize", "getStart", "slice", "getAfter", "resetSize", "setColumnSizing", "_ref2", "_", "rest", "getCanResize", "enableResizing", "enableColumnResizing", "getIsResizing", "_header$column$getSiz", "prevSiblingHeader", "getResizeHandler", "_contextDocument", "canResize", "e", "persist", "isTouchStartEvent", "touches", "clientX", "newColumnSizing", "updateOffset", "eventType", "clientXPos", "setColumnSizingInfo", "_old$startOffset", "_old$startSize", "deltaDirection", "_ref3", "headerSize", "onMove", "onEnd", "contextDocument", "document", "mouseEvents", "moveHandler", "upHandler", "removeEventListener", "touchEvents", "cancelable", "preventDefault", "stopPropagation", "_e$touches$", "passiveIfSupported", "passiveEventSupported", "passive", "addEventListener", "resetColumnSizing", "resetHeaderSizeInfo", "_table$initialState$c2", "getTotalSize", "_table$getHeaderGroup", "_table$getHeaderGroup2", "getLeftTotalSize", "_table$getLeftHeaderG", "_table$getLeftHeaderG2", "getCenterTotalSize", "_table$getCenterHeade", "_table$getCenterHeade2", "getRightTotalSize", "_table$getRightHeader", "_table$getRightHeader2", "passiveSupported", "supported", "noop", "window", "err", "type", "ColumnVisibility", "columnVisibility", "onColumnVisibilityChange", "toggleVisibility", "getCanHide", "setColumnVisibility", "childColumns", "c", "enableHiding", "getToggleVisibilityHandler", "target", "checked", "getVisibleCells", "makeVisibleColumnsMethod", "getColumns", "getVisibleFlatColumns", "getAllFlatColumns", "getLeftVisibleLeafColumns", "getRightVisibleLeafColumns", "getCenterVisibleLeafColumns", "resetColumnVisibility", "toggleAllColumnsVisible", "_value", "getIsAllColumnsVisible", "obj", "getIsSomeColumnsVisible", "getToggleAllColumnsVisibilityHandler", "_target", "GlobalFaceting", "_getGlobalFacetedRowModel", "getGlobalFacetedRowModel", "_getGlobalFacetedUniqueValues", "getGlobalFacetedUniqueValues", "_getGlobalFacetedMinMaxValues", "getGlobalFacetedMinMaxValues", "GlobalFiltering", "globalFilter", "onGlobalFilterChange", "globalFilterFn", "getColumnCanGlobalFilter", "_table$getCoreRowMode", "getCanGlobalFilter", "_table$options$getCol", "enableGlobalFilter", "getGlobalAutoFilterFn", "getGlobalFilterFn", "setGlobalFilter", "resetGlobalFilter", "RowExpanding", "expanded", "onExpandedChange", "paginateExpandedRows", "registered", "queued", "_autoResetExpanded", "_table$options$autoRe", "_queue", "autoResetAll", "autoResetExpanded", "manualExpanding", "resetExpanded", "setExpanded", "toggleAllRowsExpanded", "getIsAllRowsExpanded", "_table$initialState$e", "getCanSomeRowsExpand", "getPrePaginationRowModel", "getCanExpand", "getToggleAllRowsExpandedHandler", "getIsSomeRowsExpanded", "keys", "getRowModel", "getIsExpanded", "getExpandedDepth", "rowIds", "rowsById", "splitId", "getPreExpandedRowModel", "getSortedRowModel", "getExpandedRowModel", "_getExpandedRowModel", "toggleExpanded", "_expanded", "exists", "oldExpanded", "rowId", "_table$options$getIsR", "getIsRowExpanded", "_table$options$getRow", "getRowCanExpand", "enableExpanding", "getIsAllParentsExpanded", "isFullyExpanded", "getToggleExpandedHandler", "canExpand", "defaultPageIndex", "defaultPageSize", "getDefaultPaginationState", "pageIndex", "pageSize", "RowPagination", "pagination", "onPaginationChange", "_autoResetPageIndex", "autoResetPageIndex", "manualPagination", "resetPageIndex", "setPagination", "safeUpdater", "newState", "resetPagination", "_table$initialState$p", "setPageIndex", "maxPageIndex", "pageCount", "_table$initialState$p2", "resetPageSize", "_table$initialState$p3", "_table$initialState2", "setPageSize", "topRowIndex", "setPageCount", "_table$options$pageCo", "newPageCount", "getPageOptions", "getPageCount", "pageOptions", "fill", "getCanPreviousPage", "getCanNextPage", "previousPage", "nextPage", "firstPage", "lastPage", "getPaginationRowModel", "_getPaginationRowModel", "_table$options$pageCo2", "ceil", "getRowCount", "_table$options$rowCou", "rowCount", "rows", "getDefaultRowPinningState", "top", "bottom", "RowPinning", "rowPinning", "onRowPinningChange", "includeLeafRows", "includeParentRows", "leafRowIds", "parentRowIds", "setRowPinning", "_old$top3", "_old$bottom3", "_old$top", "_old$bottom", "has", "_old$top2", "_old$bottom2", "enableRowPinning", "isTop", "isBottom", "_ref4", "_visiblePinnedRowIds$", "visiblePinnedRowIds", "getTopRows", "getBottomRows", "_ref5", "resetRowPinning", "_table$initialState$r", "getIsSomeRowsPinned", "_pinningState$top", "_pinningState$bottom", "_getPinnedRows", "visibleRows", "pinnedRowIds", "_table$options$keepPi", "keepPinnedRows", "allRows", "topPinnedRowIds", "bottomPinnedRowIds", "getCenterRows", "topAndBottom", "RowSelection", "rowSelection", "onRowSelectionChange", "enableRowSelection", "enableMultiRowSelection", "enableSubRowSelection", "setRowSelection", "resetRowSelection", "toggleAllRowsSelected", "getIsAllRowsSelected", "preGroupedFlatRows", "getCanSelect", "toggleAllPageRowsSelected", "resolvedValue", "getIsAllPageRowsSelected", "mutateRowIsSelected", "getPreSelectedRowModel", "getSelectedRowModel", "rowModel", "selectRowsFn", "getFilteredSelectedRowModel", "getGroupedSelectedRowModel", "isAllRowsSelected", "paginationFlatRows", "isAllPageRowsSelected", "getIsSomeRowsSelected", "_table$getState$rowSe", "totalSelected", "getIsSomePageRowsSelected", "getIsSelected", "getIsSomeSelected", "getToggleAllRowsSelectedHandler", "getToggleAllPageRowsSelectedHandler", "toggleSelected", "isSelected", "_opts$selectChildren", "selectedRowIds", "selectChildren", "isRowSelected", "isSubRowSelected", "getIsAllSubRowsSelected", "getCanSelectSubRows", "getCanMultiSelect", "_table$options$enable3", "getToggleSelectedHandler", "canSelect", "includeChildren", "newSelectedFlatRows", "newSelectedRowsById", "recurseRows", "_row$subRows2", "selection", "_selection$row$id", "_row$subRows3", "allChildrenSelected", "someSelected", "subRow", "subRowChildrenSelected", "reSplitAlphaNumeric", "alphanumeric", "rowA", "rowB", "compareAlphanumeric", "alphanumericCaseSensitive", "text", "compareBasic", "textCaseSensitive", "datetime", "basic", "aStr", "bStr", "aa", "bb", "an", "parseInt", "bn", "combo", "sortingFns", "RowSorting", "sorting", "sortingFn", "sortUndefined", "onSortingChange", "isMultiSortEvent", "shiftKey", "getAutoSortingFn", "firstRows", "isString", "getAutoSortDir", "getSortingFn", "_table$options$sortin", "_table$options$sortin2", "toggleSorting", "desc", "multi", "nextSortingOrder", "getNextSortingOrder", "hasManualValue", "setSorting", "existingSorting", "existingIndex", "newSorting", "sortAction", "nextDesc", "getCanMultiSort", "_table$options$maxMul", "maxMultiSortColCount", "getFirstSortDir", "_column$columnDef$sor", "sortDescFirst", "firstSortDirection", "isSorted", "getIsSorted", "enableSortingRemoval", "enableMultiRemove", "getCanSort", "enableSorting", "_column$columnDef$ena2", "enableMultiSort", "_table$getState$sorti", "columnSort", "getSortIndex", "_table$getState$sorti2", "_table$getState$sorti3", "clearSorting", "getToggleSortingHandler", "canSort", "resetSorting", "_table$initialState$s", "getPreSortedRowModel", "_getSortedRowModel", "manualSorting", "builtInFeatures", "_options$_features", "_options$initialState", "debugTable", "defaultOptions", "assign", "mergeOptions", "coreInitialState", "_feature$getInitialSt", "queuedTimeout", "coreInstance", "cb", "Promise", "resolve", "then", "catch", "error", "setTimeout", "reset", "setOptions", "newOptions", "onStateChange", "_getRowId", "getRowId", "_getCoreRowModel", "searchAll", "_defaultColumn", "_props$renderValue$to", "_props$renderValue", "_getColumnDefs", "columnDefs", "recurseColumns", "groupingColumnDef", "_getAllFlatColumnsById", "flatColumns", "data", "accessRows", "originalRows", "getSubRows", "_row$originalSubRows", "originalSubRows", "getFacetedMinMaxValues", "table", "columnId", "memo", "_table$getColumn", "getColumn", "getFacetedRowModel", "facetedRowModel", "_facetedRowModel$flat", "undefined", "firstValue", "flatRows", "getUniqueValues", "facetedMinMaxValues", "i", "length", "values", "j", "value", "getMemoOptions", "options", "filterRows", "rows", "filterRowImpl", "filterFromLeafRows", "filterRowModelFromLeafs", "filterRowModelFromRoot", "rowsToFilter", "filterRow", "_table$options$maxLea", "newFilteredFlatRows", "newFilteredRowsById", "maxDepth", "maxLeafRowFilterDepth", "recurseFilterRows", "depth", "_row$subRows", "row", "newRow", "createRow", "id", "original", "index", "parentId", "columnFilters", "subRows", "push", "rowsById", "_table$options$maxLea2", "pass", "_row$subRows2", "getPreFilteredRowModel", "getState", "globalFilter", "getFilteredRowModel", "preRowModel", "filterableIds", "map", "d", "filter", "Boolean", "filterRowsImpl", "getFacetedUniqueValues", "Map", "facetedUniqueValues", "has", "_facetedUniqueValues$", "set", "get", "rowModel", "columnFiltersMeta", "resolvedColumnFilters", "resolvedGlobalFilters", "forEach", "_filterFn$resolveFilt", "column", "filterFn", "getFilterFn", "process", "console", "warn", "resolvedValue", "resolveFilterValue", "globalFilterFn", "getGlobalFilterFn", "globallyFilterableColumns", "getAllLeafColumns", "getCanGlobalFilter", "_globalFilterFn$resol", "currentColumnFilter", "currentGlobalFilter", "filterMeta", "__global__", "_autoResetPageIndex", "getSortedRowModel", "table", "memo", "getState", "sorting", "getPreSortedRowModel", "rowModel", "rows", "length", "sortingState", "sortedFlatRows", "availableSorting", "filter", "sort", "_table$getColumn", "getColumn", "id", "getCanSort", "columnInfoById", "forEach", "sortEntry", "column", "sortUndefined", "columnDef", "invertSorting", "sortingFn", "getSortingFn", "sortData", "sortedData", "map", "row", "rowA", "rowB", "i", "_sortEntry$desc", "columnInfo", "isDesc", "desc", "sortInt", "aValue", "getValue", "bValue", "aUndefined", "undefined", "bUndefined", "index", "_row$subRows", "push", "subRows", "flatRows", "rowsById", "getMemoOptions", "options", "_autoResetPageIndex", "flexRender", "Comp", "props", "isReactComponent", "React", "createElement", "component", "isClassComponent", "isExoticComponent", "proto", "Object", "getPrototypeOf", "prototype", "$$typeof", "includes", "description", "useReactTable", "options", "resolvedOptions", "state", "onStateChange", "renderFallbackValue", "tableRef", "useState", "current", "createTable", "setState", "initialState", "setOptions", "prev", "updater", "memo", "fn", "a", "b", "i", "opts", "d", "m", "a", "b", "memo", "count", "min", "i", "measureElement", "key", "k", "_", "y", "p", "instance", "h", "q", "e", "t", "x", "y", "i", "immer", "isSet", "current", "fn", "Immer", "base", "p", "r", "Immer", "useImmer", "initialValue", "_useState", "useState", "freeze", "updateValue", "useCallback", "updater", "produce", "x", "getSortedRowModel", "A", "q", "e", "fn", "y", "i", "x", "i", "y", "x", "h", "x", "min", "max", "A", "e", "h", "from", "to", "e", "set", "h", "h", "x", "i", "q", "_", "j", "y", "x", "h", "T", "i", "A", "i", "T", "q", "columns", "typeHints", "v", "_", "y", "columnFilters", "x", "m"]
}
