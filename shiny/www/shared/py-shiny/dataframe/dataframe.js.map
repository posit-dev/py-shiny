{
  "version": 3,
  "sources": ["../../../../../js/node_modules/preact/src/util.js", "../../../../../js/node_modules/preact/src/options.js", "../../../../../js/node_modules/preact/src/create-element.js", "../../../../../js/node_modules/preact/src/component.js", "../../../../../js/node_modules/preact/src/create-context.js", "../../../../../js/node_modules/preact/src/constants.js", "../../../../../js/node_modules/preact/src/diff/children.js", "../../../../../js/node_modules/preact/src/diff/props.js", "../../../../../js/node_modules/preact/src/diff/index.js", "../../../../../js/node_modules/preact/src/render.js", "../../../../../js/node_modules/preact/src/clone-element.js", "../../../../../js/node_modules/preact/src/diff/catch-error.js", "../../../../../js/node_modules/preact/hooks/src/index.js", "../../../../../js/node_modules/preact/compat/src/util.js", "../../../../../js/node_modules/preact/compat/src/PureComponent.js", "../../../../../js/node_modules/preact/compat/src/memo.js", "../../../../../js/node_modules/preact/compat/src/forwardRef.js", "../../../../../js/node_modules/preact/compat/src/Children.js", "../../../../../js/node_modules/preact/compat/src/suspense.js", "../../../../../js/node_modules/preact/compat/src/suspense-list.js", "../../../../../js/node_modules/preact/compat/src/portals.js", "../../../../../js/node_modules/preact/compat/src/render.js", "../../../../../js/node_modules/preact/compat/src/index.js", "../../../../../js/node_modules/@tanstack/table-core/src/utils.ts", "../../../../../js/node_modules/@tanstack/table-core/src/core/column.ts", "../../../../../js/node_modules/@tanstack/table-core/src/core/headers.ts", "../../../../../js/node_modules/@tanstack/table-core/src/features/ColumnSizing.ts", "../../../../../js/node_modules/@tanstack/table-core/src/features/Expanding.ts", "../../../../../js/node_modules/@tanstack/table-core/src/filterFns.ts", "../../../../../js/node_modules/@tanstack/table-core/src/features/Filters.ts", "../../../../../js/node_modules/@tanstack/table-core/src/aggregationFns.ts", "../../../../../js/node_modules/@tanstack/table-core/src/features/Grouping.ts", "../../../../../js/node_modules/@tanstack/table-core/src/features/Ordering.ts", "../../../../../js/node_modules/@tanstack/table-core/src/features/Pagination.ts", "../../../../../js/node_modules/@tanstack/table-core/src/features/Pinning.ts", "../../../../../js/node_modules/@tanstack/table-core/src/features/RowSelection.ts", "../../../../../js/node_modules/@tanstack/table-core/src/sortingFns.ts", "../../../../../js/node_modules/@tanstack/table-core/src/features/Sorting.ts", "../../../../../js/node_modules/@tanstack/table-core/src/features/Visibility.ts", "../../../../../js/node_modules/@tanstack/table-core/src/core/table.ts", "../../../../../js/node_modules/@tanstack/table-core/src/core/cell.ts", "../../../../../js/node_modules/@tanstack/table-core/src/core/row.ts", "../../../../../js/node_modules/@tanstack/table-core/src/columnHelper.ts", "../../../../../js/node_modules/@tanstack/table-core/src/utils/getCoreRowModel.ts", "../../../../../js/node_modules/@tanstack/table-core/src/utils/filterRowsUtils.ts", "../../../../../js/node_modules/@tanstack/table-core/src/utils/getFilteredRowModel.ts", "../../../../../js/node_modules/@tanstack/table-core/src/utils/getFacetedRowModel.ts", "../../../../../js/node_modules/@tanstack/table-core/src/utils/getFacetedUniqueValues.ts", "../../../../../js/node_modules/@tanstack/table-core/src/utils/getFacetedMinMaxValues.ts", "../../../../../js/node_modules/@tanstack/table-core/src/utils/getSortedRowModel.ts", "../../../../../js/node_modules/@tanstack/table-core/src/utils/getGroupedRowModel.ts", "../../../../../js/node_modules/@tanstack/table-core/src/utils/getExpandedRowModel.ts", "../../../../../js/node_modules/@tanstack/table-core/src/utils/getPaginationRowModel.ts", "../../../../../js/node_modules/@tanstack/react-table/src/index.tsx", "../../../../../js/node_modules/@tanstack/react-virtual/build/lib/_virtual/_rollupPluginBabelHelpers.mjs", "../../../../../js/node_modules/@tanstack/virtual-core/build/lib/_virtual/_rollupPluginBabelHelpers.mjs", "../../../../../js/node_modules/@tanstack/virtual-core/src/utils.ts", "../../../../../js/node_modules/@tanstack/virtual-core/src/index.ts", "../../../../../js/node_modules/@tanstack/react-virtual/src/index.tsx", "../../../../../js/node_modules/preact/compat/client.mjs", "../../../../../js/node_modules/immer/src/utils/env.ts", "../../../../../js/node_modules/immer/src/utils/errors.ts", "../../../../../js/node_modules/immer/src/utils/common.ts", "../../../../../js/node_modules/immer/src/utils/plugins.ts", "../../../../../js/node_modules/immer/src/core/scope.ts", "../../../../../js/node_modules/immer/src/core/finalize.ts", "../../../../../js/node_modules/immer/src/core/proxy.ts", "../../../../../js/node_modules/immer/src/core/immerClass.ts", "../../../../../js/node_modules/immer/src/core/current.ts", "../../../../../js/node_modules/immer/src/plugins/patches.ts", "../../../../../js/node_modules/immer/src/plugins/mapset.ts", "../../../../../js/node_modules/immer/src/immer.ts", "../../../../../js/node_modules/use-immer/src/index.ts", "../../../../../js/dataframe/request.ts", "../../../../../js/dataframe/data-update.tsx", "../../../../../js/dataframe/cell.tsx", "../../../../../js/dataframe/cell-edit-map.tsx", "../../../../../js/dataframe/dom-utils.tsx", "../../../../../js/dataframe/filter-numeric.tsx", "../../../../../js/dataframe/filter.tsx", "../../../../../js/dataframe/immutable-set.tsx", "../../../../../js/dataframe/selection.tsx", "../../../../../js/dataframe/sort-arrows.tsx", "../../../../../js/dataframe/styles.scss", "../../../../../js/dataframe/tabindex-group.ts", "../../../../../js/dataframe/table-summary.tsx", "../../../../../js/dataframe/index.tsx"],
  "sourcesContent": ["import { EMPTY_ARR } from './constants';\n\nexport const isArray = Array.isArray;\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-ignore We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n", "import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {import('./internal').Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n", "import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * constructor for this virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n * @returns {import('./internal').VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is import('./internal').VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor === undefined;\n", "import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {import('./internal').Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function (update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) {\n\t\t\tthis._stateCallbacks.push(callback);\n\t\t}\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {import('./internal').Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nComponent.prototype.forceUpdate = function (callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * @param {import('./internal').VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {import('./internal').Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet vnode = component._vnode,\n\t\toldDom = vnode._dom,\n\t\tparentDom = component._parentDom;\n\n\tif (parentDom) {\n\t\tlet commitQueue = [];\n\t\tconst oldVNode = assign({}, vnode);\n\t\toldVNode._original = vnode._original + 1;\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tvnode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\n\t\t\tvnode._hydrating\n\t\t);\n\t\tcommitRoot(commitQueue, vnode);\n\n\t\tif (vnode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(vnode);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./internal').VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\nconst defer =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/**\n * @param {import('./internal').Component} a\n * @param {import('./internal').Component} b\n */\nconst depthSort = (a, b) => a._vnode._depth - b._vnode._depth;\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet c;\n\trerenderQueue.sort(depthSort);\n\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t// process() calls from getting scheduled while `queue` is still being consumed.\n\twhile ((c = rerenderQueue.shift())) {\n\t\tif (c._dirty) {\n\t\t\tlet renderQueueLength = rerenderQueue.length;\n\t\t\trenderComponent(c);\n\t\t\tif (rerenderQueue.length > renderQueueLength) {\n\t\t\t\t// When i.e. rerendering a provider additional new items can be injected, we want to\n\t\t\t\t// keep the order from top to bottom with those new items so we can handle them in a\n\t\t\t\t// single pass\n\t\t\t\trerenderQueue.sort(depthSort);\n\t\t\t}\n\t\t}\n\t}\n\tprocess._rerenderCount = 0;\n}\n\nprocess._rerenderCount = 0;\n", "import { enqueueRender } from './component';\n\nexport let i = 0;\n\nexport function createContext(defaultValue, contextId) {\n\tcontextId = '__cC' + i++;\n\n\tconst context = {\n\t\t_id: contextId,\n\t\t_defaultValue: defaultValue,\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tConsumer(props, contextValue) {\n\t\t\t// return props.children(\n\t\t\t// \tcontext[contextId] ? context[contextId].props.value : defaultValue\n\t\t\t// );\n\t\t\treturn props.children(contextValue);\n\t\t},\n\t\t/** @type {import('./internal').FunctionComponent} */\n\t\tProvider(props) {\n\t\t\tif (!this.getChildContext) {\n\t\t\t\t/** @type {import('./internal').Component[]} */\n\t\t\t\tlet subs = [];\n\t\t\t\tlet ctx = {};\n\t\t\t\tctx[contextId] = this;\n\n\t\t\t\tthis.getChildContext = () => ctx;\n\n\t\t\t\tthis.shouldComponentUpdate = function (_props) {\n\t\t\t\t\tif (this.props.value !== _props.value) {\n\t\t\t\t\t\t// I think the forced value propagation here was only needed when `options.debounceRendering` was being bypassed:\n\t\t\t\t\t\t// https://github.com/preactjs/preact/commit/4d339fb803bea09e9f198abf38ca1bf8ea4b7771#diff-54682ce380935a717e41b8bfc54737f6R358\n\t\t\t\t\t\t// In those cases though, even with the value corrected, we're double-rendering all nodes.\n\t\t\t\t\t\t// It might be better to just tell folks not to use force-sync mode.\n\t\t\t\t\t\t// Currently, using `useContext()` in a class component will overwrite its `this.context` value.\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\n\t\t\t\t\t\t// subs.some(c => {\n\t\t\t\t\t\t// \tc.context[contextId] = _props.value;\n\t\t\t\t\t\t// \tenqueueRender(c);\n\t\t\t\t\t\t// });\n\t\t\t\t\t\tsubs.some(c => {\n\t\t\t\t\t\t\tc._force = true;\n\t\t\t\t\t\t\tenqueueRender(c);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tthis.sub = c => {\n\t\t\t\t\tsubs.push(c);\n\t\t\t\t\tlet old = c.componentWillUnmount;\n\t\t\t\t\tc.componentWillUnmount = () => {\n\t\t\t\t\t\tsubs.splice(subs.indexOf(c), 1);\n\t\t\t\t\t\tif (old) old.call(c);\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn props.children;\n\t\t}\n\t};\n\n\t// Devtools needs access to the context object when it\n\t// encounters a Provider. This is necessary to support\n\t// setting `displayName` on the context object instead\n\t// of on the component itself. See:\n\t// https://reactjs.org/docs/context.html#contextdisplayname\n\n\treturn (context.Provider._contextRef = context.Consumer.contextType =\n\t\tcontext);\n}\n", "export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL =\n\t/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n", "import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { getDomSibling } from '../component';\nimport { isArray } from '../util';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').ComponentChildren[]} renderResult\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet i, j, oldVNode, childVNode, newDom, firstChildDom, refs;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet oldChildrenLength = oldChildren.length;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < renderResult.length; i++) {\n\t\tchildVNode = renderResult[i];\n\n\t\tif (\n\t\t\tchildVNode == null ||\n\t\t\ttypeof childVNode == 'boolean' ||\n\t\t\ttypeof childVNode == 'function'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t} else if (isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tchildVNode.ref ? childVNode.ref : null,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\t// Terser removes the `continue` here and wraps the loop body\n\t\t// in a `if (childVNode) { ... } condition\n\t\tif (childVNode == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\t// Check if we find a corresponding element in oldChildren.\n\t\t// If found, delete the array item by setting to `undefined`.\n\t\t// We use `undefined`, as `null` is reserved for empty placeholders\n\t\t// (holes).\n\t\toldVNode = oldChildren[i];\n\n\t\tif (\n\t\t\toldVNode === null ||\n\t\t\t(oldVNode &&\n\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\tchildVNode.type === oldVNode.type)\n\t\t) {\n\t\t\toldChildren[i] = undefined;\n\t\t} else {\n\t\t\t// Either oldVNode === undefined or oldChildrenLength > 0,\n\t\t\t// so after this loop oldVNode == null or oldVNode is a valid value.\n\t\t\tfor (j = 0; j < oldChildrenLength; j++) {\n\t\t\t\toldVNode = oldChildren[j];\n\t\t\t\t// If childVNode is unkeyed, we only match similarly unkeyed nodes, otherwise we match by key.\n\t\t\t\t// We always match by type (in either case).\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\t\tchildVNode.type === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\toldChildren[j] = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toldVNode = null;\n\t\t\t}\n\t\t}\n\n\t\toldVNode = oldVNode || EMPTY_OBJ;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating\n\t\t);\n\n\t\tnewDom = childVNode._dom;\n\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\n\t\t\tif (!refs) refs = [];\n\t\t\tif (oldVNode.ref) refs.push(oldVNode.ref, null, childVNode);\n\t\t\trefs.push(j, childVNode._component || newDom, childVNode);\n\t\t}\n\n\t\tif (newDom != null) {\n\t\t\tif (firstChildDom == null) {\n\t\t\t\tfirstChildDom = newDom;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\t\tchildVNode._children === oldVNode._children\n\t\t\t) {\n\t\t\t\tchildVNode._nextDom = oldDom = reorderChildren(\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldDom,\n\t\t\t\t\tparentDom\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldVNode,\n\t\t\t\t\toldChildren,\n\t\t\t\t\tnewDom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof newParentVNode.type == 'function') {\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\n\t\t\t\t//\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t\t\t\t// node's nextSibling.\n\t\t\t\tnewParentVNode._nextDom = oldDom;\n\t\t\t}\n\t\t} else if (\n\t\t\toldDom &&\n\t\t\toldVNode._dom == oldDom &&\n\t\t\toldDom.parentNode != parentDom\n\t\t) {\n\t\t\t// The above condition is to handle null placeholders. See test in placeholder.test.js:\n\t\t\t// `efficiently replace null placeholders in parent rerenders`\n\t\t\toldDom = getDomSibling(oldVNode);\n\t\t}\n\t}\n\n\tnewParentVNode._dom = firstChildDom;\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i = oldChildrenLength; i--; ) {\n\t\tif (oldChildren[i] != null) {\n\t\t\tif (\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\n\t\t\t\toldChildren[i]._dom != null &&\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\n\t\t\t) {\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\n\t\t\t\t// _nextDom to it\n\t\t\t\tnewParentVNode._nextDom = getLastDom(oldParentVNode).nextSibling;\n\t\t\t}\n\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\n\t\t}\n\t}\n\n\t// Set refs only after unmount\n\tif (refs) {\n\t\tfor (i = 0; i < refs.length; i++) {\n\t\t\tapplyRef(refs[i], refs[++i], refs[++i]);\n\t\t}\n\t}\n}\n\nfunction reorderChildren(childVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\tlet c = childVNode._children;\n\tlet tmp = 0;\n\tfor (; c && tmp < c.length; tmp++) {\n\t\tlet vnode = c[tmp];\n\t\tif (vnode) {\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\n\t\t\t// (childVNode here).\n\t\t\tvnode._parent = childVNode;\n\n\t\t\tif (typeof vnode.type == 'function') {\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(parentDom, vnode, vnode, c, vnode._dom, oldDom);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @returns {import('../internal').VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\nfunction placeChild(\n\tparentDom,\n\tchildVNode,\n\toldVNode,\n\toldChildren,\n\tnewDom,\n\toldDom\n) {\n\tlet nextDom;\n\tif (childVNode._nextDom !== undefined) {\n\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\n\t\t// of last DOM child of this child VNode\n\t\tnextDom = childVNode._nextDom;\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\n\t\t// it is only used by `diffChildren` to determine where to resume the diff after\n\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\n\t\t// can clean up the property\n\t\tchildVNode._nextDom = undefined;\n\t} else if (\n\t\toldVNode == null ||\n\t\tnewDom != oldDom ||\n\t\tnewDom.parentNode == null\n\t) {\n\t\touter: if (oldDom == null || oldDom.parentNode !== parentDom) {\n\t\t\tparentDom.appendChild(newDom);\n\t\t\tnextDom = null;\n\t\t} else {\n\t\t\t// `j<oldChildrenLength; j+=2` is an alternative to `j++<oldChildrenLength/2`\n\t\t\tfor (\n\t\t\t\tlet sibDom = oldDom, j = 0;\n\t\t\t\t(sibDom = sibDom.nextSibling) && j < oldChildren.length;\n\t\t\t\tj += 1\n\t\t\t) {\n\t\t\t\tif (sibDom == newDom) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparentDom.insertBefore(newDom, oldDom);\n\t\t\tnextDom = oldDom;\n\t\t}\n\t}\n\n\t// If we have pre-calculated the nextDOM node, use it. Else calculate it now\n\t// Strictly check for `undefined` here cuz `null` is a valid value of `nextDom`.\n\t// See more detail in create-element.js:createVNode\n\tif (nextDom !== undefined) {\n\t\toldDom = nextDom;\n\t} else {\n\t\toldDom = newDom.nextSibling;\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * @param {import('../internal').VNode} vnode\n */\nfunction getLastDom(vnode) {\n\tif (vnode.type == null || typeof vnode.type === 'string') {\n\t\treturn vnode._dom;\n\t}\n\n\tif (vnode._children) {\n\t\tfor (let i = vnode._children.length - 1; i >= 0; i--) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child) {\n\t\t\t\tlet lastDom = getLastDom(child);\n\t\t\t\tif (lastDom) {\n\t\t\t\t\treturn lastDom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n", "import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n * @param {boolean} hydrate Whether or not we are in hydration mode\n */\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\n\tlet i;\n\n\tfor (i in oldProps) {\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n\n\tfor (i in newProps) {\n\t\tif (\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\n\t\t\ti !== 'children' &&\n\t\t\ti !== 'key' &&\n\t\t\ti !== 'value' &&\n\t\t\ti !== 'checked' &&\n\t\t\toldProps[i] !== newProps[i]\n\t\t) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value == null ? '' : value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture = name !== (name = name.replace(/Capture$/, ''));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\n\t\t\t}\n\t\t} else {\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\tdom.removeEventListener(name, handler, useCapture);\n\t\t}\n\t} else if (name !== 'dangerouslySetInnerHTML') {\n\t\tif (isSvg) {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname !== 'width' &&\n\t\t\tname !== 'height' &&\n\t\t\tname !== 'href' &&\n\t\t\tname !== 'list' &&\n\t\t\tname !== 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname !== 'tabIndex' &&\n\t\t\tname !== 'download' &&\n\t\t\tname !== 'rowSpan' &&\n\t\t\tname !== 'colSpan' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// aria- and data- attributes have no boolean representation.\n\t\t// A `false` value is different from the attribute not being\n\t\t// present, so we can't remove it. For non-boolean aria\n\t\t// attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost too many bytes. On top of\n\t\t// that other frameworks generally stringify `false`.\n\n\t\tif (typeof value === 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (value != null && (value !== false || name[4] === '-')) {\n\t\t\tdom.setAttribute(name, value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type + false](options.event ? options.event(e) : e);\n}\n\nfunction eventProxyCapture(e) {\n\treturn this._listeners[e.type + true](options.event ? options.event(e) : e);\n}\n", "import { EMPTY_OBJ } from '../constants';\nimport { Component, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps, setProperty } from './props';\nimport { assign, isArray, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} [isHydrating] Whether or not we are in hydration\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._hydrating != null) {\n\t\tisHydrating = oldVNode._hydrating;\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\t// if we resume, we want the tree to be \"unlocked\"\n\t\tnewVNode._hydrating = null;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\ttry {\n\t\touter: if (typeof newType == 'function') {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\t\t\tc._vnode = newVNode;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t(!c._force &&\n\t\t\t\t\t\tc.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\tnewVNode._original === oldVNode._original\n\t\t\t\t) {\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) {\n\t\t\t\t\t\t// When we are dealing with a bail because of sCU we have to update\n\t\t\t\t\t\t// the props, state and dirty-state.\n\t\t\t\t\t\t// when we are dealing with strict-equality we don't as the child could still\n\t\t\t\t\t\t// be dirtied see #3883\n\t\t\t\t\t\tc.props = newProps;\n\t\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t\tc._dirty = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// In cases of bailing due to strict-equality we have to reset force as well\n\t\t\t\t\tc._force = false;\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\n\t\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t\t}\n\t\t\t\t\tc._stateCallbacks = [];\n\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc._parentDom = parentDom;\n\n\t\t\tlet renderHook = options._render,\n\t\t\t\tcount = 0;\n\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\tc.state = c._nextState;\n\t\t\t\tc._dirty = false;\n\n\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t}\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\tc._dirty = false;\n\t\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\t\t// Handle setState called in render, see #2553\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t} while (c._dirty && ++count < 25);\n\t\t\t}\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tisArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._hydrating = null;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\n\t\t\tc._force = false;\n\t\t} else if (\n\t\t\texcessDomChildren == null &&\n\t\t\tnewVNode._original === oldVNode._original\n\t\t) {\n\t\t\tnewVNode._children = oldVNode._children;\n\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t} else {\n\t\t\tnewVNode._dom = diffElementNodes(\n\t\t\t\toldVNode._dom,\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\tisHydrating\n\t\t\t);\n\t\t}\n\n\t\tif ((tmp = options.diffed)) tmp(newVNode);\n\t} catch (e) {\n\t\tnewVNode._original = null;\n\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\tnewVNode._dom = oldDom;\n\t\t\tnewVNode._hydrating = !!isHydrating;\n\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t// ^ could possibly be simplified to:\n\t\t\t// excessDomChildren.length = 0;\n\t\t}\n\t\toptions._catchError(e, newVNode, oldVNode);\n\t}\n}\n\n/**\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').VNode} root\n */\nexport function commitRoot(commitQueue, root) {\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = newVNode.type;\n\tlet i = 0;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tif (nodeType === 'svg') isSvg = true;\n\n\tif (excessDomChildren != null) {\n\t\tfor (; i < excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tchild &&\n\t\t\t\t'setAttribute' in child === !!nodeType &&\n\t\t\t\t(nodeType ? child.localName === nodeType : child.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS(\n\t\t\t\t'http://www.w3.org/2000/svg',\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType\n\t\t\t);\n\t\t} else {\n\t\t\tdom = document.createElement(\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType,\n\t\t\t\tnewProps.is && newProps\n\t\t\t);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tif (!isHydrating) {\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\n\t\t\t// we should read the existing DOM attributes to diff them\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\toldProps = {};\n\t\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHtml || oldHtml) {\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\t\tif (\n\t\t\t\t\t!newHtml ||\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\n\t\t\t\t) {\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\ti = newVNode.props.children;\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tisArray(i) ? i : [i],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (as above, don't diff props during hydration)\n\t\tif (!isHydrating) {\n\t\t\tif (\n\t\t\t\t'value' in newProps &&\n\t\t\t\t(i = newProps.value) !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(i !== dom.value ||\n\t\t\t\t\t(nodeType === 'progress' && !i) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && i !== oldProps.value))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'checked' in newProps &&\n\t\t\t\t(i = newProps.checked) !== undefined &&\n\t\t\t\ti !== dom.checked\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} ref\n * @param {any} value\n * @param {import('../internal').VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\n * initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) {\n\t\t\tapplyRef(r, null, parentVNode);\n\t\t}\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t\tvnode._component = undefined;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(\n\t\t\t\t\tr[i],\n\t\t\t\t\tparentVNode,\n\t\t\t\t\tskipRemove || typeof vnode.type !== 'function'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove && vnode._dom != null) {\n\t\tremoveNode(vnode._dom);\n\t}\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._parent = vnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n", "import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode === 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = ((!isHydrating && replaceNode) || parentDom)._children =\n\t\tcreateElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.firstChild\n\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t? oldVNode._dom\n\t\t\t: parentDom.firstChild,\n\t\tisHydrating\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n", "import { assign, slice } from './util';\nimport { createVNode } from './create-element';\n\n/**\n * Clones the given VNode, optionally adding attributes/props and replacing its children.\n * @param {import('./internal').VNode} vnode The virtual DOM element to clone\n * @param {object} props Attributes/props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Any additional arguments will be used as replacement children.\n * @returns {import('./internal').VNode}\n */\nexport function cloneElement(vnode, props, children) {\n\tlet normalizedProps = assign({}, vnode.props),\n\t\tkey,\n\t\tref,\n\t\ti;\n\n\tlet defaultProps;\n\n\tif (vnode.type && vnode.type.defaultProps) {\n\t\tdefaultProps = vnode.type.defaultProps;\n\t}\n\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse if (props[i] === undefined && defaultProps !== undefined) {\n\t\t\tnormalizedProps[i] = defaultProps[i];\n\t\t} else {\n\t\t\tnormalizedProps[i] = props[i];\n\t\t}\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\treturn createVNode(\n\t\tvnode.type,\n\t\tnormalizedProps,\n\t\tkey || vnode.key,\n\t\tref || vnode.ref,\n\t\tnull\n\t);\n}\n", "/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').VNode} vnode The vnode that threw\n * the error that was caught (except for unmounting when this parameter\n * is the highest parent that was being unmounted)\n * @param {import('../internal').VNode} [oldVNode]\n * @param {import('../internal').ErrorInfo} [errorInfo]\n */\nexport function _catchError(error, vnode, oldVNode, errorInfo) {\n\t/** @type {import('../internal').Component} */\n\tlet component, ctor, handled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error, errorInfo || {});\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n", "import { options } from 'preact';\n\n/** @type {number} */\nlet currentIndex;\n\n/** @type {import('./internal').Component} */\nlet currentComponent;\n\n/** @type {import('./internal').Component} */\nlet previousComponent;\n\n/** @type {number} */\nlet currentHook = 0;\n\n/** @type {Array<import('./internal').Component>} */\nlet afterPaintEffects = [];\n\nlet EMPTY = [];\n\nlet oldBeforeDiff = options._diff;\nlet oldBeforeRender = options._render;\nlet oldAfterDiff = options.diffed;\nlet oldCommit = options._commit;\nlet oldBeforeUnmount = options.unmount;\n\nconst RAF_TIMEOUT = 100;\nlet prevRaf;\n\noptions._diff = vnode => {\n\tcurrentComponent = null;\n\tif (oldBeforeDiff) oldBeforeDiff(vnode);\n};\n\noptions._render = vnode => {\n\tif (oldBeforeRender) oldBeforeRender(vnode);\n\n\tcurrentComponent = vnode._component;\n\tcurrentIndex = 0;\n\n\tconst hooks = currentComponent.__hooks;\n\tif (hooks) {\n\t\tif (previousComponent === currentComponent) {\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentComponent._renderCallbacks = [];\n\t\t\thooks._list.forEach(hookItem => {\n\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t}\n\t\t\t\thookItem._pendingValue = EMPTY;\n\t\t\t\thookItem._nextValue = hookItem._pendingArgs = undefined;\n\t\t\t});\n\t\t} else {\n\t\t\thooks._pendingEffects.forEach(invokeCleanup);\n\t\t\thooks._pendingEffects.forEach(invokeEffect);\n\t\t\thooks._pendingEffects = [];\n\t\t\tcurrentIndex = 0;\n\t\t}\n\t}\n\tpreviousComponent = currentComponent;\n};\n\noptions.diffed = vnode => {\n\tif (oldAfterDiff) oldAfterDiff(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tif (c.__hooks._pendingEffects.length) afterPaint(afterPaintEffects.push(c));\n\t\tc.__hooks._list.forEach(hookItem => {\n\t\t\tif (hookItem._pendingArgs) {\n\t\t\t\thookItem._args = hookItem._pendingArgs;\n\t\t\t}\n\t\t\tif (hookItem._pendingValue !== EMPTY) {\n\t\t\t\thookItem._value = hookItem._pendingValue;\n\t\t\t}\n\t\t\thookItem._pendingArgs = undefined;\n\t\t\thookItem._pendingValue = EMPTY;\n\t\t});\n\t}\n\tpreviousComponent = currentComponent = null;\n};\n\noptions._commit = (vnode, commitQueue) => {\n\tcommitQueue.some(component => {\n\t\ttry {\n\t\t\tcomponent._renderCallbacks.forEach(invokeCleanup);\n\t\t\tcomponent._renderCallbacks = component._renderCallbacks.filter(cb =>\n\t\t\t\tcb._value ? invokeEffect(cb) : true\n\t\t\t);\n\t\t} catch (e) {\n\t\t\tcommitQueue.some(c => {\n\t\t\t\tif (c._renderCallbacks) c._renderCallbacks = [];\n\t\t\t});\n\t\t\tcommitQueue = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t});\n\n\tif (oldCommit) oldCommit(vnode, commitQueue);\n};\n\noptions.unmount = vnode => {\n\tif (oldBeforeUnmount) oldBeforeUnmount(vnode);\n\n\tconst c = vnode._component;\n\tif (c && c.__hooks) {\n\t\tlet hasErrored;\n\t\tc.__hooks._list.forEach(s => {\n\t\t\ttry {\n\t\t\t\tinvokeCleanup(s);\n\t\t\t} catch (e) {\n\t\t\t\thasErrored = e;\n\t\t\t}\n\t\t});\n\t\tc.__hooks = undefined;\n\t\tif (hasErrored) options._catchError(hasErrored, c._vnode);\n\t}\n};\n\n/**\n * Get a hook's state from the currentComponent\n * @param {number} index The index of the hook to get\n * @param {number} type The index of the hook to get\n * @returns {any}\n */\nfunction getHookState(index, type) {\n\tif (options._hook) {\n\t\toptions._hook(currentComponent, index, currentHook || type);\n\t}\n\tcurrentHook = 0;\n\n\t// Largely inspired by:\n\t// * https://github.com/michael-klein/funcy.js/blob/f6be73468e6ec46b0ff5aa3cc4c9baf72a29025a/src/hooks/core_hooks.mjs\n\t// * https://github.com/michael-klein/funcy.js/blob/650beaa58c43c33a74820a3c98b3c7079cf2e333/src/renderer.mjs\n\t// Other implementations to look at:\n\t// * https://codesandbox.io/s/mnox05qp8\n\tconst hooks =\n\t\tcurrentComponent.__hooks ||\n\t\t(currentComponent.__hooks = {\n\t\t\t_list: [],\n\t\t\t_pendingEffects: []\n\t\t});\n\n\tif (index >= hooks._list.length) {\n\t\thooks._list.push({ _pendingValue: EMPTY });\n\t}\n\treturn hooks._list[index];\n}\n\n/**\n * @param {import('./index').StateUpdater<any>} [initialState]\n */\nexport function useState(initialState) {\n\tcurrentHook = 1;\n\treturn useReducer(invokeOrReturn, initialState);\n}\n\n/**\n * @param {import('./index').Reducer<any, any>} reducer\n * @param {import('./index').StateUpdater<any>} initialState\n * @param {(initialState: any) => void} [init]\n * @returns {[ any, (state: any) => void ]}\n */\nexport function useReducer(reducer, initialState, init) {\n\t/** @type {import('./internal').ReducerHookState} */\n\tconst hookState = getHookState(currentIndex++, 2);\n\thookState._reducer = reducer;\n\tif (!hookState._component) {\n\t\thookState._value = [\n\t\t\t!init ? invokeOrReturn(undefined, initialState) : init(initialState),\n\n\t\t\taction => {\n\t\t\t\tconst currentValue = hookState._nextValue\n\t\t\t\t\t? hookState._nextValue[0]\n\t\t\t\t\t: hookState._value[0];\n\t\t\t\tconst nextValue = hookState._reducer(currentValue, action);\n\n\t\t\t\tif (currentValue !== nextValue) {\n\t\t\t\t\thookState._nextValue = [nextValue, hookState._value[1]];\n\t\t\t\t\thookState._component.setState({});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\n\t\thookState._component = currentComponent;\n\n\t\tif (!currentComponent._hasScuFromHooks) {\n\t\t\tcurrentComponent._hasScuFromHooks = true;\n\t\t\tlet prevScu = currentComponent.shouldComponentUpdate;\n\t\t\tconst prevCWU = currentComponent.componentWillUpdate;\n\n\t\t\t// If we're dealing with a forced update `shouldComponentUpdate` will\n\t\t\t// not be called. But we use that to update the hook values, so we\n\t\t\t// need to call it.\n\t\t\tcurrentComponent.componentWillUpdate = function (p, s, c) {\n\t\t\t\tif (this._force) {\n\t\t\t\t\tlet tmp = prevScu;\n\t\t\t\t\t// Clear to avoid other sCU hooks from being called\n\t\t\t\t\tprevScu = undefined;\n\t\t\t\t\tupdateHookState(p, s, c);\n\t\t\t\t\tprevScu = tmp;\n\t\t\t\t}\n\n\t\t\t\tif (prevCWU) prevCWU.call(this, p, s, c);\n\t\t\t};\n\n\t\t\t// This SCU has the purpose of bailing out after repeated updates\n\t\t\t// to stateful hooks.\n\t\t\t// we store the next value in _nextValue[0] and keep doing that for all\n\t\t\t// state setters, if we have next states and\n\t\t\t// all next states within a component end up being equal to their original state\n\t\t\t// we are safe to bail out for this specific component.\n\t\t\t/**\n\t\t\t *\n\t\t\t * @type {import('./internal').Component[\"shouldComponentUpdate\"]}\n\t\t\t */\n\t\t\t// @ts-ignore - We don't use TS to downtranspile\n\t\t\t// eslint-disable-next-line no-inner-declarations\n\t\t\tfunction updateHookState(p, s, c) {\n\t\t\t\tif (!hookState._component.__hooks) return true;\n\n\t\t\t\tconst stateHooks = hookState._component.__hooks._list.filter(\n\t\t\t\t\tx => x._component\n\t\t\t\t);\n\t\t\t\tconst allHooksEmpty = stateHooks.every(x => !x._nextValue);\n\t\t\t\t// When we have no updated hooks in the component we invoke the previous SCU or\n\t\t\t\t// traverse the VDOM tree further.\n\t\t\t\tif (allHooksEmpty) {\n\t\t\t\t\treturn prevScu ? prevScu.call(this, p, s, c) : true;\n\t\t\t\t}\n\n\t\t\t\t// We check whether we have components with a nextValue set that\n\t\t\t\t// have values that aren't equal to one another this pushes\n\t\t\t\t// us to update further down the tree\n\t\t\t\tlet shouldUpdate = false;\n\t\t\t\tstateHooks.forEach(hookItem => {\n\t\t\t\t\tif (hookItem._nextValue) {\n\t\t\t\t\t\tconst currentValue = hookItem._value[0];\n\t\t\t\t\t\thookItem._value = hookItem._nextValue;\n\t\t\t\t\t\thookItem._nextValue = undefined;\n\t\t\t\t\t\tif (currentValue !== hookItem._value[0]) shouldUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn shouldUpdate || hookState._component.props !== p\n\t\t\t\t\t? prevScu\n\t\t\t\t\t\t? prevScu.call(this, p, s, c)\n\t\t\t\t\t\t: true\n\t\t\t\t\t: false;\n\t\t\t}\n\n\t\t\tcurrentComponent.shouldComponentUpdate = updateHookState;\n\t\t}\n\t}\n\n\treturn hookState._nextValue || hookState._value;\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 3);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent.__hooks._pendingEffects.push(state);\n\t}\n}\n\n/**\n * @param {import('./internal').Effect} callback\n * @param {any[]} args\n */\nexport function useLayoutEffect(callback, args) {\n\t/** @type {import('./internal').EffectHookState} */\n\tconst state = getHookState(currentIndex++, 4);\n\tif (!options._skipEffects && argsChanged(state._args, args)) {\n\t\tstate._value = callback;\n\t\tstate._pendingArgs = args;\n\n\t\tcurrentComponent._renderCallbacks.push(state);\n\t}\n}\n\nexport function useRef(initialValue) {\n\tcurrentHook = 5;\n\treturn useMemo(() => ({ current: initialValue }), []);\n}\n\n/**\n * @param {object} ref\n * @param {() => object} createHandle\n * @param {any[]} args\n */\nexport function useImperativeHandle(ref, createHandle, args) {\n\tcurrentHook = 6;\n\tuseLayoutEffect(\n\t\t() => {\n\t\t\tif (typeof ref == 'function') {\n\t\t\t\tref(createHandle());\n\t\t\t\treturn () => ref(null);\n\t\t\t} else if (ref) {\n\t\t\t\tref.current = createHandle();\n\t\t\t\treturn () => (ref.current = null);\n\t\t\t}\n\t\t},\n\t\targs == null ? args : args.concat(ref)\n\t);\n}\n\n/**\n * @param {() => any} factory\n * @param {any[]} args\n */\nexport function useMemo(factory, args) {\n\t/** @type {import('./internal').MemoHookState} */\n\tconst state = getHookState(currentIndex++, 7);\n\tif (argsChanged(state._args, args)) {\n\t\tstate._pendingValue = factory();\n\t\tstate._pendingArgs = args;\n\t\tstate._factory = factory;\n\t\treturn state._pendingValue;\n\t}\n\n\treturn state._value;\n}\n\n/**\n * @param {() => void} callback\n * @param {any[]} args\n */\nexport function useCallback(callback, args) {\n\tcurrentHook = 8;\n\treturn useMemo(() => callback, args);\n}\n\n/**\n * @param {import('./internal').PreactContext} context\n */\nexport function useContext(context) {\n\tconst provider = currentComponent.context[context._id];\n\t// We could skip this call here, but than we'd not call\n\t// `options._hook`. We need to do that in order to make\n\t// the devtools aware of this hook.\n\t/** @type {import('./internal').ContextHookState} */\n\tconst state = getHookState(currentIndex++, 9);\n\t// The devtools needs access to the context object to\n\t// be able to pull of the default value when no provider\n\t// is present in the tree.\n\tstate._context = context;\n\tif (!provider) return context._defaultValue;\n\t// This is probably not safe to convert to \"!\"\n\tif (state._value == null) {\n\t\tstate._value = true;\n\t\tprovider.sub(currentComponent);\n\t}\n\treturn provider.props.value;\n}\n\n/**\n * Display a custom label for a custom hook for the devtools panel\n * @type {<T>(value: T, cb?: (value: T) => string | number) => void}\n */\nexport function useDebugValue(value, formatter) {\n\tif (options.useDebugValue) {\n\t\toptions.useDebugValue(formatter ? formatter(value) : value);\n\t}\n}\n\n/**\n * @param {(error: any, errorInfo: import('preact').ErrorInfo) => void} cb\n */\nexport function useErrorBoundary(cb) {\n\t/** @type {import('./internal').ErrorBoundaryHookState} */\n\tconst state = getHookState(currentIndex++, 10);\n\tconst errState = useState();\n\tstate._value = cb;\n\tif (!currentComponent.componentDidCatch) {\n\t\tcurrentComponent.componentDidCatch = (err, errorInfo) => {\n\t\t\tif (state._value) state._value(err, errorInfo);\n\t\t\terrState[1](err);\n\t\t};\n\t}\n\treturn [\n\t\terrState[0],\n\t\t() => {\n\t\t\terrState[1](undefined);\n\t\t}\n\t];\n}\n\nexport function useId() {\n\tconst state = getHookState(currentIndex++, 11);\n\tif (!state._value) {\n\t\t// Grab either the root node or the nearest async boundary node.\n\t\t/** @type {import('./internal.d').VNode} */\n\t\tlet root = currentComponent._vnode;\n\t\twhile (root !== null && !root._mask && root._parent !== null) {\n\t\t\troot = root._parent;\n\t\t}\n\n\t\tlet mask = root._mask || (root._mask = [0, 0]);\n\t\tstate._value = 'P' + mask[0] + '-' + mask[1]++;\n\t}\n\n\treturn state._value;\n}\n/**\n * After paint effects consumer.\n */\nfunction flushAfterPaintEffects() {\n\tlet component;\n\twhile ((component = afterPaintEffects.shift())) {\n\t\tif (!component._parentDom || !component.__hooks) continue;\n\t\ttry {\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeCleanup);\n\t\t\tcomponent.__hooks._pendingEffects.forEach(invokeEffect);\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t} catch (e) {\n\t\t\tcomponent.__hooks._pendingEffects = [];\n\t\t\toptions._catchError(e, component._vnode);\n\t\t}\n\t}\n}\n\nlet HAS_RAF = typeof requestAnimationFrame == 'function';\n\n/**\n * Schedule a callback to be invoked after the browser has a chance to paint a new frame.\n * Do this by combining requestAnimationFrame (rAF) + setTimeout to invoke a callback after\n * the next browser frame.\n *\n * Also, schedule a timeout in parallel to the the rAF to ensure the callback is invoked\n * even if RAF doesn't fire (for example if the browser tab is not visible)\n *\n * @param {() => void} callback\n */\nfunction afterNextFrame(callback) {\n\tconst done = () => {\n\t\tclearTimeout(timeout);\n\t\tif (HAS_RAF) cancelAnimationFrame(raf);\n\t\tsetTimeout(callback);\n\t};\n\tconst timeout = setTimeout(done, RAF_TIMEOUT);\n\n\tlet raf;\n\tif (HAS_RAF) {\n\t\traf = requestAnimationFrame(done);\n\t}\n}\n\n// Note: if someone used options.debounceRendering = requestAnimationFrame,\n// then effects will ALWAYS run on the NEXT frame instead of the current one, incurring a ~16ms delay.\n// Perhaps this is not such a big deal.\n/**\n * Schedule afterPaintEffects flush after the browser paints\n * @param {number} newQueueLength\n */\nfunction afterPaint(newQueueLength) {\n\tif (newQueueLength === 1 || prevRaf !== options.requestAnimationFrame) {\n\t\tprevRaf = options.requestAnimationFrame;\n\t\t(prevRaf || afterNextFrame)(flushAfterPaintEffects);\n\t}\n}\n\n/**\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeCleanup(hook) {\n\t// A hook cleanup can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\tlet cleanup = hook._cleanup;\n\tif (typeof cleanup == 'function') {\n\t\thook._cleanup = undefined;\n\t\tcleanup();\n\t}\n\n\tcurrentComponent = comp;\n}\n\n/**\n * Invoke a Hook's effect\n * @param {import('./internal').EffectHookState} hook\n */\nfunction invokeEffect(hook) {\n\t// A hook call can introduce a call to render which creates a new root, this will call options.vnode\n\t// and move the currentComponent away.\n\tconst comp = currentComponent;\n\thook._cleanup = hook._value();\n\tcurrentComponent = comp;\n}\n\n/**\n * @param {any[]} oldArgs\n * @param {any[]} newArgs\n */\nfunction argsChanged(oldArgs, newArgs) {\n\treturn (\n\t\t!oldArgs ||\n\t\toldArgs.length !== newArgs.length ||\n\t\tnewArgs.some((arg, index) => arg !== oldArgs[index])\n\t);\n}\n\nfunction invokeOrReturn(arg, f) {\n\treturn typeof f == 'function' ? f(arg) : f;\n}\n", "/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Check if two objects have a different shape\n * @param {object} a\n * @param {object} b\n * @returns {boolean}\n */\nexport function shallowDiffers(a, b) {\n\tfor (let i in a) if (i !== '__source' && !(i in b)) return true;\n\tfor (let i in b) if (i !== '__source' && a[i] !== b[i]) return true;\n\treturn false;\n}\n\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\n/**\n * Check if two values are the same value\n * @param {*} x\n * @param {*} y\n * @returns {boolean}\n */\nexport function is(x, y) {\n\treturn (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y);\n}\n", "import { Component } from 'preact';\nimport { shallowDiffers } from './util';\n\n/**\n * Component class with a predefined `shouldComponentUpdate` implementation\n */\nexport function PureComponent(p) {\n\tthis.props = p;\n}\nPureComponent.prototype = new Component();\n// Some third-party libraries check if this property is present\nPureComponent.prototype.isPureReactComponent = true;\nPureComponent.prototype.shouldComponentUpdate = function (props, state) {\n\treturn shallowDiffers(this.props, props) || shallowDiffers(this.state, state);\n};\n", "import { createElement } from 'preact';\nimport { shallowDiffers } from './util';\n\n/**\n * Memoize a component, so that it only updates when the props actually have\n * changed. This was previously known as `React.pure`.\n * @param {import('./internal').FunctionComponent} c functional component\n * @param {(prev: object, next: object) => boolean} [comparer] Custom equality function\n * @returns {import('./internal').FunctionComponent}\n */\nexport function memo(c, comparer) {\n\tfunction shouldUpdate(nextProps) {\n\t\tlet ref = this.props.ref;\n\t\tlet updateRef = ref == nextProps.ref;\n\t\tif (!updateRef && ref) {\n\t\t\tref.call ? ref(null) : (ref.current = null);\n\t\t}\n\n\t\tif (!comparer) {\n\t\t\treturn shallowDiffers(this.props, nextProps);\n\t\t}\n\n\t\treturn !comparer(this.props, nextProps) || !updateRef;\n\t}\n\n\tfunction Memoed(props) {\n\t\tthis.shouldComponentUpdate = shouldUpdate;\n\t\treturn createElement(c, props);\n\t}\n\tMemoed.displayName = 'Memo(' + (c.displayName || c.name) + ')';\n\tMemoed.prototype.isReactComponent = true;\n\tMemoed._forwarded = true;\n\treturn Memoed;\n}\n", "import { options } from 'preact';\nimport { assign } from './util';\n\nlet oldDiffHook = options._diff;\noptions._diff = vnode => {\n\tif (vnode.type && vnode.type._forwarded && vnode.ref) {\n\t\tvnode.props.ref = vnode.ref;\n\t\tvnode.ref = null;\n\t}\n\tif (oldDiffHook) oldDiffHook(vnode);\n};\n\nexport const REACT_FORWARD_SYMBOL =\n\t(typeof Symbol != 'undefined' &&\n\t\tSymbol.for &&\n\t\tSymbol.for('react.forward_ref')) ||\n\t0xf47;\n\n/**\n * Pass ref down to a child. This is mainly used in libraries with HOCs that\n * wrap components. Using `forwardRef` there is an easy way to get a reference\n * of the wrapped component instead of one of the wrapper itself.\n * @param {import('./index').ForwardFn} fn\n * @returns {import('./internal').FunctionComponent}\n */\nexport function forwardRef(fn) {\n\tfunction Forwarded(props) {\n\t\tlet clone = assign({}, props);\n\t\tdelete clone.ref;\n\t\treturn fn(clone, props.ref || null);\n\t}\n\n\t// mobx-react checks for this being present\n\tForwarded.$$typeof = REACT_FORWARD_SYMBOL;\n\t// mobx-react heavily relies on implementation details.\n\t// It expects an object here with a `render` property,\n\t// and prototype.render will fail. Without this\n\t// mobx-react throws.\n\tForwarded.render = Forwarded;\n\n\tForwarded.prototype.isReactComponent = Forwarded._forwarded = true;\n\tForwarded.displayName = 'ForwardRef(' + (fn.displayName || fn.name) + ')';\n\treturn Forwarded;\n}\n", "import { toChildArray } from 'preact';\n\nconst mapFn = (children, fn) => {\n\tif (children == null) return null;\n\treturn toChildArray(toChildArray(children).map(fn));\n};\n\n// This API is completely unnecessary for Preact, so it's basically passthrough.\nexport const Children = {\n\tmap: mapFn,\n\tforEach: mapFn,\n\tcount(children) {\n\t\treturn children ? toChildArray(children).length : 0;\n\t},\n\tonly(children) {\n\t\tconst normalized = toChildArray(children);\n\t\tif (normalized.length !== 1) throw 'Children.only';\n\t\treturn normalized[0];\n\t},\n\ttoArray: toChildArray\n};\n", "import { Component, createElement, options, Fragment } from 'preact';\nimport { assign } from './util';\n\nconst oldCatchError = options._catchError;\noptions._catchError = function (error, newVNode, oldVNode, errorInfo) {\n\tif (error.then) {\n\t\t/** @type {import('./internal').Component} */\n\t\tlet component;\n\t\tlet vnode = newVNode;\n\n\t\tfor (; (vnode = vnode._parent); ) {\n\t\t\tif ((component = vnode._component) && component._childDidSuspend) {\n\t\t\t\tif (newVNode._dom == null) {\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t}\n\t\t\t\t// Don't call oldCatchError if we found a Suspense\n\t\t\t\treturn component._childDidSuspend(error, newVNode);\n\t\t\t}\n\t\t}\n\t}\n\toldCatchError(error, newVNode, oldVNode, errorInfo);\n};\n\nconst oldUnmount = options.unmount;\noptions.unmount = function (vnode) {\n\t/** @type {import('./internal').Component} */\n\tconst component = vnode._component;\n\tif (component && component._onResolve) {\n\t\tcomponent._onResolve();\n\t}\n\n\t// if the component is still hydrating\n\t// most likely it is because the component is suspended\n\t// we set the vnode.type as `null` so that it is not a typeof function\n\t// so the unmount will remove the vnode._dom\n\tif (component && vnode._hydrating === true) {\n\t\tvnode.type = null;\n\t}\n\n\tif (oldUnmount) oldUnmount(vnode);\n};\n\nfunction detachedClone(vnode, detachedParent, parentDom) {\n\tif (vnode) {\n\t\tif (vnode._component && vnode._component.__hooks) {\n\t\t\tvnode._component.__hooks._list.forEach(effect => {\n\t\t\t\tif (typeof effect._cleanup == 'function') effect._cleanup();\n\t\t\t});\n\n\t\t\tvnode._component.__hooks = null;\n\t\t}\n\n\t\tvnode = assign({}, vnode);\n\t\tif (vnode._component != null) {\n\t\t\tif (vnode._component._parentDom === parentDom) {\n\t\t\t\tvnode._component._parentDom = detachedParent;\n\t\t\t}\n\t\t\tvnode._component = null;\n\t\t}\n\n\t\tvnode._children =\n\t\t\tvnode._children &&\n\t\t\tvnode._children.map(child =>\n\t\t\t\tdetachedClone(child, detachedParent, parentDom)\n\t\t\t);\n\t}\n\n\treturn vnode;\n}\n\nfunction removeOriginal(vnode, detachedParent, originalParent) {\n\tif (vnode) {\n\t\tvnode._original = null;\n\t\tvnode._children =\n\t\t\tvnode._children &&\n\t\t\tvnode._children.map(child =>\n\t\t\t\tremoveOriginal(child, detachedParent, originalParent)\n\t\t\t);\n\n\t\tif (vnode._component) {\n\t\t\tif (vnode._component._parentDom === detachedParent) {\n\t\t\t\tif (vnode._dom) {\n\t\t\t\t\toriginalParent.insertBefore(vnode._dom, vnode._nextDom);\n\t\t\t\t}\n\t\t\t\tvnode._component._force = true;\n\t\t\t\tvnode._component._parentDom = originalParent;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn vnode;\n}\n\n// having custom inheritance instead of a class here saves a lot of bytes\nexport function Suspense() {\n\t// we do not call super here to golf some bytes...\n\tthis._pendingSuspensionCount = 0;\n\tthis._suspenders = null;\n\tthis._detachOnNextRender = null;\n}\n\n// Things we do here to save some bytes but are not proper JS inheritance:\n// - call `new Component()` as the prototype\n// - do not set `Suspense.prototype.constructor` to `Suspense`\nSuspense.prototype = new Component();\n\n/**\n * @this {import('./internal').SuspenseComponent}\n * @param {Promise} promise The thrown promise\n * @param {import('./internal').VNode<any, any>} suspendingVNode The suspending component\n */\nSuspense.prototype._childDidSuspend = function (promise, suspendingVNode) {\n\tconst suspendingComponent = suspendingVNode._component;\n\n\t/** @type {import('./internal').SuspenseComponent} */\n\tconst c = this;\n\n\tif (c._suspenders == null) {\n\t\tc._suspenders = [];\n\t}\n\tc._suspenders.push(suspendingComponent);\n\n\tconst resolve = suspended(c._vnode);\n\n\tlet resolved = false;\n\tconst onResolved = () => {\n\t\tif (resolved) return;\n\n\t\tresolved = true;\n\t\tsuspendingComponent._onResolve = null;\n\n\t\tif (resolve) {\n\t\t\tresolve(onSuspensionComplete);\n\t\t} else {\n\t\t\tonSuspensionComplete();\n\t\t}\n\t};\n\n\tsuspendingComponent._onResolve = onResolved;\n\n\tconst onSuspensionComplete = () => {\n\t\tif (!--c._pendingSuspensionCount) {\n\t\t\t// If the suspension was during hydration we don't need to restore the\n\t\t\t// suspended children into the _children array\n\t\t\tif (c.state._suspended) {\n\t\t\t\tconst suspendedVNode = c.state._suspended;\n\t\t\t\tc._vnode._children[0] = removeOriginal(\n\t\t\t\t\tsuspendedVNode,\n\t\t\t\t\tsuspendedVNode._component._parentDom,\n\t\t\t\t\tsuspendedVNode._component._originalParentDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tc.setState({ _suspended: (c._detachOnNextRender = null) });\n\n\t\t\tlet suspended;\n\t\t\twhile ((suspended = c._suspenders.pop())) {\n\t\t\t\tsuspended.forceUpdate();\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t * We do not set `suspended: true` during hydration because we want the actual markup\n\t * to remain on screen and hydrate it when the suspense actually gets resolved.\n\t * While in non-hydration cases the usual fallback -> component flow would occour.\n\t */\n\tconst wasHydrating = suspendingVNode._hydrating === true;\n\tif (!c._pendingSuspensionCount++ && !wasHydrating) {\n\t\tc.setState({ _suspended: (c._detachOnNextRender = c._vnode._children[0]) });\n\t}\n\tpromise.then(onResolved, onResolved);\n};\n\nSuspense.prototype.componentWillUnmount = function () {\n\tthis._suspenders = [];\n};\n\n/**\n * @this {import('./internal').SuspenseComponent}\n * @param {import('./internal').SuspenseComponent[\"props\"]} props\n * @param {import('./internal').SuspenseState} state\n */\nSuspense.prototype.render = function (props, state) {\n\tif (this._detachOnNextRender) {\n\t\t// When the Suspense's _vnode was created by a call to createVNode\n\t\t// (i.e. due to a setState further up in the tree)\n\t\t// it's _children prop is null, in this case we \"forget\" about the parked vnodes to detach\n\t\tif (this._vnode._children) {\n\t\t\tconst detachedParent = document.createElement('div');\n\t\t\tconst detachedComponent = this._vnode._children[0]._component;\n\t\t\tthis._vnode._children[0] = detachedClone(\n\t\t\t\tthis._detachOnNextRender,\n\t\t\t\tdetachedParent,\n\t\t\t\t(detachedComponent._originalParentDom = detachedComponent._parentDom)\n\t\t\t);\n\t\t}\n\n\t\tthis._detachOnNextRender = null;\n\t}\n\n\t// Wrap fallback tree in a VNode that prevents itself from being marked as aborting mid-hydration:\n\t/** @type {import('./internal').VNode} */\n\tconst fallback =\n\t\tstate._suspended && createElement(Fragment, null, props.fallback);\n\tif (fallback) fallback._hydrating = null;\n\n\treturn [\n\t\tcreateElement(Fragment, null, state._suspended ? null : props.children),\n\t\tfallback\n\t];\n};\n\n/**\n * Checks and calls the parent component's _suspended method, passing in the\n * suspended vnode. This is a way for a parent (e.g. SuspenseList) to get notified\n * that one of its children/descendants suspended.\n *\n * The parent MAY return a callback. The callback will get called when the\n * suspension resolves, notifying the parent of the fact.\n * Moreover, the callback gets function `unsuspend` as a parameter. The resolved\n * child descendant will not actually get unsuspended until `unsuspend` gets called.\n * This is a way for the parent to delay unsuspending.\n *\n * If the parent does not return a callback then the resolved vnode\n * gets unsuspended immediately when it resolves.\n *\n * @param {import('./internal').VNode} vnode\n * @returns {((unsuspend: () => void) => void)?}\n */\nexport function suspended(vnode) {\n\t/** @type {import('./internal').Component} */\n\tlet component = vnode._parent._component;\n\treturn component && component._suspended && component._suspended(vnode);\n}\n\nexport function lazy(loader) {\n\tlet prom;\n\tlet component;\n\tlet error;\n\n\tfunction Lazy(props) {\n\t\tif (!prom) {\n\t\t\tprom = loader();\n\t\t\tprom.then(\n\t\t\t\texports => {\n\t\t\t\t\tcomponent = exports.default || exports;\n\t\t\t\t},\n\t\t\t\te => {\n\t\t\t\t\terror = e;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tif (error) {\n\t\t\tthrow error;\n\t\t}\n\n\t\tif (!component) {\n\t\t\tthrow prom;\n\t\t}\n\n\t\treturn createElement(component, props);\n\t}\n\n\tLazy.displayName = 'Lazy';\n\tLazy._forwarded = true;\n\treturn Lazy;\n}\n", "import { Component, toChildArray } from 'preact';\nimport { suspended } from './suspense.js';\n\n// Indexes to linked list nodes (nodes are stored as arrays to save bytes).\nconst SUSPENDED_COUNT = 0;\nconst RESOLVED_COUNT = 1;\nconst NEXT_NODE = 2;\n\n// Having custom inheritance instead of a class here saves a lot of bytes.\nexport function SuspenseList() {\n\tthis._next = null;\n\tthis._map = null;\n}\n\n// Mark one of child's earlier suspensions as resolved.\n// Some pending callbacks may become callable due to this\n// (e.g. the last suspended descendant gets resolved when\n// revealOrder === 'together'). Process those callbacks as well.\nconst resolve = (list, child, node) => {\n\tif (++node[RESOLVED_COUNT] === node[SUSPENDED_COUNT]) {\n\t\t// The number a child (or any of its descendants) has been suspended\n\t\t// matches the number of times it's been resolved. Therefore we\n\t\t// mark the child as completely resolved by deleting it from ._map.\n\t\t// This is used to figure out when *all* children have been completely\n\t\t// resolved when revealOrder is 'together'.\n\t\tlist._map.delete(child);\n\t}\n\n\t// If revealOrder is falsy then we can do an early exit, as the\n\t// callbacks won't get queued in the node anyway.\n\t// If revealOrder is 'together' then also do an early exit\n\t// if all suspended descendants have not yet been resolved.\n\tif (\n\t\t!list.props.revealOrder ||\n\t\t(list.props.revealOrder[0] === 't' && list._map.size)\n\t) {\n\t\treturn;\n\t}\n\n\t// Walk the currently suspended children in order, calling their\n\t// stored callbacks on the way. Stop if we encounter a child that\n\t// has not been completely resolved yet.\n\tnode = list._next;\n\twhile (node) {\n\t\twhile (node.length > 3) {\n\t\t\tnode.pop()();\n\t\t}\n\t\tif (node[RESOLVED_COUNT] < node[SUSPENDED_COUNT]) {\n\t\t\tbreak;\n\t\t}\n\t\tlist._next = node = node[NEXT_NODE];\n\t}\n};\n\n// Things we do here to save some bytes but are not proper JS inheritance:\n// - call `new Component()` as the prototype\n// - do not set `Suspense.prototype.constructor` to `Suspense`\nSuspenseList.prototype = new Component();\n\nSuspenseList.prototype._suspended = function (child) {\n\tconst list = this;\n\tconst delegated = suspended(list._vnode);\n\n\tlet node = list._map.get(child);\n\tnode[SUSPENDED_COUNT]++;\n\n\treturn unsuspend => {\n\t\tconst wrappedUnsuspend = () => {\n\t\t\tif (!list.props.revealOrder) {\n\t\t\t\t// Special case the undefined (falsy) revealOrder, as there\n\t\t\t\t// is no need to coordinate a specific order or unsuspends.\n\t\t\t\tunsuspend();\n\t\t\t} else {\n\t\t\t\tnode.push(unsuspend);\n\t\t\t\tresolve(list, child, node);\n\t\t\t}\n\t\t};\n\t\tif (delegated) {\n\t\t\tdelegated(wrappedUnsuspend);\n\t\t} else {\n\t\t\twrappedUnsuspend();\n\t\t}\n\t};\n};\n\nSuspenseList.prototype.render = function (props) {\n\tthis._next = null;\n\tthis._map = new Map();\n\n\tconst children = toChildArray(props.children);\n\tif (props.revealOrder && props.revealOrder[0] === 'b') {\n\t\t// If order === 'backwards' (or, well, anything starting with a 'b')\n\t\t// then flip the child list around so that the last child will be\n\t\t// the first in the linked list.\n\t\tchildren.reverse();\n\t}\n\t// Build the linked list. Iterate through the children in reverse order\n\t// so that `_next` points to the first linked list node to be resolved.\n\tfor (let i = children.length; i--; ) {\n\t\t// Create a new linked list node as an array of form:\n\t\t// \t[suspended_count, resolved_count, next_node]\n\t\t// where suspended_count and resolved_count are numeric counters for\n\t\t// keeping track how many times a node has been suspended and resolved.\n\t\t//\n\t\t// Note that suspended_count starts from 1 instead of 0, so we can block\n\t\t// processing callbacks until componentDidMount has been called. In a sense\n\t\t// node is suspended at least until componentDidMount gets called!\n\t\t//\n\t\t// Pending callbacks are added to the end of the node:\n\t\t// \t[suspended_count, resolved_count, next_node, callback_0, callback_1, ...]\n\t\tthis._map.set(children[i], (this._next = [1, 0, this._next]));\n\t}\n\treturn props.children;\n};\n\nSuspenseList.prototype.componentDidUpdate =\n\tSuspenseList.prototype.componentDidMount = function () {\n\t\t// Iterate through all children after mounting for two reasons:\n\t\t// 1. As each node[SUSPENDED_COUNT] starts from 1, this iteration increases\n\t\t//    each node[RELEASED_COUNT] by 1, therefore balancing the counters.\n\t\t//    The nodes can now be completely consumed from the linked list.\n\t\t// 2. Handle nodes that might have gotten resolved between render and\n\t\t//    componentDidMount.\n\t\tthis._map.forEach((node, child) => {\n\t\t\tresolve(this, child, node);\n\t\t});\n\t};\n", "import { createElement, render } from 'preact';\n\n/**\n * @param {import('../../src/index').RenderableProps<{ context: any }>} props\n */\nfunction ContextProvider(props) {\n\tthis.getChildContext = () => props.context;\n\treturn props.children;\n}\n\n/**\n * Portal component\n * @this {import('./internal').Component}\n * @param {object | null | undefined} props\n *\n * TODO: use createRoot() instead of fake root\n */\nfunction Portal(props) {\n\tconst _this = this;\n\tlet container = props._container;\n\n\t_this.componentWillUnmount = function () {\n\t\trender(null, _this._temp);\n\t\t_this._temp = null;\n\t\t_this._container = null;\n\t};\n\n\t// When we change container we should clear our old container and\n\t// indicate a new mount.\n\tif (_this._container && _this._container !== container) {\n\t\t_this.componentWillUnmount();\n\t}\n\n\t// When props.vnode is undefined/false/null we are dealing with some kind of\n\t// conditional vnode. This should not trigger a render.\n\tif (props._vnode) {\n\t\tif (!_this._temp) {\n\t\t\t_this._container = container;\n\n\t\t\t// Create a fake DOM parent node that manages a subset of `container`'s children:\n\t\t\t_this._temp = {\n\t\t\t\tnodeType: 1,\n\t\t\t\tparentNode: container,\n\t\t\t\tchildNodes: [],\n\t\t\t\tappendChild(child) {\n\t\t\t\t\tthis.childNodes.push(child);\n\t\t\t\t\t_this._container.appendChild(child);\n\t\t\t\t},\n\t\t\t\tinsertBefore(child, before) {\n\t\t\t\t\tthis.childNodes.push(child);\n\t\t\t\t\t_this._container.appendChild(child);\n\t\t\t\t},\n\t\t\t\tremoveChild(child) {\n\t\t\t\t\tthis.childNodes.splice(this.childNodes.indexOf(child) >>> 1, 1);\n\t\t\t\t\t_this._container.removeChild(child);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// Render our wrapping element into temp.\n\t\trender(\n\t\t\tcreateElement(ContextProvider, { context: _this.context }, props._vnode),\n\t\t\t_this._temp\n\t\t);\n\t}\n\t// When we come from a conditional render, on a mounted\n\t// portal we should clear the DOM.\n\telse if (_this._temp) {\n\t\t_this.componentWillUnmount();\n\t}\n}\n\n/**\n * Create a `Portal` to continue rendering the vnode tree at a different DOM node\n * @param {import('./internal').VNode} vnode The vnode to render\n * @param {import('./internal').PreactElement} container The DOM node to continue rendering in to.\n */\nexport function createPortal(vnode, container) {\n\tconst el = createElement(Portal, { _vnode: vnode, _container: container });\n\tel.containerInfo = container;\n\treturn el;\n}\n", "import {\n\trender as preactRender,\n\thydrate as preactHydrate,\n\toptions,\n\ttoChildArray,\n\tComponent\n} from 'preact';\n\nexport const REACT_ELEMENT_TYPE =\n\t(typeof Symbol != 'undefined' && Symbol.for && Symbol.for('react.element')) ||\n\t0xeac7;\n\nconst CAMEL_PROPS =\n\t/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;\nconst ON_ANI = /^on(Ani|Tra|Tou|BeforeInp|Compo)/;\nconst CAMEL_REPLACE = /[A-Z0-9]/g;\n\nconst IS_DOM = typeof document !== 'undefined';\n\n// Input types for which onchange should not be converted to oninput.\n// type=\"file|checkbox|radio\", plus \"range\" in IE11.\n// (IE11 doesn't support Symbol, which we use here to turn `rad` into `ra` which matches \"range\")\nconst onChangeInputType = type =>\n\t(typeof Symbol != 'undefined' && typeof Symbol() == 'symbol'\n\t\t? /fil|che|rad/\n\t\t: /fil|che|ra/\n\t).test(type);\n\n// Some libraries like `react-virtualized` explicitly check for this.\nComponent.prototype.isReactComponent = {};\n\n// `UNSAFE_*` lifecycle hooks\n// Preact only ever invokes the unprefixed methods.\n// Here we provide a base \"fallback\" implementation that calls any defined UNSAFE_ prefixed method.\n// - If a component defines its own `componentDidMount()` (including via defineProperty), use that.\n// - If a component defines `UNSAFE_componentDidMount()`, `componentDidMount` is the alias getter/setter.\n// - If anything assigns to an `UNSAFE_*` property, the assignment is forwarded to the unprefixed property.\n// See https://github.com/preactjs/preact/issues/1941\n[\n\t'componentWillMount',\n\t'componentWillReceiveProps',\n\t'componentWillUpdate'\n].forEach(key => {\n\tObject.defineProperty(Component.prototype, key, {\n\t\tconfigurable: true,\n\t\tget() {\n\t\t\treturn this['UNSAFE_' + key];\n\t\t},\n\t\tset(v) {\n\t\t\tObject.defineProperty(this, key, {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true,\n\t\t\t\tvalue: v\n\t\t\t});\n\t\t}\n\t});\n});\n\n/**\n * Proxy render() since React returns a Component reference.\n * @param {import('./internal').VNode} vnode VNode tree to render\n * @param {import('./internal').PreactElement} parent DOM node to render vnode tree into\n * @param {() => void} [callback] Optional callback that will be called after rendering\n * @returns {import('./internal').Component | null} The root component reference or null\n */\nexport function render(vnode, parent, callback) {\n\t// React destroys any existing DOM nodes, see #1727\n\t// ...but only on the first render, see #1828\n\tif (parent._children == null) {\n\t\tparent.textContent = '';\n\t}\n\n\tpreactRender(vnode, parent);\n\tif (typeof callback == 'function') callback();\n\n\treturn vnode ? vnode._component : null;\n}\n\nexport function hydrate(vnode, parent, callback) {\n\tpreactHydrate(vnode, parent);\n\tif (typeof callback == 'function') callback();\n\n\treturn vnode ? vnode._component : null;\n}\n\nlet oldEventHook = options.event;\noptions.event = e => {\n\tif (oldEventHook) e = oldEventHook(e);\n\n\te.persist = empty;\n\te.isPropagationStopped = isPropagationStopped;\n\te.isDefaultPrevented = isDefaultPrevented;\n\treturn (e.nativeEvent = e);\n};\n\nfunction empty() {}\n\nfunction isPropagationStopped() {\n\treturn this.cancelBubble;\n}\n\nfunction isDefaultPrevented() {\n\treturn this.defaultPrevented;\n}\n\nconst classNameDescriptorNonEnumberable = {\n\tenumerable: false,\n\tconfigurable: true,\n\tget() {\n\t\treturn this.class;\n\t}\n};\n\nfunction handleDomVNode(vnode) {\n\tlet props = vnode.props,\n\t\ttype = vnode.type,\n\t\tnormalizedProps = {};\n\n\tfor (let i in props) {\n\t\tlet value = props[i];\n\n\t\tif (\n\t\t\t(i === 'value' && 'defaultValue' in props && value == null) ||\n\t\t\t// Emulate React's behavior of not rendering the contents of noscript tags on the client.\n\t\t\t(IS_DOM && i === 'children' && type === 'noscript') ||\n\t\t\ti === 'class' ||\n\t\t\ti === 'className'\n\t\t) {\n\t\t\t// Skip applying value if it is null/undefined and we already set\n\t\t\t// a default value\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet lowerCased = i.toLowerCase();\n\t\tif (i === 'defaultValue' && 'value' in props && props.value == null) {\n\t\t\t// `defaultValue` is treated as a fallback `value` when a value prop is present but null/undefined.\n\t\t\t// `defaultValue` for Elements with no value prop is the same as the DOM defaultValue property.\n\t\t\ti = 'value';\n\t\t} else if (i === 'download' && value === true) {\n\t\t\t// Calling `setAttribute` with a truthy value will lead to it being\n\t\t\t// passed as a stringified value, e.g. `download=\"true\"`. React\n\t\t\t// converts it to an empty string instead, otherwise the attribute\n\t\t\t// value will be used as the file name and the file will be called\n\t\t\t// \"true\" upon downloading it.\n\t\t\tvalue = '';\n\t\t} else if (lowerCased === 'ondoubleclick') {\n\t\t\ti = 'ondblclick';\n\t\t} else if (\n\t\t\tlowerCased === 'onchange' &&\n\t\t\t(type === 'input' || type === 'textarea') &&\n\t\t\t!onChangeInputType(props.type)\n\t\t) {\n\t\t\tlowerCased = i = 'oninput';\n\t\t} else if (lowerCased === 'onfocus') {\n\t\t\ti = 'onfocusin';\n\t\t} else if (lowerCased === 'onblur') {\n\t\t\ti = 'onfocusout';\n\t\t} else if (ON_ANI.test(i)) {\n\t\t\ti = lowerCased;\n\t\t} else if (type.indexOf('-') === -1 && CAMEL_PROPS.test(i)) {\n\t\t\ti = i.replace(CAMEL_REPLACE, '-$&').toLowerCase();\n\t\t} else if (value === null) {\n\t\t\tvalue = undefined;\n\t\t}\n\n\t\t// Add support for onInput and onChange, see #3561\n\t\t// if we have an oninput prop already change it to oninputCapture\n\t\tif (lowerCased === 'oninput') {\n\t\t\ti = lowerCased;\n\t\t\tif (normalizedProps[i]) {\n\t\t\t\ti = 'oninputCapture';\n\t\t\t}\n\t\t}\n\n\t\tnormalizedProps[i] = value;\n\t}\n\n\t// Add support for array select values: <select multiple value={[]} />\n\tif (\n\t\ttype == 'select' &&\n\t\tnormalizedProps.multiple &&\n\t\tArray.isArray(normalizedProps.value)\n\t) {\n\t\t// forEach() always returns undefined, which we abuse here to unset the value prop.\n\t\tnormalizedProps.value = toChildArray(props.children).forEach(child => {\n\t\t\tchild.props.selected =\n\t\t\t\tnormalizedProps.value.indexOf(child.props.value) != -1;\n\t\t});\n\t}\n\n\t// Adding support for defaultValue in select tag\n\tif (type == 'select' && normalizedProps.defaultValue != null) {\n\t\tnormalizedProps.value = toChildArray(props.children).forEach(child => {\n\t\t\tif (normalizedProps.multiple) {\n\t\t\t\tchild.props.selected =\n\t\t\t\t\tnormalizedProps.defaultValue.indexOf(child.props.value) != -1;\n\t\t\t} else {\n\t\t\t\tchild.props.selected =\n\t\t\t\t\tnormalizedProps.defaultValue == child.props.value;\n\t\t\t}\n\t\t});\n\t}\n\n\tif (props.class && !props.className) {\n\t\tnormalizedProps.class = props.class;\n\t\tObject.defineProperty(\n\t\t\tnormalizedProps,\n\t\t\t'className',\n\t\t\tclassNameDescriptorNonEnumberable\n\t\t);\n\t} else if (props.className && !props.class) {\n\t\tnormalizedProps.class = normalizedProps.className = props.className;\n\t} else if (props.class && props.className) {\n\t\tnormalizedProps.class = normalizedProps.className = props.className;\n\t}\n\n\tvnode.props = normalizedProps;\n}\n\nlet oldVNodeHook = options.vnode;\noptions.vnode = vnode => {\n\t// only normalize props on Element nodes\n\tif (typeof vnode.type === 'string') {\n\t\thandleDomVNode(vnode);\n\t}\n\n\tvnode.$$typeof = REACT_ELEMENT_TYPE;\n\n\tif (oldVNodeHook) oldVNodeHook(vnode);\n};\n\n// Only needed for react-relay\nlet currentComponent;\nconst oldBeforeRender = options._render;\noptions._render = function (vnode) {\n\tif (oldBeforeRender) {\n\t\toldBeforeRender(vnode);\n\t}\n\tcurrentComponent = vnode._component;\n};\n\nconst oldDiffed = options.diffed;\n/** @type {(vnode: import('./internal').VNode) => void} */\noptions.diffed = function (vnode) {\n\tif (oldDiffed) {\n\t\toldDiffed(vnode);\n\t}\n\n\tconst props = vnode.props;\n\tconst dom = vnode._dom;\n\n\tif (\n\t\tdom != null &&\n\t\tvnode.type === 'textarea' &&\n\t\t'value' in props &&\n\t\tprops.value !== dom.value\n\t) {\n\t\tdom.value = props.value == null ? '' : props.value;\n\t}\n\n\tcurrentComponent = null;\n};\n\n// This is a very very private internal function for React it\n// is used to sort-of do runtime dependency injection. So far\n// only `react-relay` makes use of it. It uses it to read the\n// context value.\nexport const __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {\n\tReactCurrentDispatcher: {\n\t\tcurrent: {\n\t\t\treadContext(context) {\n\t\t\t\treturn currentComponent._globalContext[context._id].props.value;\n\t\t\t}\n\t\t}\n\t}\n};\n", "import {\n\tcreateElement,\n\trender as preactRender,\n\tcloneElement as preactCloneElement,\n\tcreateRef,\n\tComponent,\n\tcreateContext,\n\tFragment\n} from 'preact';\nimport {\n\tuseState,\n\tuseId,\n\tuseReducer,\n\tuseEffect,\n\tuseLayoutEffect,\n\tuseRef,\n\tuseImperativeHandle,\n\tuseMemo,\n\tuseCallback,\n\tuseContext,\n\tuseDebugValue\n} from 'preact/hooks';\nimport { PureComponent } from './PureComponent';\nimport { memo } from './memo';\nimport { forwardRef } from './forwardRef';\nimport { Children } from './Children';\nimport { Suspense, lazy } from './suspense';\nimport { SuspenseList } from './suspense-list';\nimport { createPortal } from './portals';\nimport { is } from './util';\nimport {\n\thydrate,\n\trender,\n\tREACT_ELEMENT_TYPE,\n\t__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n} from './render';\n\nconst version = '17.0.2'; // trick libraries to think we are react\n\n/**\n * Legacy version of createElement.\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component constructor\n */\nfunction createFactory(type) {\n\treturn createElement.bind(null, type);\n}\n\n/**\n * Check if the passed element is a valid (p)react node.\n * @param {*} element The element to check\n * @returns {boolean}\n */\nfunction isValidElement(element) {\n\treturn !!element && element.$$typeof === REACT_ELEMENT_TYPE;\n}\n\n/**\n * Wrap `cloneElement` to abort if the passed element is not a valid element and apply\n * all vnode normalizations.\n * @param {import('./internal').VNode} element The vnode to clone\n * @param {object} props Props to add when cloning\n * @param {Array<import('./internal').ComponentChildren>} rest Optional component children\n */\nfunction cloneElement(element) {\n\tif (!isValidElement(element)) return element;\n\treturn preactCloneElement.apply(null, arguments);\n}\n\n/**\n * Remove a component tree from the DOM, including state and event handlers.\n * @param {import('./internal').PreactElement} container\n * @returns {boolean}\n */\nfunction unmountComponentAtNode(container) {\n\tif (container._children) {\n\t\tpreactRender(null, container);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * Get the matching DOM node for a component\n * @param {import('./internal').Component} component\n * @returns {import('./internal').PreactElement | null}\n */\nfunction findDOMNode(component) {\n\treturn (\n\t\t(component &&\n\t\t\t(component.base || (component.nodeType === 1 && component))) ||\n\t\tnull\n\t);\n}\n\n/**\n * Deprecated way to control batched rendering inside the reconciler, but we\n * already schedule in batches inside our rendering code\n * @template Arg\n * @param {(arg: Arg) => void} callback function that triggers the updated\n * @param {Arg} [arg] Optional argument that can be passed to the callback\n */\n// eslint-disable-next-line camelcase\nconst unstable_batchedUpdates = (callback, arg) => callback(arg);\n\n/**\n * In React, `flushSync` flushes the entire tree and forces a rerender. It's\n * implmented here as a no-op.\n * @template Arg\n * @template Result\n * @param {(arg: Arg) => Result} callback function that runs before the flush\n * @param {Arg} [arg] Optional argument that can be passed to the callback\n * @returns\n */\nconst flushSync = (callback, arg) => callback(arg);\n\n/**\n * Strict Mode is not implemented in Preact, so we provide a stand-in for it\n * that just renders its children without imposing any restrictions.\n */\nconst StrictMode = Fragment;\n\nexport function startTransition(cb) {\n\tcb();\n}\n\nexport function useDeferredValue(val) {\n\treturn val;\n}\n\nexport function useTransition() {\n\treturn [false, startTransition];\n}\n\n// TODO: in theory this should be done after a VNode is diffed as we want to insert\n// styles/... before it attaches\nexport const useInsertionEffect = useLayoutEffect;\n\n/**\n * This is taken from https://github.com/facebook/react/blob/main/packages/use-sync-external-store/src/useSyncExternalStoreShimClient.js#L84\n * on a high level this cuts out the warnings, ... and attempts a smaller implementation\n */\nexport function useSyncExternalStore(subscribe, getSnapshot) {\n\tconst value = getSnapshot();\n\n\tconst [{ _instance }, forceUpdate] = useState({\n\t\t_instance: { _value: value, _getSnapshot: getSnapshot }\n\t});\n\n\tuseLayoutEffect(() => {\n\t\t_instance._value = value;\n\t\t_instance._getSnapshot = getSnapshot;\n\n\t\tif (!is(_instance._value, getSnapshot())) {\n\t\t\tforceUpdate({ _instance });\n\t\t}\n\t}, [subscribe, value, getSnapshot]);\n\n\tuseEffect(() => {\n\t\tif (!is(_instance._value, _instance._getSnapshot())) {\n\t\t\tforceUpdate({ _instance });\n\t\t}\n\n\t\treturn subscribe(() => {\n\t\t\tif (!is(_instance._value, _instance._getSnapshot())) {\n\t\t\t\tforceUpdate({ _instance });\n\t\t\t}\n\t\t});\n\t}, [subscribe]);\n\n\treturn value;\n}\n\nexport * from 'preact/hooks';\nexport {\n\tversion,\n\tChildren,\n\trender,\n\thydrate,\n\tunmountComponentAtNode,\n\tcreatePortal,\n\tcreateElement,\n\tcreateContext,\n\tcreateFactory,\n\tcloneElement,\n\tcreateRef,\n\tFragment,\n\tisValidElement,\n\tfindDOMNode,\n\tComponent,\n\tPureComponent,\n\tmemo,\n\tforwardRef,\n\tflushSync,\n\t// eslint-disable-next-line camelcase\n\tunstable_batchedUpdates,\n\tStrictMode,\n\tSuspense,\n\tSuspenseList,\n\tlazy,\n\t__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n};\n\n// React copies the named exports to the default one.\nexport default {\n\tuseState,\n\tuseId,\n\tuseReducer,\n\tuseEffect,\n\tuseLayoutEffect,\n\tuseInsertionEffect,\n\tuseTransition,\n\tuseDeferredValue,\n\tuseSyncExternalStore,\n\tstartTransition,\n\tuseRef,\n\tuseImperativeHandle,\n\tuseMemo,\n\tuseCallback,\n\tuseContext,\n\tuseDebugValue,\n\tversion,\n\tChildren,\n\trender,\n\thydrate,\n\tunmountComponentAtNode,\n\tcreatePortal,\n\tcreateElement,\n\tcreateContext,\n\tcreateFactory,\n\tcloneElement,\n\tcreateRef,\n\tFragment,\n\tisValidElement,\n\tfindDOMNode,\n\tComponent,\n\tPureComponent,\n\tmemo,\n\tforwardRef,\n\tflushSync,\n\tunstable_batchedUpdates,\n\tStrictMode,\n\tSuspense,\n\tSuspenseList,\n\tlazy,\n\t__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED\n};\n", "import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function isNumberArray(d: any): d is number[] {\n  return Array.isArray(d) && d.every(val => typeof val === 'number')\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n", "import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n", "import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n", "import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table\n          .getPrePaginationRowModel()\n          .flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n", "import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(\n    row\n      .getValue<string | null>(columnId)\n      ?.toString()\n      ?.toLowerCase()\n      ?.includes(search)\n  )\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(\n    row.getValue<string | null>(columnId)?.toString()?.includes(filterValue)\n  )\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string | null>(columnId)?.toString()?.toLowerCase() ===\n    filterValue?.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n", "import { AggregationFn } from './features/Grouping'\nimport { isNumberArray } from './utils'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  const values = leafRows.map(row => row.getValue(columnId))\n  if (!isNumberArray(values)) {\n    return\n  }\n  if (values.length === 1) {\n    return values[0]\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = values.sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1]! + nums[mid]!) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n", "import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n  getGroupingValue?: (row: TData) => any\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  getGroupingValue: (columnId: string) => unknown\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      getGroupingValue: columnId => {\n        if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n          return row._groupingValuesCache[columnId]\n        }\n\n        const column = table.getColumn(columnId)\n\n        if (!column?.columnDef.getGroupingValue) {\n          return row.getValue(columnId)\n        }\n\n        row._groupingValuesCache[columnId] = column.columnDef.getGroupingValue(\n          row.original\n        )\n\n        return row._groupingValuesCache[columnId]\n      },\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n", "import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table\n          .getPaginationRowModel()\n          .flatRows.filter(row => row.getCanSelect())\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows\n              .filter(row => row.getCanSelect())\n              .some(d => d.getIsSelected() || d.getIsSomeSelected())\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n", "import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n", "import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n      sortUndefined: 1,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n", "import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n", "import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n", "import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n", "import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  parentId?: string\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n  getParentRow: () => Row<TData> | undefined\n  getParentRows: () => Row<TData>[]\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[],\n  parentId?: string\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    parentId,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getParentRow: () => (row.parentId ? table.getRow(row.parentId) : undefined),\n    getParentRows: () => {\n      let parentRows: Row<TData>[] = []\n      let currentRow = row\n      while (true) {\n        const parentRow = currentRow.getParentRow()\n        if (!parentRow) break\n        parentRows.push(parentRow)\n        currentRow = parentRow\n      }\n      return parentRows.reverse()\n    },\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n", "import {\n  AccessorFn,\n  ColumnDef,\n  DisplayColumnDef,\n  GroupColumnDef,\n  IdentifiedColumnDef,\n  RowData,\n} from './types'\nimport { DeepKeys, DeepValue, RequiredKeys } from './utils'\n\n// type Person = {\n//   firstName: string\n//   lastName: string\n//   age: number\n//   visits: number\n//   status: string\n//   progress: number\n//   createdAt: Date\n//   nested: {\n//     foo: [\n//       {\n//         bar: 'bar'\n//       }\n//     ]\n//     bar: { subBar: boolean }[]\n//     baz: {\n//       foo: 'foo'\n//       bar: {\n//         baz: 'baz'\n//       }\n//     }\n//   }\n// }\n\n// const test: DeepKeys<Person> = 'nested.foo.0.bar'\n// const test2: DeepKeys<Person> = 'nested.bar'\n\n// const helper = createColumnHelper<Person>()\n\n// helper.accessor('nested.foo', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.foo.0.bar', {\n//   cell: info => info.getValue(),\n// })\n\n// helper.accessor('nested.bar', {\n//   cell: info => info.getValue(),\n// })\n\nexport type ColumnHelper<TData extends RowData> = {\n  accessor: <\n    TAccessor extends AccessorFn<TData> | DeepKeys<TData>,\n    TValue extends TAccessor extends AccessorFn<TData, infer TReturn>\n      ? TReturn\n      : TAccessor extends DeepKeys<TData>\n      ? DeepValue<TData, TAccessor>\n      : never\n  >(\n    accessor: TAccessor,\n    column: TAccessor extends AccessorFn<TData>\n      ? DisplayColumnDef<TData, TValue>\n      : IdentifiedColumnDef<TData, TValue>\n  ) => ColumnDef<TData, TValue>\n  display: (column: DisplayColumnDef<TData>) => ColumnDef<TData, unknown>\n  group: (column: GroupColumnDef<TData>) => ColumnDef<TData, unknown>\n}\n\nexport function createColumnHelper<\n  TData extends RowData\n>(): ColumnHelper<TData> {\n  return {\n    accessor: (accessor, column) => {\n      return typeof accessor === 'function'\n        ? ({\n            ...column,\n            accessorFn: accessor,\n          } as any)\n        : {\n            ...column,\n            accessorKey: accessor,\n          }\n    },\n    display: column => column as ColumnDef<TData, unknown>,\n    group: column => column as ColumnDef<TData, unknown>,\n  }\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parentRow?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parentRow),\n              originalRows[i]!,\n              i,\n              depth,\n              undefined,\n              parentRow?.id\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Row, RowModel, Table, RowData } from '../types'\n\nexport function filterRows<TData extends RowData>(\n  rows: Row<TData>[],\n  filterRowImpl: (row: Row<TData>) => any,\n  table: Table<TData>\n) {\n  if (table.options.filterFromLeafRows) {\n    return filterRowModelFromLeafs(rows, filterRowImpl, table)\n  }\n\n  return filterRowModelFromRoot(rows, filterRowImpl, table)\n}\n\nexport function filterRowModelFromLeafs<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => Row<TData>[],\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    const rows: Row<TData>[] = []\n\n    // Filter from children up first\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const newRow = createRow(\n        table,\n        row.id,\n        row.original,\n        row.index,\n        row.depth,\n        undefined,\n        row.parentId\n      )\n      newRow.columnFilters = row.columnFilters\n\n      if (row.subRows?.length && depth < maxDepth) {\n        newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n        row = newRow\n\n        if (filterRow(row) && !newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n\n        if (filterRow(row) || newRow.subRows.length) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n          continue\n        }\n      } else {\n        row = newRow\n        if (filterRow(row)) {\n          rows.push(row)\n          newFilteredRowsById[row.id] = row\n          newFilteredRowsById[i] = row\n        }\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n\nexport function filterRowModelFromRoot<TData extends RowData>(\n  rowsToFilter: Row<TData>[],\n  filterRow: (row: Row<TData>) => any,\n  table: Table<TData>\n): RowModel<TData> {\n  const newFilteredFlatRows: Row<TData>[] = []\n  const newFilteredRowsById: Record<string, Row<TData>> = {}\n  const maxDepth = table.options.maxLeafRowFilterDepth ?? 100\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TData>[], depth = 0) => {\n    // Filter from parents downward first\n\n    const rows: Row<TData>[] = []\n\n    // Apply the filter to any subRows\n    for (let i = 0; i < rowsToFilter.length; i++) {\n      let row = rowsToFilter[i]!\n\n      const pass = filterRow(row)\n\n      if (pass) {\n        if (row.subRows?.length && depth < maxDepth) {\n          const newRow = createRow(\n            table,\n            row.id,\n            row.original,\n            row.index,\n            row.depth,\n            undefined,\n            row.parentId\n          )\n          newRow.subRows = recurseFilterRows(row.subRows, depth + 1)\n          row = newRow\n        }\n\n        rows.push(row)\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      }\n    }\n\n    return rows\n  }\n\n  return {\n    rows: recurseFilterRows(rowsToFilter),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n", "import { ResolvedColumnFilter } from '../features/Filters'\nimport { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFilteredRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n      ],\n      (rowModel, columnFilters, globalFilter) => {\n        if (\n          !rowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          for (let i = 0; i < rowModel.flatRows.length; i++) {\n            rowModel.flatRows[i]!.columnFilters = {}\n            rowModel.flatRows[i]!.columnFiltersMeta = {}\n          }\n          return rowModel\n        }\n\n        const resolvedColumnFilters: ResolvedColumnFilter<TData>[] = []\n        const resolvedGlobalFilters: ResolvedColumnFilter<TData>[] = []\n\n        ;(columnFilters ?? []).forEach(d => {\n          const column = table.getColumn(d.id)\n\n          if (!column) {\n            return\n          }\n\n          const filterFn = column.getFilterFn()\n\n          if (!filterFn) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Could not find a valid 'column.filterFn' for column with the ID: ${column.id}.`\n              )\n            }\n            return\n          }\n\n          resolvedColumnFilters.push({\n            id: d.id,\n            filterFn,\n            resolvedValue: filterFn.resolveFilterValue?.(d.value) ?? d.value,\n          })\n        })\n\n        const filterableIds = columnFilters.map(d => d.id)\n\n        const globalFilterFn = table.getGlobalFilterFn()\n\n        const globallyFilterableColumns = table\n          .getAllLeafColumns()\n          .filter(column => column.getCanGlobalFilter())\n\n        if (\n          globalFilter &&\n          globalFilterFn &&\n          globallyFilterableColumns.length\n        ) {\n          filterableIds.push('__global__')\n\n          globallyFilterableColumns.forEach(column => {\n            resolvedGlobalFilters.push({\n              id: column.id,\n              filterFn: globalFilterFn,\n              resolvedValue:\n                globalFilterFn.resolveFilterValue?.(globalFilter) ??\n                globalFilter,\n            })\n          })\n        }\n\n        let currentColumnFilter\n        let currentGlobalFilter\n\n        // Flag the prefiltered row model with each filter state\n        for (let j = 0; j < rowModel.flatRows.length; j++) {\n          const row = rowModel.flatRows[j]!\n\n          row.columnFilters = {}\n\n          if (resolvedColumnFilters.length) {\n            for (let i = 0; i < resolvedColumnFilters.length; i++) {\n              currentColumnFilter = resolvedColumnFilters[i]!\n              const id = currentColumnFilter.id\n\n              // Tag the row with the column filter state\n              row.columnFilters[id] = currentColumnFilter.filterFn(\n                row,\n                id,\n                currentColumnFilter.resolvedValue,\n                filterMeta => {\n                  row.columnFiltersMeta[id] = filterMeta\n                }\n              )\n            }\n          }\n\n          if (resolvedGlobalFilters.length) {\n            for (let i = 0; i < resolvedGlobalFilters.length; i++) {\n              currentGlobalFilter = resolvedGlobalFilters[i]!\n              const id = currentGlobalFilter.id\n              // Tag the row with the first truthy global filter state\n              if (\n                currentGlobalFilter.filterFn(\n                  row,\n                  id,\n                  currentGlobalFilter.resolvedValue,\n                  filterMeta => {\n                    row.columnFiltersMeta[id] = filterMeta\n                  }\n                )\n              ) {\n                row.columnFilters.__global__ = true\n                break\n              }\n            }\n\n            if (row.columnFilters.__global__ !== true) {\n              row.columnFilters.__global__ = false\n            }\n          }\n        }\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        // Filter final rows using all of the active filters\n        return filterRows(rowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getFilteredRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { filterRows } from './filterRowsUtils'\n\nexport function getFacetedRowModel<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => RowModel<TData> {\n  return (table, columnId) =>\n    memo(\n      () => [\n        table.getPreFilteredRowModel(),\n        table.getState().columnFilters,\n        table.getState().globalFilter,\n        table.getFilteredRowModel(),\n      ],\n      (preRowModel, columnFilters, globalFilter) => {\n        if (\n          !preRowModel.rows.length ||\n          (!columnFilters?.length && !globalFilter)\n        ) {\n          return preRowModel\n        }\n\n        const filterableIds = [\n          ...columnFilters.map(d => d.id).filter(d => d !== columnId),\n          globalFilter ? '__global__' : undefined,\n        ].filter(Boolean) as string[]\n\n        const filterRowsImpl = (row: Row<TData>) => {\n          // Horizontally filter rows through each column\n          for (let i = 0; i < filterableIds.length; i++) {\n            if (row.columnFilters[filterableIds[i]!] === false) {\n              return false\n            }\n          }\n          return true\n        }\n\n        return filterRows(preRowModel.rows, filterRowsImpl, table)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedRowModel_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedUniqueValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => Map<any, number> {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return new Map()\n\n        let facetedUniqueValues = new Map<any, number>()\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (facetedUniqueValues.has(value)) {\n              facetedUniqueValues.set(\n                value,\n                (facetedUniqueValues.get(value) ?? 0) + 1\n              )\n            } else {\n              facetedUniqueValues.set(value, 1)\n            }\n          }\n        }\n\n        return facetedUniqueValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedUniqueValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getFacetedMinMaxValues<TData extends RowData>(): (\n  table: Table<TData>,\n  columnId: string\n) => () => undefined | [number, number] {\n  return (table, columnId) =>\n    memo(\n      () => [table.getColumn(columnId)?.getFacetedRowModel()],\n      facetedRowModel => {\n        if (!facetedRowModel) return undefined\n\n        const firstValue =\n          facetedRowModel.flatRows[0]?.getUniqueValues(columnId)\n\n        if (typeof firstValue === 'undefined') {\n          return undefined\n        }\n\n        let facetedMinMaxValues: [any, any] = [firstValue, firstValue]\n\n        for (let i = 0; i < facetedRowModel.flatRows.length; i++) {\n          const values =\n            facetedRowModel.flatRows[i]!.getUniqueValues<number>(columnId)\n\n          for (let j = 0; j < values.length; j++) {\n            const value = values[j]!\n\n            if (value < facetedMinMaxValues[0]) {\n              facetedMinMaxValues[0] = value\n            } else if (value > facetedMinMaxValues[1]) {\n              facetedMinMaxValues[1] = value\n            }\n          }\n        }\n\n        return facetedMinMaxValues\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'development' &&\n          'getFacetedMinMaxValues_' + columnId,\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {},\n      }\n    )\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if (!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              let sortInt = 0\n\n              // All sorting ints should always return in ascending order\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = aValue === undefined\n                const bUndefined = bValue === undefined\n\n                if (aUndefined || bUndefined) {\n                  sortInt =\n                    aUndefined && bUndefined\n                      ? 0\n                      : aUndefined\n                      ? columnInfo.sortUndefined\n                      : -columnInfo.sortUndefined\n                }\n              }\n\n              if (sortInt === 0) {\n                sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n              }\n\n              // If sorting is non-zero, take care of desc and inversion\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n", "import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { flattenBy, memo } from '../utils'\n\nexport function getGroupedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().grouping, table.getPreGroupedRowModel()],\n      (grouping, rowModel) => {\n        if (!rowModel.rows.length || !grouping.length) {\n          return rowModel\n        }\n\n        // Filter the grouping list down to columns that exist\n        const existingGrouping = grouping.filter(columnId =>\n          table.getColumn(columnId)\n        )\n\n        const groupedFlatRows: Row<TData>[] = []\n        const groupedRowsById: Record<string, Row<TData>> = {}\n        // const onlyGroupedFlatRows: Row[] = [];\n        // const onlyGroupedRowsById: Record<RowId, Row> = {};\n        // const nonGroupedFlatRows: Row[] = [];\n        // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n        // Recursively group the data\n        const groupUpRecursively = (\n          rows: Row<TData>[],\n          depth = 0,\n          parentId?: string\n        ) => {\n          // Grouping depth has been been met\n          // Stop grouping and simply rewrite thd depth and row relationships\n          if (depth >= existingGrouping.length) {\n            return rows.map(row => {\n              row.depth = depth\n\n              groupedFlatRows.push(row)\n              groupedRowsById[row.id] = row\n\n              if (row.subRows) {\n                row.subRows = groupUpRecursively(row.subRows, depth + 1, row.id)\n              }\n\n              return row\n            })\n          }\n\n          const columnId: string = existingGrouping[depth]!\n\n          // Group the rows together for this level\n          const rowGroupsMap = groupBy(rows, columnId)\n\n          // Peform aggregations for each group\n          const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n            ([groupingValue, groupedRows], index) => {\n              let id = `${columnId}:${groupingValue}`\n              id = parentId ? `${parentId}>${id}` : id\n\n              // First, Recurse to group sub rows before aggregation\n              const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n              // Flatten the leaf rows of the rows in this group\n              const leafRows = depth\n                ? flattenBy(groupedRows, row => row.subRows)\n                : groupedRows\n\n              const row = createRow(\n                table,\n                id,\n                leafRows[0]!.original,\n                index,\n                depth,\n                undefined,\n                parentId\n              )\n\n              Object.assign(row, {\n                groupingColumnId: columnId,\n                groupingValue,\n                subRows,\n                leafRows,\n                getValue: (columnId: string) => {\n                  // Don't aggregate columns that are in the grouping\n                  if (existingGrouping.includes(columnId)) {\n                    if (row._valuesCache.hasOwnProperty(columnId)) {\n                      return row._valuesCache[columnId]\n                    }\n\n                    if (groupedRows[0]) {\n                      row._valuesCache[columnId] =\n                        groupedRows[0].getValue(columnId) ?? undefined\n                    }\n\n                    return row._valuesCache[columnId]\n                  }\n\n                  if (row._groupingValuesCache.hasOwnProperty(columnId)) {\n                    return row._groupingValuesCache[columnId]\n                  }\n\n                  // Aggregate the values\n                  const column = table.getColumn(columnId)\n                  const aggregateFn = column?.getAggregationFn()\n\n                  if (aggregateFn) {\n                    row._groupingValuesCache[columnId] = aggregateFn(\n                      columnId,\n                      leafRows,\n                      groupedRows\n                    )\n\n                    return row._groupingValuesCache[columnId]\n                  }\n                },\n              })\n\n              subRows.forEach(subRow => {\n                groupedFlatRows.push(subRow)\n                groupedRowsById[subRow.id] = subRow\n                // if (subRow.getIsGrouped?.()) {\n                //   onlyGroupedFlatRows.push(subRow);\n                //   onlyGroupedRowsById[subRow.id] = subRow;\n                // } else {\n                //   nonGroupedFlatRows.push(subRow);\n                //   nonGroupedRowsById[subRow.id] = subRow;\n                // }\n              })\n\n              return row\n            }\n          )\n\n          return aggregatedGroupedRows\n        }\n\n        const groupedRows = groupUpRecursively(rowModel.rows, 0)\n\n        groupedRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return {\n          rows: groupedRows,\n          flatRows: groupedFlatRows,\n          rowsById: groupedRowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getGroupedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._queue(() => {\n            table._autoResetExpanded()\n            table._autoResetPageIndex()\n          })\n        },\n      }\n    )\n}\n\nfunction groupBy<TData extends RowData>(rows: Row<TData>[], columnId: string) {\n  const groupMap = new Map<any, Row<TData>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.getGroupingValue(columnId)}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      previous.push(row)\n    }\n    return map\n  }, groupMap)\n}\n", "import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n", "import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n", "import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n", "/**\n * react-virtual\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nexport { _extends as extends };\n//# sourceMappingURL=_rollupPluginBabelHelpers.mjs.map\n", "/**\n * virtual-core\n *\n * Copyright (c) TanStack\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nexport { _extends as extends };\n//# sourceMappingURL=_rollupPluginBabelHelpers.mjs.map\n", "export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: false | string\n    debug?: () => any\n    onChange?: (result: TResult) => void\n    initialDeps?: TDeps\n  },\n) {\n  let deps = opts.initialDeps ?? []\n  let result: TResult | undefined\n\n  return (): TResult => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    opts?.onChange?.(result)\n\n    return result!\n  }\n}\n\nexport function notUndefined<T>(value: T | undefined, msg?: string): T {\n  if (value === undefined) {\n    throw new Error(`Unexpected undefined${msg ? `: ${msg}` : ''}`)\n  } else {\n    return value\n  }\n}\n\nexport const approxEqual = (a: number, b: number) => Math.abs(a - b) < 1\n", "import { approxEqual, memo, notUndefined } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollDirection = 'forward' | 'backward'\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n  lane: number\n}\n\ninterface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nexport const observeElementRect = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = (rect: Rect) => {\n    const { width, height } = rect\n    cb({ width: Math.round(width), height: Math.round(height) })\n  }\n\n  handler(element.getBoundingClientRect())\n\n  const observer = new ResizeObserver((entries) => {\n    const entry = entries[0]\n    if (entry?.borderBoxSize) {\n      const box = entry.borderBoxSize[0]\n      if (box) {\n        handler({ width: box.inlineSize, height: box.blockSize })\n        return\n      }\n    }\n    handler(element.getBoundingClientRect())\n  })\n\n  observer.observe(element, { box: 'border-box' })\n\n  return () => {\n    observer.unobserve(element)\n  }\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<Window, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb({ width: element.innerWidth, height: element.innerHeight })\n  }\n  handler()\n\n  element.addEventListener('resize', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('resize', handler)\n  }\n}\n\nexport const observeElementOffset = <T extends Element>(\n  instance: Virtualizer<T, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollLeft' : 'scrollTop'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const observeWindowOffset = (\n  instance: Virtualizer<Window, any>,\n  cb: (offset: number) => void,\n) => {\n  const element = instance.scrollElement\n  if (!element) {\n    return\n  }\n\n  const handler = () => {\n    cb(element[instance.options.horizontal ? 'scrollX' : 'scrollY'])\n  }\n  handler()\n\n  element.addEventListener('scroll', handler, {\n    passive: true,\n  })\n\n  return () => {\n    element.removeEventListener('scroll', handler)\n  }\n}\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  entry: ResizeObserverEntry | undefined,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  if (entry?.borderBoxSize) {\n    const box = entry.borderBoxSize[0]\n    if (box) {\n      const size = Math.round(\n        box[instance.options.horizontal ? 'inlineSize' : 'blockSize'],\n      )\n      return size\n    }\n  }\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments = 0,\n    behavior,\n  }: { adjustments?: number; behavior?: ScrollBehavior },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset = offset + adjustments\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (instance: Virtualizer<TScrollElement, TItemElement>) => void\n  measureElement?: (\n    element: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  scrollMargin?: number\n  scrollingDelay?: number\n  indexAttribute?: string\n  initialMeasurementsCache?: VirtualItem[]\n  lanes?: number\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  isScrolling: boolean = false\n  private isScrollingTimeoutId: ReturnType<typeof setTimeout> | null = null\n  private scrollToIndexTimeoutId: ReturnType<typeof setTimeout> | null = null\n  measurementsCache: VirtualItem[] = []\n  private itemSizeCache = new Map<Key, number>()\n  private pendingMeasuredCacheIndexes: number[] = []\n  private scrollRect: Rect\n  scrollOffset: number\n  scrollDirection: ScrollDirection | null = null\n  private scrollAdjustments: number = 0\n  measureElementCache = new Map<Key, TItemElement>()\n  private observer = (() => {\n    let _ro: ResizeObserver | null = null\n\n    const get = () => {\n      if (_ro) {\n        return _ro\n      } else if (typeof ResizeObserver !== 'undefined') {\n        return (_ro = new ResizeObserver((entries) => {\n          entries.forEach((entry) => {\n            this._measureElement(entry.target as TItemElement, entry)\n          })\n        }))\n      } else {\n        return null\n      }\n    }\n\n    return {\n      disconnect: () => get()?.disconnect(),\n      observe: (target: Element) =>\n        get()?.observe(target, { box: 'border-box' }),\n      unobserve: (target: Element) => get()?.unobserve(target),\n    }\n  })()\n  range: { startIndex: number; endIndex: number } = {\n    startIndex: 0,\n    endIndex: 0,\n  }\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset = this.options.initialOffset\n    this.measurementsCache = this.options.initialMeasurementsCache\n    this.measurementsCache.forEach((item) => {\n      this.itemSizeCache.set(item.key, item.size)\n    })\n\n    this.maybeNotify()\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      scrollingDelay: 150,\n      indexAttribute: 'data-index',\n      initialMeasurementsCache: [],\n      lanes: 1,\n      ...opts,\n    }\n  }\n\n  private notify = () => {\n    this.options.onChange?.(this)\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    this.measureElementCache.forEach(this.observer.observe)\n    return () => {\n      this.observer.disconnect()\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      this._scrollToOffset(this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          const prev = this.scrollRect\n          this.scrollRect = rect\n          if (\n            this.options.horizontal\n              ? rect.width !== prev.width\n              : rect.height !== prev.height\n          ) {\n            this.maybeNotify()\n          }\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset) => {\n          this.scrollAdjustments = 0\n\n          if (this.scrollOffset === offset) {\n            return\n          }\n\n          if (this.isScrollingTimeoutId !== null) {\n            clearTimeout(this.isScrollingTimeoutId)\n            this.isScrollingTimeoutId = null\n          }\n\n          this.isScrolling = true\n          this.scrollDirection =\n            this.scrollOffset < offset ? 'forward' : 'backward'\n          this.scrollOffset = offset\n\n          this.maybeNotify()\n\n          this.isScrollingTimeoutId = setTimeout(() => {\n            this.isScrollingTimeoutId = null\n            this.isScrolling = false\n            this.scrollDirection = null\n\n            this.maybeNotify()\n          }, this.options.scrollingDelay)\n        }),\n      )\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private memoOptions = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.scrollMargin,\n      this.options.getItemKey,\n    ],\n    (count, paddingStart, scrollMargin, getItemKey) => {\n      this.pendingMeasuredCacheIndexes = []\n      return {\n        count,\n        paddingStart,\n        scrollMargin,\n        getItemKey,\n      }\n    },\n    {\n      key: false,\n    },\n  )\n\n  private getFurthestMeasurement = (\n    measurements: VirtualItem[],\n    index: number,\n  ) => {\n    const furthestMeasurementsFound = new Map<number, true>()\n    const furthestMeasurements = new Map<number, VirtualItem>()\n    for (let m = index - 1; m >= 0; m--) {\n      const measurement = measurements[m]!\n\n      if (furthestMeasurementsFound.has(measurement.lane)) {\n        continue\n      }\n\n      const previousFurthestMeasurement = furthestMeasurements.get(\n        measurement.lane,\n      )\n      if (\n        previousFurthestMeasurement == null ||\n        measurement.end > previousFurthestMeasurement.end\n      ) {\n        furthestMeasurements.set(measurement.lane, measurement)\n      } else if (measurement.end < previousFurthestMeasurement.end) {\n        furthestMeasurementsFound.set(measurement.lane, true)\n      }\n\n      if (furthestMeasurementsFound.size === this.options.lanes) {\n        break\n      }\n    }\n\n    return furthestMeasurements.size === this.options.lanes\n      ? Array.from(furthestMeasurements.values()).sort(\n          (a, b) => a.end - b.end,\n        )[0]\n      : undefined\n  }\n\n  private getMeasurements = memo(\n    () => [this.memoOptions(), this.itemSizeCache],\n    ({ count, paddingStart, scrollMargin, getItemKey }, itemSizeCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n\n        const furthestMeasurement =\n          this.options.lanes === 1\n            ? measurements[i - 1]\n            : this.getFurthestMeasurement(measurements, i)\n\n        const start = furthestMeasurement\n          ? furthestMeasurement.end\n          : paddingStart + scrollMargin\n\n        const measuredSize = itemSizeCache.get(key)\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n\n        const end = start + size\n\n        const lane = furthestMeasurement\n          ? furthestMeasurement.lane\n          : i % this.options.lanes\n\n        measurements[i] = {\n          index: i,\n          start,\n          size,\n          end,\n          key,\n          lane,\n        }\n      }\n\n      this.measurementsCache = measurements\n\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      return (this.range = calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset,\n      }))\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private maybeNotify = memo(\n    () => {\n      const range = this.calculateRange()\n\n      return [range.startIndex, range.endIndex, this.isScrolling]\n    },\n    () => {\n      this.notify()\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'maybeNotify',\n      debug: () => this.options.debug,\n      initialDeps: [\n        this.range.startIndex,\n        this.range.endIndex,\n        this.isScrolling,\n      ],\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.calculateRange(),\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return rangeExtractor({\n        ...range,\n        overscan,\n        count,\n      })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (\n    node: TItemElement,\n    entry: ResizeObserverEntry | undefined,\n  ) => {\n    const index = this.indexFromElement(node)\n\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return\n    }\n\n    const prevNode = this.measureElementCache.get(item.key)\n\n    if (!node.isConnected) {\n      this.observer.unobserve(node)\n      if (node === prevNode) {\n        this.measureElementCache.delete(item.key)\n      }\n      return\n    }\n\n    if (prevNode !== node) {\n      if (prevNode) {\n        this.observer.unobserve(prevNode)\n      }\n      this.observer.observe(node)\n      this.measureElementCache.set(item.key, node)\n    }\n\n    const measuredItemSize = this.options.measureElement(node, entry, this)\n\n    const itemSize = this.itemSizeCache.get(item.key) ?? item.size\n\n    const delta = measuredItemSize - itemSize\n\n    if (delta !== 0) {\n      if (item.start < this.scrollOffset) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(index)\n\n      this.itemSizeCache = new Map(\n        this.itemSizeCache.set(item.key, measuredItemSize),\n      )\n\n      this.notify()\n    }\n  }\n\n  measureElement = (node: TItemElement | null) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, undefined)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: VirtualItem[] = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getVirtualItemForOffset = (offset: number) => {\n    const measurements = this.getMeasurements()\n\n    return notUndefined(\n      measurements[\n        findNearestBinarySearch(\n          0,\n          measurements.length - 1,\n          (index: number) => notUndefined(measurements[index]).start,\n          offset,\n        )\n      ],\n    )\n  }\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= this.scrollOffset) {\n        align = 'start'\n      } else if (toOffset >= this.scrollOffset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      toOffset = toOffset\n    } else if (align === 'end') {\n      toOffset = toOffset - size\n    } else if (align === 'center') {\n      toOffset = toOffset - size / 2\n    }\n\n    const scrollSizeProp = this.options.horizontal\n      ? 'scrollWidth'\n      : 'scrollHeight'\n    const scrollSize = this.scrollElement\n      ? 'document' in this.scrollElement\n        ? this.scrollElement.document.documentElement[scrollSizeProp]\n        : this.scrollElement[scrollSizeProp]\n      : 0\n\n    const maxOffset = scrollSize - this.getSize()\n\n    return Math.max(Math.min(maxOffset, toOffset), 0)\n  }\n\n  getOffsetForIndex = (index: number, align: ScrollAlignment = 'auto') => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    const measurement = notUndefined(this.getMeasurements()[index])\n\n    if (align === 'auto') {\n      if (\n        measurement.end >=\n        this.scrollOffset + this.getSize() - this.options.scrollPaddingEnd\n      ) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        this.scrollOffset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return [this.scrollOffset, align] as const\n      }\n    }\n\n    const toOffset =\n      align === 'end'\n        ? measurement.end + this.options.scrollPaddingEnd\n        : measurement.start - this.options.scrollPaddingStart\n\n    return [this.getOffsetForAlignment(toOffset, align), align] as const\n  }\n\n  private isDynamicMode = () => this.measureElementCache.size > 0\n\n  private cancelScrollToIndex = () => {\n    if (this.scrollToIndexTimeoutId !== null) {\n      clearTimeout(this.scrollToIndexTimeoutId)\n      this.scrollToIndexTimeoutId = null\n    }\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align: initialAlign = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    index = Math.max(0, Math.min(index, this.options.count - 1))\n\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    const [toOffset, align] = this.getOffsetForIndex(index, initialAlign)\n\n    this._scrollToOffset(toOffset, { adjustments: undefined, behavior })\n\n    if (behavior !== 'smooth' && this.isDynamicMode()) {\n      this.scrollToIndexTimeoutId = setTimeout(() => {\n        this.scrollToIndexTimeoutId = null\n\n        const elementInDOM = this.measureElementCache.has(\n          this.options.getItemKey(index),\n        )\n\n        if (elementInDOM) {\n          const [toOffset] = this.getOffsetForIndex(index, align)\n\n          if (!approxEqual(toOffset, this.scrollOffset)) {\n            this.scrollToIndex(index, { align, behavior })\n          }\n        } else {\n          this.scrollToIndex(index, { align, behavior })\n        }\n      })\n    }\n  }\n\n  scrollBy = (delta: number, { behavior }: ScrollToOffsetOptions = {}) => {\n    this.cancelScrollToIndex()\n\n    if (behavior === 'smooth' && this.isDynamicMode()) {\n      console.warn(\n        'The `smooth` scroll behavior is not fully supported with dynamic size.',\n      )\n    }\n\n    this._scrollToOffset(this.scrollOffset + delta, {\n      adjustments: undefined,\n      behavior,\n    })\n  }\n\n  getTotalSize = () =>\n    (this.getMeasurements()[this.options.count - 1]?.end ||\n      this.options.paddingStart) -\n    this.options.scrollMargin +\n    this.options.paddingEnd\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemSizeCache = new Map()\n    this.notify()\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: VirtualItem[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n", "import * as React from 'react'\nimport {\n  elementScroll,\n  observeElementOffset,\n  observeElementRect,\n  observeWindowOffset,\n  observeWindowRect,\n  PartialKeys,\n  Virtualizer,\n  VirtualizerOptions,\n  windowScroll,\n} from '@tanstack/virtual-core'\nexport * from '@tanstack/virtual-core'\n\n//\n\nconst useIsomorphicLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nfunction useVirtualizerBase<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n>(\n  options: VirtualizerOptions<TScrollElement, TItemElement>,\n): Virtualizer<TScrollElement, TItemElement> {\n  const rerender = React.useReducer(() => ({}), {})[1]\n\n  const resolvedOptions: VirtualizerOptions<TScrollElement, TItemElement> = {\n    ...options,\n    onChange: (instance) => {\n      rerender()\n      options.onChange?.(instance)\n    },\n  }\n\n  const [instance] = React.useState(\n    () => new Virtualizer<TScrollElement, TItemElement>(resolvedOptions),\n  )\n\n  instance.setOptions(resolvedOptions)\n\n  React.useEffect(() => {\n    return instance._didMount()\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    return instance._willUpdate()\n  })\n\n  return instance\n}\n\nexport function useVirtualizer<\n  TScrollElement extends Element,\n  TItemElement extends Element,\n>(\n  options: PartialKeys<\n    VirtualizerOptions<TScrollElement, TItemElement>,\n    'observeElementRect' | 'observeElementOffset' | 'scrollToFn'\n  >,\n): Virtualizer<TScrollElement, TItemElement> {\n  return useVirtualizerBase<TScrollElement, TItemElement>({\n    observeElementRect: observeElementRect,\n    observeElementOffset: observeElementOffset,\n    scrollToFn: elementScroll,\n    ...options,\n  })\n}\n\nexport function useWindowVirtualizer<TItemElement extends Element>(\n  options: PartialKeys<\n    VirtualizerOptions<Window, TItemElement>,\n    | 'getScrollElement'\n    | 'observeElementRect'\n    | 'observeElementOffset'\n    | 'scrollToFn'\n  >,\n): Virtualizer<Window, TItemElement> {\n  return useVirtualizerBase<Window, TItemElement>({\n    getScrollElement: () => (typeof document !== 'undefined' ? window : null),\n    observeElementRect: observeWindowRect,\n    observeElementOffset: observeWindowOffset,\n    scrollToFn: windowScroll,\n    ...options,\n  })\n}\n", "import { render, hydrate, unmountComponentAtNode } from 'preact/compat';\n\nexport function createRoot(container) {\n\treturn {\n\t\trender(children) {\n\t\t\trender(children, container);\n\t\t},\n\t\tunmount() {\n\t\t\tunmountComponentAtNode(container);\n\t\t}\n\t};\n}\n\nexport function hydrateRoot(container, children) {\n\thydrate(children, container);\n\treturn createRoot(container);\n}\n\nexport default {\n\tcreateRoot,\n\thydrateRoot\n};\n", "// Should be no imports here!\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: unique symbol = Symbol.for(\"immer-nothing\")\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = Symbol.for(\"immer-draftable\")\n\nexport const DRAFT_STATE: unique symbol = Symbol.for(\"immer-state\")\n", "export const errors =\n\tprocess.env.NODE_ENV !== \"production\"\n\t\t? [\n\t\t\t\t// All error codes, starting by 0:\n\t\t\t\tfunction(plugin: string) {\n\t\t\t\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t\t\t\t},\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t\t\t\t},\n\t\t\t\t\"This object has been frozen and should not be mutated\",\n\t\t\t\tfunction(data: any) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\t\t\t\tdata\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t\t\t\t\"Immer forbids circular references\",\n\t\t\t\t\"The first or second argument to `produce` must be a function\",\n\t\t\t\t\"The third argument to `produce` must be a function or undefined\",\n\t\t\t\t\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t\t\t\t\"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'current' expects a draft, got: ${thing}`\n\t\t\t\t},\n\t\t\t\t\"Object.defineProperty() cannot be used on an Immer draft\",\n\t\t\t\t\"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t\t\t\t\"Immer only supports deleting array indices\",\n\t\t\t\t\"Immer only supports setting array indices and the 'length' property\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'original' expects a draft, got: ${thing}`\n\t\t\t\t}\n\t\t\t\t// Note: if more errors are added, the errorOffset in Patches.ts should be increased\n\t\t\t\t// See Patches.ts for additional errors\n\t\t  ]\n\t\t: []\n\nexport function die(error: number, ...args: any[]): never {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tconst e = errors[error]\n\t\tconst msg = typeof e === \"function\" ? e.apply(null, args as any) : e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n", "import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\tArchType,\n\tdie\n} from \"../internal\"\n\nexport const getPrototypeOf = Object.getPrototypeOf\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor?.[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(15, value)\n\treturn value[DRAFT_STATE].base_\n}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any) {\n\tif (getArchtype(obj) === ArchType.Object) {\n\t\tObject.entries(obj).forEach(([key, value]) => {\n\t\t\titer(key, value, obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): ArchType {\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_\n\t\t: Array.isArray(thing)\n\t\t? ArchType.Array\n\t\t: isMap(thing)\n\t\t? ArchType.Map\n\t\t: isSet(thing)\n\t\t? ArchType.Set\n\t\t: ArchType.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === ArchType.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === ArchType.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === ArchType.Map) thing.set(propOrOldValue, value)\n\telse if (t === ArchType.Set) {\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any, strict: boolean) {\n\tif (isMap(base)) {\n\t\treturn new Map(base)\n\t}\n\tif (isSet(base)) {\n\t\treturn new Set(base)\n\t}\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\n\tif (!strict && isPlainObject(base)) {\n\t\tif (!getPrototypeOf(base)) {\n\t\t\tconst obj = Object.create(null)\n\t\t\treturn Object.assign(obj, base)\n\t\t}\n\t\treturn {...base}\n\t}\n\n\tconst descriptors = Object.getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = Reflect.ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (_key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\treturn Object.isFrozen(obj)\n}\n", "import {\n\tImmerState,\n\tPatch,\n\tDrafted,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tArchType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(0, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ArchType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ArchType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n", "import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tArchType,\n\tgetPlugin\n} from \"../internal\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (state.type_ === ArchType.Object || state.type_ === ArchType.Array)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n", "import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tArchType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumerable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result = state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// To preserve insertion order in all cases we then clear the set\n\t\t// And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\t\tlet resultEach = result\n\t\tlet isSet = false\n\t\tif (state.type_ === ArchType.Set) {\n\t\t\tresultEach = new Set(result)\n\t\t\tresult.clear()\n\t\t\tisSet = true\n\t\t}\n\t\teach(resultEach, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path, isSet)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath,\n\ttargetIsSet?: boolean\n) {\n\tif (process.env.NODE_ENV !== \"production\" && childValue === targetObject)\n\t\tdie(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ArchType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t} else if (targetIsSet) {\n\t\ttargetObject.add(childValue)\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\t// we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\tif (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n", "import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tgetPrototypeOf,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tArchType,\n\tImmerScope\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ArchType.Object\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ArchType.Array\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ArchType.Array : (ArchType.Object as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(value, state))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\t(state.copy_![prop] === value &&\n\t\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t\t(value !== undefined || prop in state.copy_)) ||\n\t\t\t// special case: NaN\n\t\t\t(Number.isNaN(value) && Number.isNaN(state.copy_![prop]))\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\tif (state.copy_) {\n\t\t\tdelete state.copy_[prop]\n\t\t}\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ArchType.Array || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (process.env.NODE_ENV !== \"production\" && isNaN(parseInt(prop as any)))\n\t\tdie(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (\n\t\tprocess.env.NODE_ENV !== \"production\" &&\n\t\tprop !== \"length\" &&\n\t\tisNaN(parseInt(prop as any))\n\t)\n\t\tdie(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {\n\tbase_: any\n\tcopy_: any\n\tscope_: ImmerScope\n}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(\n\t\t\tstate.base_,\n\t\t\tstate.scope_.immer_.useStrictShallowCopy_\n\t\t)\n\t}\n}\n", "import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tautoFreeze_: boolean = true\n\tuseStrictShallowCopy_: boolean = false\n\n\tconstructor(config?: {autoFreeze?: boolean; useStrictShallowCopy?: boolean}) {\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t\tif (typeof config?.useStrictShallowCopy === \"boolean\")\n\t\t\tthis.setUseStrictShallowCopy(config!.useStrictShallowCopy)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(1, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (base: any, recipe?: any): any => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => base(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(base, recipe, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (!state || !state.isManual_) die(9)\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to enable strict shallow copy.\n\t *\n\t * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n\t */\n\tsetUseStrictShallowCopy(value: boolean) {\n\t\tthis.useStrictShallowCopy_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: createProxyProxy(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n", "import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tisFrozen\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(10, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value) || isFrozen(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tif (state) {\n\t\tif (!state.modified_) return state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_)\n\t} else {\n\t\tcopy = shallowCopy(value, true)\n\t}\n\t// recurse\n\teach(copy, (key, childValue) => {\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\tif (state) {\n\t\tstate.finalized_ = false\n\t}\n\treturn copy\n}\n", "import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tProxyArrayState,\n\tMapState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tgetPrototypeOf,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tArchType,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING,\n\terrors\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst errorOffset = 16\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\terrors.push(\n\t\t\t'Sets cannot have \"replace\" patches.',\n\t\t\tfunction(op: string) {\n\t\t\t\treturn \"Unsupported patch operation: \" + op\n\t\t\t},\n\t\t\tfunction(path: string) {\n\t\t\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t\t\t},\n\t\t\t\"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n\t\t)\n\t}\n\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ArchType.Object:\n\t\t\tcase ArchType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ArchType.Array:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ArchType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tfor (let i = copy_.length - 1; base_.length <= i; --i) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tinversePatches.push({\n\t\t\t\top: REMOVE,\n\t\t\t\tpath\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tlet p = path[i]\n\t\t\t\tif (typeof p !== \"string\" && typeof p !== \"number\") {\n\t\t\t\t\tp = \"\" + p\n\t\t\t\t}\n\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === ArchType.Object || parentType === ArchType.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\")\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(errorOffset + 2, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\tdie(errorOffset)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(errorOffset + 1, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n", "// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tdie,\n\tArchType,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\tclass DraftMap extends Map {\n\t\t[DRAFT_STATE]: MapState\n\n\t\tconstructor(target: AnyMap, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Map,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tset(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tif (state.base_.has(key)) {\n\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t} else {\n\t\t\t\tstate.assigned_!.delete(key)\n\t\t\t}\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tforEach(cb: (value: any, key: any, self: any) => void, thisArg?: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tget(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.entries()\n\t\t}\n\t}\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tclass DraftSet extends Set {\n\t\t[DRAFT_STATE]: SetState\n\t\tconstructor(target: AnySet, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Set,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tadd(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tforEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\t}\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n", "import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze,\n\tObjectish\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to enable strict shallow copy.\n *\n * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n */\nexport const setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\n", "import { produce, Draft, nothing, freeze } from \"immer\";\nimport { useState, useReducer, useCallback, useMemo, Dispatch } from \"react\";\n\nexport type DraftFunction<S> = (draft: Draft<S>) => void;\nexport type Updater<S> = (arg: S | DraftFunction<S>) => void;\nexport type ImmerHook<S> = [S, Updater<S>];\n\nexport function useImmer<S = any>(initialValue: S | (() => S)): ImmerHook<S>;\n\nexport function useImmer(initialValue: any) {\n  const [val, updateValue] = useState(() =>\n    freeze(\n      typeof initialValue === \"function\" ? initialValue() : initialValue,\n      true\n    )\n  );\n  return [\n    val,\n    useCallback((updater) => {\n      if (typeof updater === \"function\") updateValue(produce(updater));\n      else updateValue(freeze(updater));\n    }, []),\n  ];\n}\n\n// Provides different overloads of `useImmerReducer` similar to `useReducer` from `@types/react`.\n\nexport type ImmerReducer<S, A> = (\n  draftState: Draft<S>,\n  action: A\n) => void | (S extends undefined ? typeof nothing : S);\n\n/**\n * @deprecated Use `ImmerReducer` instead since there is already a `Reducer` type in `@types/react`.\n */\nexport type Reducer<S = any, A = any> = ImmerReducer<S, A>;\n\nexport function useImmerReducer<S, A, I>(\n  reducer: ImmerReducer<S, A>,\n  initializerArg: S & I,\n  initializer: (arg: S & I) => S\n): [S, Dispatch<A>];\n\nexport function useImmerReducer<S, A, I>(\n  reducer: ImmerReducer<S, A>,\n  initializerArg: I,\n  initializer: (arg: I) => S\n): [S, Dispatch<A>];\n\nexport function useImmerReducer<S, A>(\n  reducer: ImmerReducer<S, A>,\n  initialState: S,\n  initializer?: undefined\n): [S, Dispatch<A>];\n\nexport function useImmerReducer<S, A, I>(\n  reducer: ImmerReducer<S, A>,\n  initializerArg: S & I,\n  initializer?: (arg: S & I) => S\n) {\n  const cachedReducer = useMemo(() => produce(reducer), [reducer]);\n  return useReducer(cachedReducer, initializerArg as any, initializer as any);\n}\n", "// type JobId = string;\n// type UploadUrl = string;\n// type UploadInitValue = { jobId: JobId; uploadUrl: UploadUrl };\n// type UploadEndValue = never;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type ResponseValue = any;\n\nexport type OnSuccessRequest = (value: ResponseValue) => void;\nexport type OnErrorRequest = (err: string) => void;\n\n// Websocket messages are normally one-way--i.e. the client passes a\n// message to the server but there is no way for the server to provide\n// a response to that specific message. makeRequest provides a way to\n// do asynchronous RPC over websocket. Each request has a method name\n// and arguments, plus optionally one or more binary blobs can be\n// included as well. The request is tagged with a unique number that\n// the server will use to label the corresponding response.\n//\n// @param method A string that tells the server what logic to run.\n// @param args An array of objects that should also be passed to the\n//   server in JSON-ified form.\n// @param onSuccess A function that will be called back if the server\n//   responds with success. If the server provides a value in the\n//   response, the function will be called with it as the only argument.\n// @param onError A function that will be called back if the server\n//   responds with error, or if the request fails for any other reason.\n//   The parameter to onError will be a string describing the error.\n// @param blobs Optionally, an array of Blob, ArrayBuffer, or string\n//   objects that will be made available to the server as part of the\n//   request. Strings will be encoded using UTF-8.\nexport function makeRequest(\n  method: string,\n  args: unknown[],\n  onSuccess: OnSuccessRequest,\n  onError: OnErrorRequest,\n  blobs: Array<ArrayBuffer | Blob | string> | undefined\n) {\n  window.Shiny.shinyapp!.makeRequest(method, args, onSuccess, onError, blobs);\n}\n\nexport function makeRequestPromise({\n  method,\n  args,\n  blobs,\n}: {\n  method: string;\n  args: unknown[];\n  blobs?: Array<ArrayBuffer | Blob | string> | undefined;\n}) {\n  return new Promise((resolve, reject) => {\n    makeRequest(\n      method,\n      args,\n      (value: ResponseValue) => {\n        resolve(value);\n      },\n      (err: string) => {\n        reject(err);\n      },\n      blobs\n    );\n  });\n}\n", "import { ResponseValue, makeRequestPromise } from \"./request\";\n\nimport { CellStateEnum } from \"./cell\";\nimport {\n  CellEdit,\n  SetCellEditMapAtLoc,\n  makeCellEditMapKey,\n} from \"./cell-edit-map\";\nimport type { PatchInfo } from \"./types\";\n\nexport type CellPatch = {\n  rowIndex: number;\n  columnIndex: number;\n  value: any; // eslint-disable-line @typescript-eslint/no-explicit-any\n  // prev: unknown;\n};\nexport type CellPatchPy = {\n  row_index: number;\n  column_index: number;\n  value: unknown;\n  // prev: unknown;\n};\n\nexport function updateCellsData({\n  patchInfo,\n  patches,\n  onSuccess,\n  onError,\n  columns,\n  setData,\n  setCellEditMapAtLoc,\n}: {\n  patchInfo: PatchInfo;\n  patches: CellPatch[];\n  onSuccess: (values: CellPatch[]) => void;\n  onError: (err: string) => void;\n  columns: readonly string[];\n  setData: (fn: (draft: unknown[][]) => void) => void;\n  setCellEditMapAtLoc: SetCellEditMapAtLoc;\n}) {\n  // // Skip page index reset until after next rerender\n  // skipAutoResetPageIndex();\n\n  const patchesPy: CellPatchPy[] = patches.map((patch) => {\n    return {\n      row_index: patch.rowIndex,\n      column_index: patch.columnIndex,\n      value: patch.value,\n      // prev: patch.prev,\n    };\n  });\n\n  makeRequestPromise({\n    method: patchInfo.key,\n    args: [\n      // list[CellPatch]\n      patchesPy,\n    ],\n  })\n    .then((newPatchesPy: ResponseValue) => {\n      // Assert type of values is list\n      if (!Array.isArray(newPatchesPy)) {\n        throw new Error(\"Expected a response of a list of patches\");\n      }\n\n      for (const patch of newPatchesPy) {\n        if (\n          !(\"row_index\" in patch && \"column_index\" in patch && \"value\" in patch)\n        ) {\n          throw new Error(\n            \"Expected list of patches containing `row_index`, `column_index`, and `value`\"\n          );\n        }\n      }\n      newPatchesPy = newPatchesPy as CellPatchPy[];\n\n      const newPatches = newPatchesPy.map((patch: CellPatchPy) => {\n        return {\n          rowIndex: patch.row_index,\n          columnIndex: patch.column_index,\n          value: patch.value,\n        };\n      });\n\n      setData((draft) => {\n        newPatches.forEach(({ rowIndex, columnIndex, value }) => {\n          draft[rowIndex][columnIndex] = value;\n        });\n      });\n      newPatches.forEach(({ rowIndex, columnIndex, value }) => {\n        setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n          obj_draft.value = value;\n          obj_draft.state = CellStateEnum.EditSuccess;\n          // Remove save_error if it exists\n          obj_draft.errorTitle = undefined;\n        });\n      });\n      onSuccess(newPatches);\n    })\n    .catch((err: string) => {\n      patches.forEach(({ rowIndex, columnIndex, value }) => {\n        setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n          // Do not overwrite value!\n          obj_draft.value = String(value);\n\n          obj_draft.state = CellStateEnum.EditFailure;\n          obj_draft.errorTitle = String(err);\n        });\n      });\n      onError(err);\n    });\n}\n", "import { RowModel, flexRender } from \"@tanstack/react-table\";\nimport { VirtualItem } from \"@tanstack/react-virtual\";\nimport { Cell } from \"@tanstack/table-core\";\nimport dompurify from \"dompurify\";\nimport React, {\n  FC,\n  ChangeEvent as ReactChangeEvent,\n  ReactElement,\n  FocusEvent as ReactFocusEvent,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  useCallback,\n  useEffect,\n  useRef,\n} from \"react\";\nimport { CellEdit, SetCellEditMapAtLoc } from \"./cell-edit-map\";\nimport { updateCellsData } from \"./data-update\";\nimport type { PatchInfo } from \"./types\";\n\ntype HtmlDep = any;\n\n// States\n// # \u221A Ready\n// # \u221A Editing\n// # \u221A Saving / Disabled\n// # \u221A Error\n// # \u221A Saved\n// # Cancelled (is Ready state?)\n// # New\n// # Added\n// # Removed\nexport const CellStateEnum = {\n  EditSaving: \"EditSaving\",\n  EditSuccess: \"EditSuccess\",\n  EditFailure: \"EditFailure\",\n  Editing: \"Editing\",\n  Ready: \"Ready\",\n} as const;\nconst CellStateClassEnum = {\n  EditSaving: \"cell-edit-saving\",\n  EditSuccess: \"cell-edit-success\",\n  EditFailure: \"cell-edit-failure\",\n  Editing: \"cell-edit-editing\",\n  Ready: undefined,\n} as const;\nexport type CellState = keyof typeof CellStateEnum;\n\nconst isShinyHtmlFn = (\n  x: any\n): x is { isShinyHtml: true; obj: { deps?: HtmlDep[]; html: string } } => {\n  return (\n    x !== null &&\n    typeof x !== \"string\" &&\n    Object.prototype.hasOwnProperty.call(x, \"isShinyHtml\") &&\n    x.isShinyHtml === true\n  );\n};\n\ninterface TableBodyCellProps {\n  key: string;\n  rowId: string;\n  containerRef: React.RefObject<HTMLDivElement>;\n  cell: Cell<unknown[], unknown>;\n  patchInfo: PatchInfo;\n  columns: readonly string[];\n  rowIndex: number;\n  columnIndex: number;\n  editCellsIsAllowed: boolean;\n  getSortedRowModel: () => RowModel<unknown[]>;\n  setData: (fn: (draft: unknown[][]) => void) => void;\n  cellEditInfo: CellEdit | undefined;\n  setCellEditMapAtLoc: SetCellEditMapAtLoc;\n}\n\nexport const TableBodyCell: FC<TableBodyCellProps> = ({\n  containerRef,\n  rowId,\n  cell,\n  patchInfo,\n  columns,\n  rowIndex,\n  columnIndex,\n  editCellsIsAllowed,\n  getSortedRowModel,\n  cellEditInfo,\n  setData,\n  setCellEditMapAtLoc,\n}) => {\n  const initialValue = cell.getValue() as\n    | string\n    | { isShinyHtml: true; obj: { deps?: HtmlDep[]; html: string } }\n    | null;\n\n  const isHtmlColumn = cell.column.columnDef.meta!.isHtmlColumn;\n\n  // const isShinyHtml: boolean =\n  //   initialValue !== null &&\n  //   typeof initialValue !== \"string\" &&\n  //   Object.prototype.hasOwnProperty.call(initialValue, \"isShinyHtml\") &&\n  //   initialValue.isShinyHtml === true;\n  // const valueHasHtmlKey =\n  //   isHtmlColumn &&\n  //   typeof initialValue !== \"string\" &&\n  //   Object.prototype.hasOwnProperty.call(initialValue, \"html\");\n\n  const cellValue = cellEditInfo?.value ?? initialValue;\n  const getCellValueText = useCallback(() => {\n    if (isShinyHtmlFn(cellValue)) {\n      return cellValue.obj.html;\n    }\n    return cellValue as string;\n  }, [cellValue]);\n\n  const cellState = cellEditInfo?.state ?? CellStateEnum.Ready;\n  const errorTitle = cellEditInfo?.errorTitle;\n  // Listen to boolean value of cellEditInfo. This allows for the cell state to be restored if esc is hit\n  const isEditing = cellEditInfo?.isEditing ?? false;\n  const editValue = cellEditInfo?.editValue ?? getCellValueText();\n\n  // if (isEditing) console.log(\"editValue\", editValue, rowIndex, columnIndex);\n\n  const tdRef = useRef<HTMLTableCellElement | null>(null);\n  const inputRef = useRef<HTMLTextAreaElement | null>(null);\n  // editCellsIsAllowed = editCellsIsAllowed && !isHtmlColumn;\n\n  // Keyboard navigation:\n  // * When editing a cell:\n  //   * On esc key:\n  //     * \u221A Restore prior value / state / error\n  //     * Move focus from input to td\n  //   * On enter key:\n  //     * \u221A Save value\n  //     * \u221A Move to the cell below (or above w/ shift) and edit the new cell\n  //     * Should shift+enter add a newline in a cell?\n  //   * On tab key:\n  //     * \u221A Save value\n  //     * \u221A Move to the cell to the right (or left w/ shift) and edit the new cell\n  //   * Scrolls out of view:\n  //     * Intercept keyboard events and execute the above actions\n  //     * (Currently, there literally is no input DOM element to accept keyboard events)\n  // TODO-barret-future; More keyboard navigation!\n  //   * https://www.npmjs.com/package/@table-nav/react ?\n  // * When focused on a td:\n  //   * Allow for arrow key navigation\n  //   * Have enter key enter edit mode for a cell\n  //   * When a td is focused, Have esc key move focus to the table\n  //   * When table is focused, Have esc key blur the focus\n  // TODO-barret-future; Combat edit mode being independent of selection mode\n  // * In row / column selection mode, allow for arrow key navigation by focusing on a single cell, not a TR\n  // * If a cell is focused,\n  //   * `enter key` allows you to go into edit mode; If editing is turned off, the selection is toggled\n  //   * `space key` allows you toggle the selection of the cell\n  // * Arrow key navigation is required\n\n  const resetEditing = useCallback(\n    (\n      {\n        resetIsEditing = false,\n        resetEditValue = false,\n      }: { resetIsEditing?: boolean; resetEditValue?: boolean } = {\n        resetIsEditing: true,\n        resetEditValue: true,\n      }\n    ) => {\n      setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n        if (resetIsEditing) obj_draft.isEditing = false;\n        if (resetEditValue) obj_draft.editValue = undefined;\n      });\n    },\n    [rowIndex, columnIndex, setCellEditMapAtLoc]\n  );\n\n  const handleEsc = (e: ReactKeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key !== \"Escape\") return;\n    // Prevent default behavior\n    e.preventDefault();\n\n    // Turn off editing and the _temp_ edit value\n    resetEditing();\n  };\n  const handleTab = (e: ReactKeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key !== \"Tab\") return;\n    // Prevent default behavior\n    e.preventDefault();\n\n    const hasShift = e.shiftKey;\n\n    const newColumnIndex = columnIndex! + (hasShift ? -1 : 1);\n\n    // Submit changes to the current cell\n    attemptUpdate();\n\n    if (newColumnIndex < 0 || newColumnIndex >= columns.length) {\n      // If the new column index is out of bounds, quit\n      return;\n    }\n\n    // Turn on editing in next cell!\n    setCellEditMapAtLoc(rowIndex, newColumnIndex, (obj_draft) => {\n      obj_draft.isEditing = true;\n    });\n  };\n  // TODO future: Make Cmd-Enter add a newline in a cell.\n  const handleEnter = (e: ReactKeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key !== \"Enter\") return;\n    // Prevent default behavior\n    e.preventDefault();\n\n    const hasShift = e.shiftKey;\n\n    const rowModel = getSortedRowModel();\n    const sortedRowIndex = rowModel.rows.findIndex((row) => row.id === rowId);\n    // Couldn't find row... silently quit\n    if (sortedRowIndex < 0) {\n      return;\n    }\n    const nextSortedRowIndex = sortedRowIndex! + (hasShift ? -1 : 1);\n\n    // Submit changes to the current cell\n    attemptUpdate();\n\n    if (nextSortedRowIndex < 0 || nextSortedRowIndex >= rowModel.rows.length) {\n      // If the new row index is out of bounds, quit\n      return;\n    }\n\n    // Turn on editing in the next cell!\n    // Get the original row index\n    const targetRowIndex = rowModel.rows[nextSortedRowIndex].index;\n    setCellEditMapAtLoc(targetRowIndex, columnIndex, (obj_draft) => {\n      obj_draft.isEditing = true;\n    });\n  };\n\n  const onInputKeyDown = (e: ReactKeyboardEvent<HTMLTextAreaElement>) => {\n    [handleEsc, handleEnter, handleTab].forEach((fn) => fn(e));\n  };\n\n  const attemptUpdate = useCallback(() => {\n    // Reset error title\n    setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n      obj_draft.errorTitle = undefined;\n    });\n\n    // Only update if the string form of the value has changed\n    if (`${getCellValueText()}` === `${editValue}`) {\n      // Reset all edit info\n      resetEditing();\n      // Set state to prior cell state\n      setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n        obj_draft.state = cellState;\n      });\n      return;\n    }\n\n    // Only turn off editing for cell; Maintain all other edit info\n    resetEditing({ resetIsEditing: true });\n\n    // Set state to saving\n    setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n      obj_draft.state = CellStateEnum.EditSaving;\n    });\n    // Replace cell content to remove any HTML based cell values\n    // Can not use window.Shiny.renderContentAsync(tdRef.current, null) as the method is async;\n    // tdRef.current?.replaceChildren(\"\");\n    // // Reset any shiny bindings that have occurred in cell\n    // window.Shiny.bindAll();\n\n    // Update the data!\n    // updateCellsData updates the underlying data via `setData` and `setCellEditMapAtLoc`\n    updateCellsData({\n      patchInfo: patchInfo,\n      patches: [{ rowIndex, columnIndex, value: editValue }],\n      onSuccess: (_patches) => {\n        // Reset `editValue`\n        resetEditing({ resetEditValue: true });\n\n        // console.log(\"Success!!\");\n      },\n      onError: (_err) => {\n        // console.log(\"Error!!\", _err);\n        // // Do not reset edit value here so that users can \"restore\" their prior edit value\n        // resetEditing({ resetEditValue: true });\n      },\n      columns,\n      setData,\n      setCellEditMapAtLoc,\n    });\n  }, [\n    setCellEditMapAtLoc,\n    rowIndex,\n    columnIndex,\n    getCellValueText,\n    editValue,\n    resetEditing,\n    patchInfo,\n    columns,\n    setData,\n    cellState,\n  ]);\n\n  // Select the input when it becomes editable\n  useEffect(() => {\n    if (!isEditing) return;\n    if (!inputRef.current) return;\n\n    inputRef.current.focus();\n    inputRef.current.select();\n  }, [isEditing]);\n\n  // When editing a cell, set up a global click listener to reset edit info when\n  // clicking outside of the cell\n  useEffect(() => {\n    if (!isEditing) return;\n    if (!inputRef.current) return;\n\n    // TODO-barret; Restore cursor position and text selection here\n\n    // Set up global click listener to reset edit info\n    const onBodyClick = (e: MouseEvent) => {\n      if (e.target === inputRef.current) return;\n\n      attemptUpdate();\n      // Turn off editing for this cell\n      resetEditing();\n    };\n    document.body.addEventListener(\"click\", onBodyClick);\n\n    // Tear down global click listener when we're done\n    return () => {\n      document.body.removeEventListener(\"click\", onBodyClick);\n    };\n  }, [\n    cellState,\n    attemptUpdate,\n    rowIndex,\n    columnIndex,\n    isEditing,\n    resetEditing,\n  ]);\n\n  // Reselect the input when it comes into view!\n  // (It could be scrolled out of view and then back into view)\n  function onFocus(e: ReactFocusEvent<HTMLTextAreaElement>) {\n    if (isEditing) {\n      e.target.select();\n    }\n  }\n\n  function onChange(e: ReactChangeEvent<HTMLTextAreaElement>) {\n    // Update edit value to cell map\n    setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n      obj_draft.editValue = e.target.value;\n    });\n  }\n\n  // // https://medium.com/@oherterich/creating-a-textarea-with-dynamic-height-using-react-and-typescript-5ed2d78d9848\n  // // Updates the height of a <textarea> when the value changes.\n  // const useAutosizeTextArea = (\n  //   textAreaRef: HTMLTextAreaElement | null,\n  //   value: string\n  // ) => {\n  //   useEffect(() => {\n  //     if (textAreaRef) {\n  //       // We need to reset the height momentarily to get the correct scrollHeight for the textarea\n  //       textAreaRef.style.height = \"0px\";\n  //       const scrollHeight = textAreaRef.scrollHeight;\n\n  //       // We then set the height directly, outside of the render loop\n  //       // Trying to set this with state or a ref will product an incorrect value.\n  //       textAreaRef.style.height = scrollHeight + \"px\";\n  //     }\n  //   }, [textAreaRef, value]);\n  // };\n  // useAutosizeTextArea(inputRef.current, value as string);\n\n  let onClick:\n    | ((e: ReactMouseEvent<HTMLTableCellElement>) => void)\n    | undefined = undefined;\n  // let dangerousContent: { __html: string } | undefined = undefined;\n  let content: ReactElement | ReturnType<typeof flexRender> | undefined =\n    undefined;\n  const cellTitle = errorTitle;\n  const tableCellClass =\n    CellStateClassEnum[isEditing ? CellStateEnum.Editing : cellState];\n  let attemptRenderAsync = false;\n\n  let editContent: ReactElement | null = null;\n  if (cellState === CellStateEnum.EditSaving) {\n    // If saving, do not allow any clicks or edits\n    content = <em>{editValue as string}</em>;\n  } else {\n    if (isEditing) {\n      editContent = (\n        <textarea\n          value={String(editValue)}\n          onChange={onChange}\n          // onBlur={onBlur}\n          onFocus={onFocus}\n          onKeyDown={onInputKeyDown}\n          ref={inputRef}\n          // style={{ width: \"100%\", height: \"100%\" }}\n        />\n      );\n    } else {\n      // `isEditing` is `false`\n\n      // Only allow transition to edit mode if the cell can be edited\n      if (editCellsIsAllowed) {\n        onClick = (e: ReactMouseEvent<HTMLTableCellElement>) => {\n          // Do not prevent default or stop propagation here!\n          // Other methods need to be able to handle the event as well. e.g. `onBodyClick` above.\n          // e.preventDefault();\n          // e.stopPropagation();\n\n          // Set this cell to editing mode\n          setCellEditMapAtLoc(rowIndex, columnIndex, (obj_draft) => {\n            obj_draft.isEditing = true;\n            obj_draft.editValue = getCellValueText() as string;\n          });\n        };\n      }\n      if (isHtmlColumn) {\n        // // console.log(rowIndex, columnIndex, isEditing, editValue);\n        // // window.Shiny.renderContentAsync();\n        // const dangerousScript = `<script>console.log(1, this, this.parent)</script>`;\n        // // dangerousContent = { __html: dompurify.sanitize(cellValue as string) };\n        // dangerousContent = { __html: dangerousScript };\n        // attemptRenderAsync = true\n      }\n    }\n    if (!isShinyHtmlFn(cellValue)) {\n      content = flexRender(cell.column.columnDef.cell, cell.getContext());\n    } else {\n      attemptRenderAsync = true;\n    }\n  }\n\n  // TODO-barret; when the tdRef is visible when we should display dangerous content, run html script to display the UI!\n  useEffect(() => {\n    // console.log(\"useEffect\", rowIndex, columnIndex, isShinyHtml, content);\n    if (!tdRef.current) return;\n    if (!attemptRenderAsync) return;\n    if (!isShinyHtmlFn(cellValue)) return;\n    // if (isEditing) return;\n\n    // if (!isHtmlColumn) return;\n    // if (!isShinyHtmlFn(initialValue)) return;\n    // // Safety hatch; Do not render if content is already set\n    // if (content) return;\n\n    // console.log(initialValue, rowIndex, columnIndex);\n    // console.log(\"renderContentAsync\", rowIndex, columnIndex, cellValue.obj);\n\n    const cellValueObjDeepCopy = JSON.parse(JSON.stringify(cellValue.obj));\n\n    window.Shiny.renderContentAsync(tdRef.current, cellValueObjDeepCopy);\n\n    const curTdRef = tdRef.current;\n\n    return () => {\n      // console.log(\"renderContentAsync removed!\", rowIndex, columnIndex);\n      curTdRef.replaceChildren(\"\");\n    };\n  }, [tdRef, cellValue, rowIndex, columnIndex, attemptRenderAsync]);\n\n  // if (rowIndex === 1 && columnIndex === 1) {\n  //   console.log(\"TableBodyCell\", rowIndex, columnIndex, editContent, content);\n  // }\n\n  const ret = (\n    <td\n      // key={cell.id}\n      ref={tdRef}\n      onClick={onClick}\n      title={cellTitle}\n      className={tableCellClass}\n      // dangerouslySetInnerHTML={dangerousContent}\n    >\n      {editContent}\n      {content}\n    </td>\n  );\n\n  return ret;\n};\n\n// // TODO-barret; Consider using https://www.npmjs.com/package/react-contenteditable !\n// const cellValue = cell.getValue();\n// const cellValueType = typeof cellValue;\n// const cellContentIsEditable =\n//   cellValueType === \"string\" ||\n//   cellValueType === \"number\" ||\n//   cellValueType === \"boolean\" ||\n//   cellValueType === \"undefined\" ||\n//   cellValue === null;\n// if (cellContentIsEditable) {\n//   // cellContentEditable = \"\"plaintext-only\";\n//   cellContentEditable = true;\n// }\n// const onInput = (e: ReactChangeEvent<HTMLTableCellElement>) => {\n//   console.log(\"on input!\", e, rowIndex, columnIndex, e.target.textContent);\n// };\n// td attrs for below\n// contentEditable={cellContentEditable}\n// onInput={onInput}\n\n// const DangerouseContent: FC<{ fn: () => void }> = ({ fn }) => {\n//   const dangerousRef = useRef<HTMLDivElement | null>(null);\n\n//   useEffect(() => {\n//     if (!dangerousRef.current) return;\n//     fn(dangerousRef);\n\n//     return () => {\n//       console.log(\"Dangerous content removed!\", dangerousRef.current);\n//     };\n//   }, [fn, dangerousRef]);\n\n//   const ret = (\n//     <div ref={dangerousRef}>\n//       <p>Dangerous content!</p>\n//     </div>\n//   );\n\n//   return ret;\n// };\n", "import { enableMapSet } from \"immer\";\nimport { DraftFunction, Updater, useImmer } from \"use-immer\";\nimport type { CellState } from \"./cell\";\n\n// const [cellEditMap, setCellEditMap] = useImmer<\n//   Map<string, { value: string; state: CellState; save_error?: string }>\n// >(new Map<string, { value: string; state: CellState }>());\n// enableMapSet();\n\nexport type CellEdit = {\n  value?: string;\n  state?: CellState;\n  errorTitle?: string;\n  isEditing?: boolean;\n  editValue?: string;\n  // selection location info\n  // cursor position info\n};\nexport type CellEditMap = Map<string, CellEdit>;\nexport type SetCellEditMap = Updater<CellEditMap>;\nexport type SetCellEditMapAtLoc = (\n  rowIndex: number,\n  columnIndex: number,\n  obj_fn: DraftFunction<CellEdit>\n) => void;\nexport const useCellEditMap = () => {\n  const [cellEditMap, setCellEditMap] = useImmer<CellEditMap>(\n    new Map<string, CellEdit>()\n  );\n  enableMapSet();\n  const setCellEditMapAtLoc: SetCellEditMapAtLoc = (\n    rowIndex: number,\n    columnIndex: number,\n    obj_fn: DraftFunction<CellEdit>\n  ) => {\n    setCellEditMap((draft) => {\n      const key = makeCellEditMapKey(rowIndex, columnIndex);\n      const obj = draft.get(key) ?? ({} as CellEdit);\n      obj_fn(obj);\n      draft.set(key, obj);\n    });\n  };\n  return { cellEditMap, setCellEditMap, setCellEditMapAtLoc } as const;\n};\n\nexport const makeCellEditMapKey = (rowIndex: number, columnIndex: number) => {\n  return `[${rowIndex}, ${columnIndex}]`;\n};\n\nexport const cellEditMapHasKey = (\n  x: CellEditMap,\n  rowIndex: number,\n  columnIndex: number\n) => {\n  return x.has(makeCellEditMapKey(rowIndex, columnIndex));\n};\nexport const getCellEditMapObj = (\n  x: CellEditMap,\n  rowIndex: number,\n  columnIndex: number\n): [CellEdit, string] => {\n  const key = makeCellEditMapKey(rowIndex, columnIndex);\n  return [x.get(key) ?? ({} as CellEdit), key];\n};\n", "// Find the first item whose top-left corner is fully inside the visible portion of the\n// scroll container\nexport function findFirstItemInView(\n  scrollContainer: HTMLElement,\n  items: NodeList,\n  extraPadding?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  }\n) {\n  const pad = Object.assign(\n    { top: 0, right: 0, bottom: 0, left: 0 },\n    extraPadding\n  );\n  const container = scrollContainer;\n  const top = container.scrollTop + pad.top;\n  const left = container.scrollLeft + pad.left;\n  const bottom = top + container.clientHeight - pad.top - pad.bottom;\n  const right = left + container.clientWidth - pad.left - pad.right;\n\n  for (let i = 0; i < items.length; i++) {\n    const el = items[i] as HTMLElement;\n    const y = el.offsetTop,\n      x = el.offsetLeft;\n    if (y >= top && y <= bottom && x >= left && x <= right) {\n      return el;\n    }\n  }\n  return null;\n}\n\nexport function getStyle(el: Element, styleProp: string): string | undefined {\n  // getComputedStyle can return null when we're inside a hidden iframe on\n  // Firefox; don't attempt to retrieve style props in this case.\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n  return document?.defaultView\n    ?.getComputedStyle(el, null)\n    ?.getPropertyValue(styleProp);\n}\n", "import React, { FC, useEffect, useRef, useState } from \"react\";\n\nexport interface FilterNumericProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  // The absolute min/max possible values\n  range: () => [number | undefined, number | undefined];\n\n  // The currently selected min/max values\n  from: number | undefined;\n  to: number | undefined;\n\n  onRangeChange: (from?: number, to?: number) => void;\n}\n\nexport const FilterNumeric: FC<FilterNumericProps> = (props) => {\n  const [editing, setEditing] = useState(false);\n  const { range, from, to, onRangeChange } = props;\n\n  return (\n    <FilterNumericImpl\n      range={range}\n      value={[from, to]}\n      editing={editing}\n      onValueChange={(x) => onRangeChange(...x)}\n      onFocus={() => setEditing(true)}\n      onBlur={() => setEditing(false)}\n    />\n  );\n};\n\nfunction generateLabel(from?: number, to?: number) {\n  if (typeof from === \"undefined\" && typeof to === \"undefined\") {\n    return \"\";\n  } else if (typeof from === \"undefined\") {\n    return `\u2264 ${to}`;\n  } else if (typeof to === \"undefined\") {\n    return `\u2265 ${from}`;\n  } else {\n    return `\u2265${from}, \u2264${to}`;\n  }\n}\n\ninterface FilterNumericImplProps {\n  range: () => [number | undefined, number | undefined];\n  value: [number | undefined, number | undefined];\n  editing: boolean;\n  onValueChange: (range: [number | undefined, number | undefined]) => void;\n  onFocus: () => void;\n  onBlur: () => void;\n}\n\nconst FilterNumericImpl: React.FC<FilterNumericImplProps> = (props) => {\n  const [min, max] = props.value;\n  const { editing, onFocus } = props;\n\n  const minInputRef = useRef<HTMLInputElement>(null);\n  const maxInputRef = useRef<HTMLInputElement>(null);\n\n  return (\n    <div\n      onBlur={(e) => {\n        if (e.currentTarget.contains(e.relatedTarget)) {\n          return;\n        }\n        return props.onBlur();\n      }}\n      onFocus={() => onFocus()}\n      style={{\n        display: \"flex\",\n        gap: \"0.5rem\",\n      }}\n    >\n      <input\n        ref={minInputRef}\n        className={`form-control form-control-sm ${\n          minInputRef.current?.checkValidity() ? \"\" : \"is-invalid\"\n        }`}\n        style={{ flex: \"1 1 0\", width: \"0\" }}\n        type=\"number\"\n        placeholder={createPlaceholder(editing, \"Min\", props.range()[0])}\n        defaultValue={min}\n        step=\"any\"\n        onChange={(e) => {\n          const value = coerceToNum(e.target.value);\n          minInputRef.current.classList.toggle(\n            \"is-invalid\",\n            !e.target.checkValidity()\n          );\n          props.onValueChange([value, max]);\n        }}\n      />\n      <input\n        ref={maxInputRef}\n        className={`form-control form-control-sm ${\n          maxInputRef.current?.checkValidity() ? \"\" : \"is-invalid\"\n        }`}\n        style={{ flex: \"1 1 0\", width: \"0\" }}\n        type=\"number\"\n        placeholder={createPlaceholder(editing, \"Max\", props.range()[1])}\n        defaultValue={max}\n        step=\"any\"\n        onChange={(e) => {\n          const value = coerceToNum(e.target.value);\n          maxInputRef.current.classList.toggle(\n            \"is-invalid\",\n            !e.target.checkValidity()\n          );\n          props.onValueChange([min, value]);\n        }}\n      />\n    </div>\n  );\n};\n\nfunction createPlaceholder(\n  editing: boolean,\n  label: string,\n  value: number | undefined\n) {\n  if (!editing) {\n    return null;\n  } else if (typeof value === \"undefined\") {\n    return label;\n  } else {\n    return `${label} (${value})`;\n  }\n}\n\nfunction coerceToNum(value: string): number | undefined {\n  if (value === \"\") {\n    return undefined;\n  }\n  return +value;\n}\n", "import {\n  FiltersOptions,\n  Header,\n  TableOptions,\n  getFacetedMinMaxValues,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n} from \"@tanstack/react-table\";\nimport React, {\n  FC,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { FilterNumeric } from \"./filter-numeric\";\n\nexport function useFilter<TData>(\n  enabled: boolean | undefined\n): FiltersOptions<TData> {\n  if (enabled) {\n    return {\n      getFilteredRowModel: getFilteredRowModel(),\n      getFacetedRowModel: getFacetedRowModel(),\n      getFacetedUniqueValues: getFacetedUniqueValues(),\n      getFacetedMinMaxValues: getFacetedMinMaxValues(),\n      filterFns: {\n        substring: (row, columnId, value, addMeta) => {\n          return row.getValue(columnId).toString().includes(value);\n        },\n      },\n    };\n  } else {\n    return {};\n  }\n}\n\nexport interface FilterProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  header: Header<unknown[], unknown>;\n}\n\nexport const Filter: FC<FilterProps> = ({ header, className, ...props }) => {\n  const typeHint = header.column.columnDef.meta?.typeHint;\n\n  if (typeHint.type === \"numeric\") {\n    const [from, to] = (header.column.getFilterValue() as\n      | [number | undefined, number | undefined]\n      | undefined) ?? [undefined, undefined];\n\n    const range = () => {\n      return header.column.getFacetedMinMaxValues() ?? [undefined, undefined];\n    };\n\n    return FilterNumeric({\n      from,\n      to,\n      range,\n      onRangeChange: (from, to) => header.column.setFilterValue([from, to]),\n    });\n  }\n\n  return (\n    <input\n      {...props}\n      className={`form-control form-control-sm ${className}`}\n      type=\"text\"\n      onChange={(e) => header.column.setFilterValue(e.target.value)}\n    />\n  );\n};\n", "export class ImmutableSet<T> {\n  private _set: Set<T>;\n  private static _empty: ImmutableSet<unknown> = new ImmutableSet(new Set());\n\n  private constructor(set: Set<T>) {\n    this._set = set;\n  }\n\n  static empty<T>(): ImmutableSet<T> {\n    return this._empty as ImmutableSet<T>;\n  }\n\n  static just<T>(...values: T[]): ImmutableSet<T> {\n    return this.empty<T>().add(...values);\n  }\n\n  has(value: T): boolean {\n    return this._set.has(value);\n  }\n\n  add(...values: T[]): ImmutableSet<T> {\n    const newSet = new Set(this._set.keys());\n    for (const value of values) {\n      newSet.add(value);\n    }\n    return new ImmutableSet(newSet);\n  }\n\n  toggle(value: T): ImmutableSet<T> {\n    if (this.has(value)) {\n      return this.delete(value);\n    } else {\n      return this.add(value);\n    }\n  }\n\n  delete(value: T): ImmutableSet<T> {\n    const newSet = new Set(this._set.keys());\n    newSet.delete(value);\n    return new ImmutableSet(newSet);\n  }\n\n  clear(): ImmutableSet<T> {\n    return ImmutableSet.empty();\n  }\n\n  [Symbol.iterator]() {\n    return this._set[Symbol.iterator]();\n  }\n\n  toList(): T[] {\n    return [...this._set.keys()];\n  }\n}\n", "import * as React from \"react\";\nimport { useState } from \"react\";\nimport { ImmutableSet } from \"./immutable-set\";\n\nimport type { ValueOf } from \"./types\";\n\ntype BrowserCellSelectionNone = { type: \"none\" };\ntype BrowserCellSelectionRow = { type: \"row\"; rows: readonly number[] };\ntype BrowserCellSelectionCol = { type: \"col\"; cols: readonly number[] };\ntype BrowserCellSelectionRegion = {\n  type: \"region\";\n  rows: readonly [number, number];\n  cols: readonly [number, number];\n};\n\n// For sending and receiving selection info to python\nexport type BrowserCellSelection =\n  | BrowserCellSelectionNone\n  | BrowserCellSelectionRow\n  | BrowserCellSelectionCol\n  | BrowserCellSelectionRegion;\n\nexport interface SelectionSet<TKey, TElement extends HTMLElement> {\n  has(key: TKey): boolean;\n  set(key: TKey, selected: boolean): void;\n  setMultiple(key_arr: TKey[]): void;\n  clear(): void;\n  keys(): ImmutableSet<TKey>;\n  itemHandlers(): {\n    onMouseDown: (event: React.MouseEvent<TElement, MouseEvent>) => void;\n    onKeyDown: (event: React.KeyboardEvent<TElement>) => void;\n  };\n}\n\n// Keep as strings (and not pointer types) as this is a shape defined by the python side\nexport type SelectionModesProp = {\n  row: \"none\" | \"single\" | \"multiple\";\n  col: \"none\" | \"single\" | \"multiple\";\n  rect: \"none\" | \"region\" | \"cell\";\n};\nexport class SelectionModes {\n  static readonly _NONE = \"none\";\n  static readonly _ROW_SINGLE = \"single\";\n  static readonly _ROW_MULTIPLE = \"multiple\";\n  static readonly _COL_SINGLE = \"single\";\n  static readonly _col_multiple = \"multiple\";\n  static readonly _RECT_REGION = \"region\";\n  static readonly _RECT_CELL = \"cell\";\n\n  static readonly _rowEnum = {\n    NONE: SelectionModes._NONE,\n    SINGLE: SelectionModes._ROW_SINGLE,\n    MULTIPLE: SelectionModes._ROW_MULTIPLE,\n  } as const;\n  static readonly _colEnum = {\n    NONE: SelectionModes._NONE,\n    SINGLE: SelectionModes._COL_SINGLE,\n    MULTIPLE: SelectionModes._col_multiple,\n  } as const;\n  static readonly _rectEnum = {\n    NONE: SelectionModes._NONE,\n    REGION: SelectionModes._RECT_REGION,\n    CELL: SelectionModes._RECT_CELL,\n  } as const;\n\n  row: ValueOf<typeof SelectionModes._rowEnum>;\n  col: ValueOf<typeof SelectionModes._colEnum>;\n  rect: ValueOf<typeof SelectionModes._rectEnum>;\n\n  constructor({\n    row,\n    col,\n    rect,\n  }: {\n    row: SelectionModesProp[\"row\"];\n    col: SelectionModesProp[\"col\"];\n    rect: SelectionModesProp[\"rect\"];\n  }) {\n    if (!Object.values(SelectionModes._rowEnum).includes(row)) {\n      throw new Error(`Invalid row selection mode: ${row}`);\n    }\n    if (!Object.values(SelectionModes._colEnum).includes(col)) {\n      throw new Error(`Invalid col selection mode: ${col}`);\n    }\n    if (!Object.values(SelectionModes._rectEnum).includes(rect)) {\n      throw new Error(`Invalid rect selection mode: ${rect}`);\n    }\n    this.row = row;\n    this.col = col;\n    this.rect = rect;\n  }\n\n  is_none(): boolean {\n    return (\n      this.row === SelectionModes._rowEnum.NONE &&\n      this.col === SelectionModes._colEnum.NONE &&\n      this.rect === SelectionModes._rectEnum.NONE\n    );\n  }\n}\n\nexport function initRowSelectionModes(\n  selectionModesOption: SelectionModesProp | undefined\n): SelectionModes {\n  // If no option was provided, default to multinative mode\n  if (!selectionModesOption) {\n    selectionModesOption = { row: \"multi-native\", col: \"none\", rect: \"none\" };\n  }\n  return new SelectionModes({\n    row: selectionModesOption.row,\n    col: selectionModesOption.col,\n    rect: selectionModesOption.rect,\n  });\n}\n\nexport function useSelection<TKey, TElement extends HTMLElement>(\n  selectionModes: SelectionModes,\n  keyAccessor: (el: TElement) => TKey,\n  focusOffset: (start: TKey, offset: number) => TKey | null,\n  between?: (from: TKey, to: TKey) => ReadonlyArray<TKey>\n): SelectionSet<TKey, TElement> {\n  const [selectedKeys, setSelectedKeys] = useState<ImmutableSet<TKey>>(\n    ImmutableSet.empty()\n  );\n\n  // The anchor is the item that was most recently selected with a click or ctrl-click,\n  // and is used to determine the \"other end\" of a shift-click selection operation.\n  const [anchor, setAnchor] = useState<TKey | null>(null);\n\n  const onMouseDown = (event: React.MouseEvent<TElement, MouseEvent>): void => {\n    if (selectionModes.is_none()) {\n      return;\n    }\n\n    const el = event.currentTarget as TElement;\n    const key = keyAccessor(el);\n\n    const result = performMouseDownAction<TKey, TElement>(\n      selectionModes,\n      between,\n      selectedKeys,\n      event,\n      key,\n      anchor\n    );\n    if (result) {\n      setSelectedKeys(result.selection);\n      if (result.anchor) {\n        setAnchor(key);\n        el.focus();\n      }\n      event.preventDefault();\n    }\n  };\n\n  const onKeyDown = (event: React.KeyboardEvent<TElement>): void => {\n    if (selectionModes.is_none()) {\n      return;\n    }\n\n    const el = event.currentTarget as TElement;\n    const key = keyAccessor(el);\n    const selected = selectedKeys.has(key);\n\n    if (selectionModes.row === SelectionModes._rowEnum.SINGLE) {\n      if (event.key === \" \" || event.key === \"Enter\") {\n        if (selectedKeys.has(key)) {\n          setSelectedKeys(ImmutableSet.empty());\n        } else {\n          setSelectedKeys(ImmutableSet.just(key));\n        }\n        event.preventDefault();\n      } else if (event.key === \"ArrowUp\" || event.key === \"ArrowDown\") {\n        const targetKey = focusOffset(key, event.key === \"ArrowUp\" ? -1 : 1);\n        if (targetKey) {\n          event.preventDefault();\n          if (selected) {\n            setSelectedKeys(ImmutableSet.just(targetKey));\n          }\n        }\n      }\n    } else if (selectionModes.row === SelectionModes._rowEnum.MULTIPLE) {\n      if (event.key === \" \" || event.key === \"Enter\") {\n        setSelectedKeys(selectedKeys.toggle(key));\n        event.preventDefault();\n      } else if (event.key === \"ArrowUp\" || event.key === \"ArrowDown\") {\n        if (focusOffset(key, event.key === \"ArrowUp\" ? -1 : 1)) {\n          event.preventDefault();\n        }\n      }\n    }\n  };\n\n  return {\n    has(key: TKey): boolean {\n      return selectedKeys.has(key);\n    },\n\n    set(key: TKey, selected: boolean) {\n      if (selected) {\n        setSelectedKeys(selectedKeys.add(key));\n      } else {\n        setSelectedKeys(selectedKeys.delete(key));\n      }\n    },\n\n    setMultiple(key_arr: TKey[]) {\n      setSelectedKeys(ImmutableSet.just(...key_arr));\n    },\n\n    clear() {\n      setSelectedKeys(selectedKeys.clear());\n    },\n\n    keys() {\n      return selectedKeys;\n    },\n\n    itemHandlers() {\n      return { onMouseDown, onKeyDown };\n    },\n  };\n}\n\ndeclare global {\n  interface Navigator {\n    readonly userAgentData?: NavigatorUAData;\n  }\n  interface NavigatorUAData {\n    readonly brands?: { brand: string; version: string }[];\n    readonly mobile?: boolean;\n    readonly platform?: string;\n  }\n}\n\nconst isMac = /^mac/i.test(\n  window.navigator.userAgentData?.platform ?? window.navigator.platform\n);\n\nfunction performMouseDownAction<TKey, TElement>(\n  selectionModes: SelectionModes,\n  between: ((from: TKey, to: TKey) => readonly TKey[]) | undefined,\n  selectedKeys: ImmutableSet<TKey>,\n  event: React.MouseEvent<TElement, MouseEvent>,\n  key: TKey,\n  anchor: TKey | null\n): { selection: ImmutableSet<TKey>; anchor?: true } | null {\n  const { shiftKey, altKey } = event;\n  const ctrlKey = isMac ? event.metaKey : event.ctrlKey;\n  const metaKey = isMac ? event.ctrlKey : event.metaKey;\n\n  if (metaKey || altKey) {\n    return null;\n  }\n\n  if (selectionModes.row === SelectionModes._rowEnum.NONE) {\n    return null;\n  } else if (selectionModes.row === SelectionModes._rowEnum.SINGLE) {\n    if (ctrlKey && !shiftKey) {\n      // Ctrl-click is like simple click, except it removes selection if an item is\n      // already selected\n      if (selectedKeys.has(key)) {\n        return { selection: ImmutableSet.empty(), anchor: true };\n      } else {\n        return { selection: ImmutableSet.just(key), anchor: true };\n      }\n    } else {\n      // Simple click sets selection, always\n      return { selection: ImmutableSet.just(key), anchor: true };\n    }\n    // TODO-barret; multinative should be the new definition of `rows`!\n  } else if (selectionModes.row === SelectionModes._rowEnum.MULTIPLE) {\n    if (shiftKey && ctrlKey) {\n      // Ctrl-Shift-click: Add anchor row through current row to selection\n      if (anchor !== null && between) {\n        const toSelect = between(anchor, key);\n        return { selection: selectedKeys.add(...toSelect) };\n      }\n    } else if (ctrlKey) {\n      // Ctrl-click: toggle the current row and make it anchor\n      return { selection: selectedKeys.toggle(key), anchor: true };\n    } else if (shiftKey) {\n      // Shift-click: replace selection with anchor row through current row\n      if (anchor !== null && between) {\n        const toSelect = between(anchor, key);\n        return { selection: ImmutableSet.just(...toSelect) };\n      }\n    } else {\n      // Regular click: Select the current row and make it anchor\n      return { selection: ImmutableSet.just(key), anchor: true };\n    }\n  } else {\n    throw new Error(`Unsupported row selection mode: ${selectionModes.row}`);\n  }\n  return null;\n}\n", "import { SortDirection } from \"@tanstack/react-table\";\nimport React, { FC } from \"react\";\n\nconst sortCommonProps = {\n  className: \"sort-arrow\",\n  viewBox: [-1, -1, 2, 2].map((x) => x * 1.4).join(\" \"),\n  width: \"100%\",\n  height: \"100%\",\n  style: { paddingLeft: \"3px\" },\n};\n\nconst sortPathCommonProps = {\n  stroke: \"#333333\",\n  strokeWidth: \"0.6\",\n  fill: \"transparent\",\n};\n\nconst sortArrowUp = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" {...sortCommonProps}>\n    <path\n      d=\"M -1 0.5 L 0 -0.5 L 1 0.5\"\n      {...sortPathCommonProps}\n      strokeLinecap=\"round\"\n    />\n  </svg>\n);\n\nconst sortArrowDown = (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" {...sortCommonProps}>\n    <path\n      d=\"M -1 -0.5 L 0 0.5 L 1 -0.5\"\n      {...sortPathCommonProps}\n      strokeLinecap=\"round\"\n    />\n  </svg>\n);\n\ninterface SortArrowProps {\n  direction: SortDirection | false;\n}\n\nexport const SortArrow: FC<SortArrowProps> = ({ direction }) => {\n  if (!direction) {\n    return null;\n  }\n  if (direction === \"asc\") {\n    return sortArrowUp;\n  }\n  if (direction === \"desc\") {\n    return sortArrowDown;\n  }\n  throw new Error(`Unexpected sort direction: '${direction}'`);\n};\n\n//const sortArrowUp = <span className=\"sort-arrow sort-arrow-up\"> \u25B2</span>;\n//const sortArrowDown = <span className=\"sort-arrow sort-arrow-down\"> \u25BC</span>;\n", "export default `\n/*\n *\n * # Variables\n *\n */\nshiny-data-frame {\n  --shiny-datagrid-font-size: 0.9em;\n  --shiny-datagrid-padding-x: 0.5em;\n  --shiny-datagrid-padding-y: 0.3em;\n  --shiny-datagrid-padding: var(--shiny-datagrid-padding-y) var(--shiny-datagrid-padding-x);\n  --shiny-datagrid-grid-header-bgcolor: var(--bs-light, #eee);\n  --shiny-datagrid-grid-header-gridlines-color: var(--bs-border-color, #ccc);\n  --shiny-datagrid-grid-header-gridlines-style: solid;\n  --shiny-datagrid-grid-gridlines-color: var(--bs-border-color, #ccc);\n  --shiny-datagrid-grid-gridlines-style: solid;\n  --shiny-datagrid-table-header-bottom-border: 1px solid;\n  --shiny-datagrid-table-top-border: 1px solid;\n  --shiny-datagrid-table-bottom-border: 1px solid;\n  --shiny-datagrid-grid-body-hover-bgcolor: var(--shiny-datagrid-grid-header-bgcolor);\n  --shiny-datagrid-grid-body-selected-bgcolor: #b4d5fe;\n  --shiny-datagrid-grid-body-selected-color: var(--bs-dark);\n  --shiny-datagrid-table-cell-edit-success-border-color: color-mix(in srgb, var(--bs-success) 20%, transparent);\n  --shiny-datagrid-table-cell-edit-success-border-style: var(--shiny-datagrid-grid-gridlines-style);\n  --shiny-datagrid-table-cell-edit-success-bgcolor: color-mix(in srgb, var(--bs-success) 10%, transparent);\n  --shiny-datagrid-table-cell-edit-failure-border-color: color-mix(in srgb, var(--bs-danger) 40%, transparent);\n  --shiny-datagrid-table-cell-edit-failure-border-style: var(--shiny-datagrid-grid-gridlines-style);\n  --shiny-datagrid-table-cell-edit-failure-bgcolor: color-mix(in srgb, var(--bs-danger) 10%, transparent);\n  --shiny-datagrid-table-cell-edit-saving-color: var(--bs-gray-500);\n  --shiny-datagrid-table-cell-edit-saving-font-style: italic;\n}\n\n/*\n *\n * # BASE STYLES\n *\n */\nshiny-data-frame *,\nshiny-data-frame *::before,\nshiny-data-frame *::after {\n  box-sizing: border-box;\n}\n\nshiny-data-frame .shiny-data-grid svg.sort-arrow {\n  display: inline-block;\n  width: 0.85em;\n  height: 0.85em;\n  margin-bottom: 0.15em;\n}\n\nshiny-data-frame .shiny-data-grid {\n  max-width: 100%;\n  height: auto;\n}\nshiny-data-frame .shiny-data-grid.scrolling {\n  height: 500px;\n}\nshiny-data-frame .shiny-data-grid > table {\n  border-collapse: separate;\n  border-spacing: 0;\n}\nshiny-data-frame .shiny-data-grid > table > thead {\n  position: sticky;\n  top: 0;\n}\nshiny-data-frame .shiny-data-grid > table > thead > tr > th {\n  text-align: left;\n  white-space: nowrap;\n}\nshiny-data-frame .shiny-data-grid > table > thead > tr > th:focus-visible {\n  outline: 5px auto Highlight;\n  outline: 5px auto -webkit-focus-ring-color;\n}\nshiny-data-frame .shiny-data-grid > table.filtering > thead > tr:nth-last-child(2) > th {\n  border-bottom: none;\n}\nshiny-data-frame .shiny-data-grid > table.filtering > thead > tr.filters > th {\n  font-weight: unset;\n  padding-top: 0;\n  /* Slight boost to bottom padding */\n  padding-bottom: var(--shiny-datagrid-padding-x);\n}\nshiny-data-frame .shiny-data-grid > table.filtering > thead > tr.filters > th > input {\n  width: 100%;\n}\n\nshiny-data-frame .shiny-data-grid > .shiny-data-grid-summary {\n  font-size: var(--shiny-datagrid-font-size);\n  padding-top: 0.3em;\n}\n\n/*\n *\n * # DATATABLE STYLES\n *\n */\nshiny-data-frame .shiny-data-grid.shiny-data-grid-table {\n  border-top: var(--shiny-datagrid-table-top-border);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-table.scrolling {\n  border-bottom: var(--shiny-datagrid-table-bottom-border);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-table > table > thead > tr:last-child > th {\n  border-bottom: var(--shiny-datagrid-table-header-bottom-border);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-table > table > tbody > tr[aria-selected=true] {\n  --shiny-datagrid-grid-gridlines-color: var(--shiny-datagrid-grid-body-selected-bgcolor);\n  background-color: var(--shiny-datagrid-grid-body-selected-bgcolor);\n  color: var(--shiny-datagrid-grid-body-selected-color);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-table > table > tbody > tr[aria-selected=true] td {\n  background-color: var(--shiny-datagrid-grid-body-selected-bgcolor);\n  color: var(--shiny-datagrid-grid-body-selected-color);\n}\n\n/*\n *\n * # GRID STYLES\n *\n */\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table {\n  font-size: var(--shiny-datagrid-font-size);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > thead > tr > th,\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > thead > tr > td {\n  background-color: var(--shiny-datagrid-grid-header-bgcolor);\n  padding: var(--shiny-datagrid-padding);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr:focus-visible {\n  outline: 5px auto Highlight;\n  outline: 5px auto -webkit-focus-ring-color;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr:hover {\n  --shiny-datagrid-grid-gridlines-color: inherit;\n  background-color: var(--shiny-datagrid-grid-body-hover-bgcolor);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr[aria-selected=true] {\n  background-color: var(--shiny-datagrid-grid-body-selected-bgcolor);\n  color: var(--shiny-datagrid-grid-body-selected-color);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr > td {\n  padding: var(--shiny-datagrid-padding);\n}\n\n/* ## Grid borders */\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table {\n  border-collapse: separate;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > thead > tr:first-child > th {\n  border-top-style: var(--shiny-datagrid-grid-gridlines-style);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > thead > tr > th {\n  border: 1px var(--shiny-datagrid-grid-gridlines-style) var(--shiny-datagrid-grid-header-gridlines-color);\n  border-top-style: none;\n  border-left-style: none;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > thead > tr > th:first-child {\n  border-left-style: var(--shiny-datagrid-grid-gridlines-style);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr > td {\n  border: 1px var(--shiny-datagrid-grid-gridlines-style) var(--shiny-datagrid-grid-gridlines-color);\n  border-top-style: none;\n  border-left-style: none;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid > table > tbody > tr > td:first-child {\n  border-left-style: var(--shiny-datagrid-grid-gridlines-style);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling {\n  border: var(--shiny-datagrid-grid-gridlines-style) 1px var(--shiny-datagrid-grid-header-gridlines-color);\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling > table > thead > tr:first-child > th {\n  border-top-style: none;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling > table > tbody > tr:last-child > td {\n  border-bottom-style: none;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling > table > thead > tr > th:first-child,\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling > table > tbody > tr > td:first-child {\n  border-left-style: none;\n}\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling > table > thead > tr > th:last-child,\nshiny-data-frame .shiny-data-grid.shiny-data-grid-grid.scrolling > table > tbody > tr > td:last-child {\n  border-right-style: none;\n}\n\n/*\n *\n * # FILLING LAYOUT STYLES\n *\n */\n/* Center the table when inside of a card */\n.card-body shiny-data-frame .shiny-data-grid {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n/* When .shiny-data-grid is not scrolling, the containers shouldn't flex */\nshiny-data-frame:has(> div > .shiny-data-grid:not(.scrolling)) {\n  flex: 0 0 auto;\n}\nshiny-data-frame > div:has(> .shiny-data-grid:not(.scrolling)) {\n  flex: 0 0 auto;\n}\n\n/*\n *\n * # CELL EDITING STYLES\n *\n */\nshiny-data-frame .shiny-data-grid > table > tbody > tr > td.cell-edit-editing {\n  color: transparent;\n  position: relative;\n}\nshiny-data-frame .shiny-data-grid > table > tbody > tr > td.cell-edit-editing :not(textarea) {\n  visibility: hidden;\n}\nshiny-data-frame .shiny-data-grid > table > tbody > tr > td.cell-edit-editing > textarea {\n  position: absolute;\n  padding: var(--shiny-datagrid-padding);\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: none;\n  background-color: inherit;\n  resize: none;\n}\n\nshiny-data-frame .shiny-data-grid > table > tbody > tr > td.cell-edit-saving {\n  color: var(--shiny-datagrid-table-cell-edit-saving-color);\n  font-style: var(--shiny-datagrid-table-cell-edit-saving-font-style);\n}\nshiny-data-frame .shiny-data-grid > table > tbody > tr > td.cell-edit-failure {\n  outline: 2px var(--shiny-datagrid-table-cell-edit-failure-border-style) var(--shiny-datagrid-table-cell-edit-failure-border-color);\n  background-color: var(--shiny-datagrid-table-cell-edit-failure-bgcolor);\n}`;\n", "import React, { useState } from \"react\";\nimport { findFirstItemInView } from \"./dom-utils\";\n\nexport interface TabindexGroup<TElement extends HTMLElement> {\n  containerTabIndex: number;\n  containerHandlers: {\n    onFocus: (event: React.FocusEvent<TElement>) => void;\n    onBlur: (event: React.FocusEvent<TElement>) => void;\n  };\n}\n\nexport function useTabindexGroup<TContainerElement extends HTMLElement>(\n  container: TContainerElement | null,\n  focusableItems: () => NodeList,\n  extraPadding?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  }\n): TabindexGroup<TContainerElement> {\n  const [tabIndex, setTabIndex] = useState(0);\n\n  const onFocus = React.useCallback(\n    (event: React.FocusEvent<TContainerElement>) => {\n      // When focus is within (or on, but we only really care about within) the\n      // container, remove it from the tab order. If we don't set the tab stop to -1,\n      // then the logic below (that, on container focus, moves focus to the first item)\n      // causes Shift-Tab from a focused item to break, as focus moves to the container\n      // and then (back) to the first item.\n      setTabIndex(-1);\n\n      if (event.target !== event.currentTarget) {\n        // Not interested in capturing, only care about focus on the container itself\n        return;\n      }\n\n      findFirstItemInView(container!, focusableItems(), extraPadding)?.focus();\n    },\n    [container, focusableItems, extraPadding]\n  );\n\n  const onBlur = React.useCallback(\n    (event: React.FocusEvent<TContainerElement>) => {\n      setTabIndex(0);\n    },\n    []\n  );\n\n  return {\n    containerTabIndex: tabIndex,\n    containerHandlers: {\n      onFocus,\n      onBlur,\n    },\n  };\n}\n", "import { VirtualItem } from \"@tanstack/react-virtual\";\nimport React, { useMemo } from \"react\";\n\n/**\n * Create a summary\n *\n * @param summaryTemplate A string with \"{start}\", \"{end}\", and \"{total}\"\n * @param scrollContainer Scrolling container of the table/grid\n * @param virtualRows VirtualItem objects that might currently be visible\n * @param thead The thead tag of the table\n * @param nrows Number of total rows of data that exist\n */\nexport function useSummary(\n  summaryTemplate: string | boolean | undefined,\n  scrollContainer: HTMLElement | null,\n  virtualRows: VirtualItem[],\n  thead: HTMLTableSectionElement | null,\n  nrows: number\n): JSX.Element | null {\n  return useMemo(() => {\n    const summaryOption = summaryTemplate ?? true;\n    if (!summaryOption) {\n      return null;\n    }\n\n    const template =\n      typeof summaryOption === \"string\"\n        ? summaryOption\n        : \"Viewing rows {start} through {end} of {total}\";\n\n    if (!scrollContainer) {\n      return null;\n    }\n    if (virtualRows.length === 0) {\n      return null;\n    }\n\n    if (!thead) return null;\n\n    const top = scrollContainer.scrollTop + thead.clientHeight;\n    const bot = scrollContainer.scrollTop + scrollContainer.clientHeight;\n\n    const [firstIndex, lastIndex] = findRangeIndex(\n      top,\n      bot,\n      virtualRows,\n      (vrow, start) => vrow.start + vrow.size / 2\n    );\n\n    if (firstIndex === null || lastIndex === null) {\n      // Something must've gone wrong if there are rows but none of them are within the\n      // visible scroll area... shrug\n      return null;\n    }\n\n    const firstRow = virtualRows[firstIndex];\n    const lastRow = virtualRows[lastIndex];\n\n    if (firstRow.index === 0 && lastRow.index === nrows - 1) {\n      // Viewing all rows; no need for a summary\n      return null;\n    }\n\n    const summaryMessage = formatSummary(\n      template,\n      firstRow.index + 1,\n      lastRow.index + 1,\n      nrows\n    );\n\n    return <div className=\"shiny-data-grid-summary\">{summaryMessage}</div>;\n  }, [summaryTemplate, scrollContainer, virtualRows, thead, nrows]);\n}\n\n/**\n * Find the subset of (sorted) items that are between start and end (inclusive), where\n * each item's value to compare is calculated by a mapping function. The mapping\n * function may behave differently when comparing to start vs. end.\n *\n * @param start The smallest value to include.\n * @param end The largest value to include.\n * @param items A set of items to be evaluated, in sorted order.\n * @param map A function for converting from an item to a comparison value; for example,\n *   if 'start' and 'end' are vertical pixel coordinates, then the function might\n *   return the item's vertical top (for start) or bottom (for end) coordinate.\n * @returns The start and end indexes into the 'items' array indicating the first and\n *   last item that is included.\n */\nfunction findRangeIndex<TItem>(\n  start: number,\n  end: number,\n  items: TItem[],\n  map: (x: TItem, start: boolean) => number\n): [first: number | null, last: number | null] {\n  let first: number | null = null;\n  let last: number | null = null;\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n    if (first === null) {\n      if (map(item, true) >= start) {\n        first = i;\n        last = i;\n      }\n    } else {\n      if (map(item, false) <= end) {\n        last = i;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return [first, last];\n}\n\nfunction formatSummary(\n  template: string,\n  start: number,\n  end: number,\n  total: number\n) {\n  return template.replace(/\\{(start|end|total)\\}/g, (substr, token) => {\n    if (token === \"start\") {\n      return start + \"\";\n    } else if (token === \"end\") {\n      return end + \"\";\n    } else if (token === \"total\") {\n      return total + \"\";\n    } else {\n      return substr;\n    }\n  });\n}\n", "/* eslint-disable react-hooks/rules-of-hooks */\nimport {\n  Column,\n  ColumnDef,\n  RowData,\n  RowModel,\n  TableOptions,\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { Virtualizer, useVirtualizer } from \"@tanstack/react-virtual\";\nimport React, {\n  FC,\n  StrictMode,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Root, createRoot } from \"react-dom/client\";\nimport { ErrorsMessageValue } from \"rstudio-shiny/srcts/types/src/shiny/shinyapp\";\nimport { useImmer } from \"use-immer\";\nimport { TableBodyCell } from \"./cell\";\nimport { getCellEditMapObj, useCellEditMap } from \"./cell-edit-map\";\nimport { findFirstItemInView, getStyle } from \"./dom-utils\";\nimport { Filter, useFilter } from \"./filter\";\nimport type { BrowserCellSelection, SelectionModesProp } from \"./selection\";\nimport {\n  SelectionModes,\n  initRowSelectionModes,\n  useSelection,\n} from \"./selection\";\nimport { SortArrow } from \"./sort-arrows\";\nimport css from \"./styles.scss\";\nimport { useTabindexGroup } from \"./tabindex-group\";\nimport { useSummary } from \"./table-summary\";\nimport { EditModeEnum, PandasData, PatchInfo, TypeHint } from \"./types\";\n\n// TODO-barret set selected cell as input! (Might be a followup?)\n\n// TODO-barret; Type support\n// export interface PandasData<TIndex> {\n//   columns: ReadonlyArray<string>;\n//   // index: ReadonlyArray<TIndex>;\n//   data: unknown[][];\n//   typeHints?: ReadonlyArray<TypeHint>;\n//   options: DataGridOptions;\n// }\n\ndeclare module \"@tanstack/table-core\" {\n  interface ColumnMeta<TData extends RowData, TValue> {\n    colIndex: number;\n    typeHint: TypeHint | undefined;\n    isHtmlColumn: boolean;\n  }\n  // interface TableMeta<TData extends RowData> {\n  //   updateCellsData: (cellInfos: UpdateCellData[]) => void;\n  // }\n}\n\n// // TODO-barret-future; Use window.setSelectionRange() and this method to reselect text when scrolling out of view\n// const useSelectedText = () => {\n//   const [text, setText] = useState(\"\");\n//   const select = () => {\n//     const selected = window.getSelection() as Selection;\n//     setText(selected.toString());\n//   };\n//   return [select, text] as const;\n// };\n\n//\n\n// TODO: Right-align numeric columns, maybe change font\n// TODO: Explicit column widths\n// TODO: Filtering\n// TODO: Editing\n// TODO: Pagination\n// TODO: Range selection + copying\n// TODO: Find\n// TODO: Server-side mode (don't pull all data to client at once)\n// TODO: Localization of summary\n// TODO: Accessibility review\n// TODO: Drag to resize columns\n// TODO: Drag to resize table/grid\n// TODO: Row numbers\n\ntype ShinyDataGridServerInfo<TIndex> = {\n  payload: PandasData<TIndex>;\n  patchInfo: PatchInfo;\n  selectionModes: SelectionModesProp;\n};\n\ninterface ShinyDataGridProps<TIndex> {\n  id: string | null;\n  gridInfo: ShinyDataGridServerInfo<TIndex>;\n  bgcolor?: string;\n}\n\nconst ShinyDataGrid: FC<ShinyDataGridProps<unknown>> = ({\n  id,\n  gridInfo: { payload, patchInfo, selectionModes: selectionModesProp },\n  bgcolor,\n}) => {\n  const {\n    columns,\n    typeHints,\n    data: rowData,\n    options: payloadOptions,\n  } = payload;\n  const { width, height, fill, filters: withFilters } = payloadOptions;\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const theadRef = useRef<HTMLTableSectionElement>(null);\n  const tbodyRef = useRef<HTMLTableSectionElement>(null);\n\n  const { cellEditMap, setCellEditMapAtLoc } = useCellEditMap();\n\n  const editCellsIsAllowed = payloadOptions[\"editable\"] === true;\n\n  const coldefs = useMemo<ColumnDef<unknown[], unknown>[]>(\n    () =>\n      columns.map((colname, i) => {\n        const typeHint = typeHints?.[i];\n\n        return {\n          accessorFn: (row, index) => {\n            return row[i];\n          },\n          // TODO: delegate this decision to something in filter.tsx\n          filterFn:\n            typeHint?.type === \"numeric\" ? \"inNumberRange\" : \"includesString\",\n          header: colname,\n          meta: {\n            colIndex: i,\n            isHtmlColumn: payloadOptions[\"htmlColumns\"]?.includes(i) ?? false,\n            typeHint: typeHint,\n          },\n          cell: ({ getValue }) => {\n            return getValue() as string;\n          },\n        };\n      }),\n    [columns, typeHints]\n  );\n\n  // TODO-barret-future; Possible pagination helper\n  // function useSkipper() {\n  //   const shouldSkipRef = React.useRef(true);\n  //   const shouldSkip = shouldSkipRef.current;\n\n  //   // Wrap a function with this to skip a pagination reset temporarily\n  //   const skip = React.useCallback(() => {\n  //     shouldSkipRef.current = false;\n  //   }, []);\n\n  //   React.useEffect(() => {\n  //     shouldSkipRef.current = true;\n  //   });\n\n  //   return [shouldSkip, skip] as const;\n  // }\n  // const [autoResetPageIndex, skipAutoResetPageIndex] = useSkipper();\n\n  const dataOriginal = useMemo(() => rowData, [rowData]);\n  const [dataState, setData] = useImmer(rowData);\n\n  const filterOpts = useFilter<unknown[]>(withFilters);\n\n  const options: TableOptions<unknown[]> = {\n    data: dataState,\n    columns: coldefs,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    ...filterOpts,\n    // debugAll: true,\n    // Provide our updateCellsData function to our table meta\n    // autoResetPageIndex,\n    // meta: {\n    //   updateCellsData: (cellInfos: UpdateCellData[]) => {},\n    // },\n  };\n  const table = useReactTable(options);\n\n  const rowVirtualizer = useVirtualizer({\n    count: table.getFilteredRowModel().rows.length,\n    getScrollElement: () => containerRef.current,\n    estimateSize: () => 31,\n    paddingStart: theadRef.current?.clientHeight ?? 0,\n    // In response to https://github.com/posit-dev/py-shiny/pull/538/files#r1228352446\n    // (the default scrollingDelay is 150)\n    scrollingDelay: 10,\n  });\n\n  // Reset scroll when dataset changes\n  useLayoutEffect(() => {\n    rowVirtualizer.scrollToOffset(0);\n  }, [payload, rowVirtualizer]);\n\n  const totalSize = rowVirtualizer.getTotalSize();\n  const virtualRows = rowVirtualizer.getVirtualItems();\n\n  // paddingTop and paddingBottom are to force the <tbody> to add up to the correct\n  // virtual height.\n  // paddingTop must subtract out the thead height, since thead is inside the scroll\n  // container but not virtualized.\n  const paddingTop =\n    (virtualRows.length > 0 ? virtualRows?.[0]?.start || 0 : 0) -\n      (theadRef.current?.clientHeight ?? 0) ?? 0;\n  const paddingBottom =\n    virtualRows.length > 0\n      ? totalSize - (virtualRows?.[virtualRows.length - 1]?.end || 0)\n      : 0;\n\n  const summary = useSummary(\n    payloadOptions[\"summary\"],\n    containerRef?.current,\n    virtualRows,\n    theadRef.current,\n    rowVirtualizer.options.count\n  );\n\n  const tableStyle = payloadOptions[\"style\"] ?? \"grid\";\n  const containerClass =\n    tableStyle === \"grid\" ? \"shiny-data-grid-grid\" : \"shiny-data-grid-table\";\n  const tableClass = tableStyle === \"table\" ? \"table table-sm\" : null;\n\n  // ### Row selection ###############################################################\n\n  const rowSelectionModes = initRowSelectionModes(selectionModesProp);\n\n  const canSelect = !rowSelectionModes.is_none();\n  const canMultiRowSelect =\n    rowSelectionModes.row !== SelectionModes._rowEnum.NONE;\n\n  const rowSelection = useSelection<string, HTMLTableRowElement>(\n    rowSelectionModes,\n    (el) => el.dataset.key!,\n    (key, offset) => {\n      const rowModel = table.getSortedRowModel();\n      let index = rowModel.rows.findIndex((row) => row.id === key);\n      if (index < 0) {\n        return null;\n      }\n      index += offset;\n      if (index < 0 || index >= rowModel.rows.length) {\n        return null;\n      }\n      const targetKey = rowModel.rows[index].id;\n      rowVirtualizer.scrollToIndex(index);\n      setTimeout(() => {\n        const targetEl = containerRef.current?.querySelector(\n          `[data-key='${targetKey}']`\n        ) as HTMLElement | null;\n        targetEl?.focus();\n      }, 0);\n      return targetKey;\n    },\n    (fromKey, toKey) =>\n      findKeysBetween(table.getSortedRowModel(), fromKey, toKey)\n  );\n\n  useEffect(() => {\n    const handleMessage = (\n      event: CustomEvent<{ cellSelection: BrowserCellSelection }>\n    ) => {\n      // We convert \"None\" to an empty tuple on the python side\n      // so an empty array indicates that selection should be cleared.\n\n      const cellSelection = event.detail.cellSelection;\n\n      if (cellSelection.type === \"none\") {\n        rowSelection.clear();\n        return;\n        // } else if (cellSelection.type === \"all\") {\n        //   rowSelection.setMultiple(rowData.map((_, i) => String(i)));\n        //   return;\n      } else if (cellSelection.type === \"row\") {\n        rowSelection.setMultiple(cellSelection.rows.map(String));\n        return;\n      } else {\n        console.error(\"Unhandled cell selection update:\", cellSelection);\n      }\n    };\n\n    if (!id) return;\n\n    const element = document.getElementById(id);\n    if (!element) return;\n\n    element.addEventListener(\n      \"updateCellSelection\",\n      handleMessage as EventListener\n    );\n\n    return () => {\n      element.removeEventListener(\n        \"updateCellSelection\",\n        handleMessage as EventListener\n      );\n    };\n  }, [id, rowSelection, rowData]);\n\n  useEffect(() => {\n    if (!id) return;\n    const shinyId = `${id}_cell_selection`;\n    let shinyValue: BrowserCellSelection | null = null;\n    if (rowSelectionModes.is_none()) {\n      shinyValue = null;\n    } else if (rowSelectionModes.row !== SelectionModes._rowEnum.NONE) {\n      const rowSelectionKeys = rowSelection.keys().toList();\n      // Do not sent `none` or `all` to the server as it is hard to utilize when we know the selection is row based\n      // if (rowSelectionKeys.length === 0) {\n      //   shinyValue = { type: \"none\" };\n      // } else if (rowSelectionKeys.length === rowData.length) {\n      //   shinyValue = { type: \"all\" };\n      // } else {\n      shinyValue = {\n        type: \"row\",\n        rows: rowSelectionKeys.map((key) => parseInt(key)).sort(),\n      };\n    } else {\n      console.error(\"Unhandled row selection mode:\", rowSelectionModes);\n    }\n    Shiny.setInputValue!(shinyId, shinyValue);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id, rowSelectionModes, [...rowSelection.keys()]]);\n\n  // ### End row selection ############################################################\n\n  // ### Editable cells ###############################################################\n  // type TKey = DOMStringMap[string]: string\n  type TKey = typeof HTMLTableRowElement.prototype.dataset.key;\n  type TElement = HTMLTableRowElement;\n\n  if (editCellsIsAllowed && canSelect) {\n    // TODO-barret; maybe listen for a double click?\n    // Is is possible to rerender on double click independent of the row selection?\n    console.error(\n      \"Should not have editable and row selection at the same time\"\n    );\n  }\n\n  // ### End editable cells ###########################################################\n\n  //\n\n  //\n\n  //\n  const tbodyTabItems = React.useCallback(\n    () => tbodyRef.current!.querySelectorAll(\"[tabindex='-1']\"),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [tbodyRef.current]\n  );\n  const tbodyTabGroup = useTabindexGroup(containerRef.current, tbodyTabItems, {\n    top: theadRef.current?.clientHeight ?? 0,\n  });\n\n  // Reset sorting and selection whenever dataset changes. (Should we do this?)\n  // NOTE-2024-02-21-barret; Maybe only reset sorting if the column information changes?\n  useEffect(() => {\n    return () => {\n      table.resetSorting();\n      rowSelection.clear();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [payload]);\n\n  const headerRowCount = table.getHeaderGroups().length;\n\n  // Assume we're scrolling until proven otherwise\n  let scrollingClass = rowData.length > 0 ? \"scrolling\" : \"\";\n  const scrollHeight = containerRef.current?.scrollHeight;\n  const clientHeight = containerRef.current?.clientHeight;\n  if (scrollHeight && clientHeight && scrollHeight <= clientHeight) {\n    scrollingClass = \"\";\n  }\n\n  const makeHeaderKeyDown =\n    (column: Column<unknown[], unknown>) => (event: React.KeyboardEvent) => {\n      if (event.key === \" \" || event.key === \"Enter\") {\n        column.toggleSorting(undefined, event.shiftKey);\n      }\n    };\n\n  const measureEl = useVirtualizerMeasureWorkaround(rowVirtualizer);\n\n  let className = `shiny-data-grid ${containerClass} ${scrollingClass}`;\n  if (fill) {\n    className += \" html-fill-item\";\n  }\n\n  return (\n    <>\n      <div\n        className={className}\n        ref={containerRef}\n        style={{ width, height, overflow: \"auto\" }}\n      >\n        <table\n          className={tableClass + (withFilters ? \" filtering\" : \"\")}\n          aria-rowcount={dataState.length}\n          aria-multiselectable={canMultiRowSelect}\n          style={{\n            width: width === null || width === \"auto\" ? undefined : \"100%\",\n          }}\n        >\n          <thead ref={theadRef} style={{ backgroundColor: bgcolor }}>\n            {table.getHeaderGroups().map((headerGroup, i) => (\n              <tr key={headerGroup.id} aria-rowindex={i + 1}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <th\n                      key={header.id}\n                      colSpan={header.colSpan}\n                      style={{ width: header.getSize() }}\n                      scope=\"col\"\n                      tabIndex={0}\n                      onClick={header.column.getToggleSortingHandler()}\n                      onKeyDown={makeHeaderKeyDown(header.column)}\n                    >\n                      {header.isPlaceholder ? null : (\n                        <div\n                          style={{\n                            cursor: header.column.getCanSort()\n                              ? \"pointer\"\n                              : undefined,\n                            userSelect: header.column.getCanSort()\n                              ? \"none\"\n                              : undefined,\n                          }}\n                        >\n                          {flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                          <SortArrow direction={header.column.getIsSorted()} />\n                        </div>\n                      )}\n                    </th>\n                  );\n                })}\n              </tr>\n            ))}\n            {withFilters && (\n              <tr className=\"filters\">\n                {table.getFlatHeaders().map((header) => {\n                  return (\n                    <th key={`filter-${header.id}`}>\n                      <Filter header={header} />\n                    </th>\n                  );\n                })}\n              </tr>\n            )}\n          </thead>\n          <tbody\n            ref={tbodyRef}\n            tabIndex={tbodyTabGroup.containerTabIndex}\n            {...tbodyTabGroup.containerHandlers}\n          >\n            {paddingTop > 0 && <tr style={{ height: `${paddingTop}px` }}></tr>}\n            {virtualRows.map((virtualRow) => {\n              const row = table.getRowModel().rows[virtualRow.index];\n              return (\n                row && (\n                  <tr\n                    key={virtualRow.key}\n                    data-index={virtualRow.index}\n                    aria-rowindex={virtualRow.index + headerRowCount}\n                    data-key={row.id}\n                    ref={measureEl}\n                    aria-selected={rowSelection.has(row.id)}\n                    tabIndex={-1}\n                    {...rowSelection.itemHandlers()}\n                  >\n                    {row.getVisibleCells().map((cell) => {\n                      // TODO-barret; Only send in the cell data that is needed;\n                      const rowIndex = cell.row.index;\n                      const columnIndex = cell.column.columnDef.meta!.colIndex;\n                      const [cellEditInfo, _key] = getCellEditMapObj(\n                        cellEditMap,\n                        rowIndex,\n                        columnIndex\n                      );\n\n                      return (\n                        <TableBodyCell\n                          key={cell.id}\n                          rowId={cell.row.id}\n                          containerRef={containerRef}\n                          cell={cell}\n                          patchInfo={patchInfo}\n                          editCellsIsAllowed={editCellsIsAllowed}\n                          columns={columns}\n                          rowIndex={rowIndex}\n                          columnIndex={columnIndex}\n                          getSortedRowModel={table.getSortedRowModel}\n                          cellEditInfo={cellEditInfo}\n                          setData={setData}\n                          setCellEditMapAtLoc={setCellEditMapAtLoc}\n                        ></TableBodyCell>\n                      );\n                    })}\n                  </tr>\n                )\n              );\n            })}\n            {paddingBottom > 0 && (\n              <tr style={{ height: `${paddingBottom}px` }}></tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      {summary}\n    </>\n  );\n};\n\nfunction findKeysBetween<TData>(\n  rowModel: RowModel<TData>,\n  fromKey: string,\n  toKey: string\n): readonly string[] {\n  let fromIdx = rowModel.rows.findIndex((row) => row.id === fromKey);\n  let toIdx = rowModel.rows.findIndex((row) => row.id === toKey);\n  if (fromIdx < 0 || toIdx < 0) {\n    return [];\n  }\n  if (fromIdx > toIdx) {\n    // Swap order to simplify things\n    [fromIdx, toIdx] = [toIdx, fromIdx];\n  }\n  const keys = [];\n  for (let i = fromIdx; i <= toIdx; i++) {\n    keys.push(rowModel.rows[i].id);\n  }\n  return keys;\n}\n\n/**\n * Works around a problem where the ref={...} callback is called before the element to\n * be measured is attached to the DOM, which will result in the virtualizer using its\n * estimated size instead of the actual size. This hook will detect when elements that\n * are not yet attached to the DOM are measured, and will retry measuring them in the\n * useEffect.\n * @returns A callback that can be used as a ref for an element that needs to be measured.\n */\nfunction useVirtualizerMeasureWorkaround(\n  rowVirtualizer: Virtualizer<HTMLDivElement, Element>\n) {\n  // Tracks elements that need to be measured, but are not yet attached to the DOM\n  const measureTodoQueue = useRef<HTMLElement[]>([]);\n\n  // This is the callback that will be passed back to the caller, intended to be used as\n  // a ref for each virtual item's element.\n  const measureElementWithRetry = useCallback(\n    (el: Element | null) => {\n      if (!el) {\n        return;\n      }\n\n      if (el.isConnected) {\n        rowVirtualizer.measureElement(el);\n      } else {\n        measureTodoQueue.current.push(el as HTMLElement);\n      }\n    },\n    [rowVirtualizer]\n  );\n\n  // Once the DOM is updated, try to measure any elements that were not yet attached\n  useLayoutEffect(() => {\n    if (measureTodoQueue.current.length > 0) {\n      const todo = measureTodoQueue.current.splice(0);\n      // The next line can mutate measureTodoQueue.current, hence the need to splice out\n      // all the items to work on before actually calling measureElement on any of them.\n      todo.forEach(rowVirtualizer.measureElement);\n    }\n  });\n\n  return measureElementWithRetry;\n}\n\nclass ShinyDataFrameOutputBinding extends Shiny.OutputBinding {\n  find(scope: HTMLElement | JQuery<HTMLElement>): JQuery<HTMLElement> {\n    return $(scope).find(\"shiny-data-frame\");\n  }\n\n  renderValue(el: ShinyDataFrameOutput, data: unknown): void {\n    el.renderValue(data);\n  }\n\n  renderError(el: ShinyDataFrameOutput, err: ErrorsMessageValue): void {\n    el.classList.add(\"shiny-output-error\");\n    el.renderError(err);\n  }\n\n  clearError(el: ShinyDataFrameOutput): void {\n    el.classList.remove(\"shiny-output-error\");\n    el.clearError();\n  }\n}\nShiny.outputBindings.register(\n  new ShinyDataFrameOutputBinding(),\n  \"shinyDataFrame\"\n);\n\nfunction getComputedBgColor(el: HTMLElement | null): string | undefined {\n  if (!el) {\n    // Top of document, can't recurse further\n    return undefined;\n  }\n\n  const bgColor = getStyle(el, \"background-color\");\n\n  if (!bgColor) return bgColor;\n  const m = bgColor.match(\n    /^rgba\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*,\\s*([\\d.]+)\\s*\\)$/\n  );\n\n  if (bgColor === \"transparent\" || (m && parseFloat(m[4]) === 0)) {\n    // No background color on this element. See if it has a background image.\n    const bgImage = getStyle(el, \"background-image\");\n\n    if (bgImage && bgImage !== \"none\") {\n      // Failed to detect background color, since it has a background image\n      return undefined;\n    } else {\n      // Recurse\n      return getComputedBgColor(el.parentElement);\n    }\n  }\n  return bgColor;\n}\n\nconst cssTemplate = document.createElement(\"template\");\ncssTemplate.innerHTML = `<style>${css}</style>`;\n\nexport class ShinyDataFrameOutput extends HTMLElement {\n  reactRoot?: Root;\n  errorRoot: HTMLSpanElement;\n\n  connectedCallback() {\n    // Currently not using shadow DOM since Bootstrap's table styling is pretty nice and\n    // I don't have time to duplicate all that right now.\n    // this.attachShadow({ mode: \"open\" });\n    // const target = this.shadowRoot!;\n\n    const [target] = [this]; // brackets are to avoid linter\n\n    target.appendChild(cssTemplate.content.cloneNode(true));\n\n    // Need to put error messages in an inline element (<span>) instead of in the\n    // reactRoot div, because we want the error messages to appear on the same line as\n    // \"Error:\".\n    this.errorRoot = document.createElement(\"span\");\n    target.appendChild(this.errorRoot);\n\n    const myDiv = document.createElement(\"div\");\n    myDiv.classList.add(\"html-fill-container\", \"html-fill-item\");\n    target.appendChild(myDiv);\n\n    this.reactRoot = createRoot(myDiv);\n\n    // If there is a <script class=\"data\"> element it contains static data.\n    // Render it now.\n    const dataEl = this.querySelector(\n      \"script.data\"\n    ) as HTMLScriptElement | null;\n    if (dataEl) {\n      const data = JSON.parse(dataEl.innerText);\n      this.renderValue(data);\n    }\n  }\n\n  renderValue(value: ShinyDataGridServerInfo<unknown> | null) {\n    this.clearError();\n\n    if (!value) {\n      this.reactRoot!.render(null);\n      return;\n    }\n\n    this.reactRoot!.render(\n      <StrictMode>\n        <ShinyDataGrid\n          id={this.id}\n          gridInfo={value}\n          bgcolor={getComputedBgColor(this)}\n        ></ShinyDataGrid>\n      </StrictMode>\n    );\n  }\n\n  renderError(err: ErrorsMessageValue) {\n    this.reactRoot!.render(null);\n    this.errorRoot.innerText = err.message;\n  }\n\n  clearError() {\n    this.reactRoot!.render(null);\n    this.errorRoot.innerText = \"\";\n  }\n}\n\ncustomElements.define(\"shiny-data-frame\", ShinyDataFrameOutput);\n\n// This is the shim between Shiny's messaging passing behaviour and React.\n// The python code sends a custom message which includes an id, handler\n// and obbject and we use that information to dispatch it to the\n// react listener.\n// It would be better to have something similar to session.send_input_message\n// for updating outputs, but that requires changes to ShinyJS.\n$(function () {\n  Shiny.addCustomMessageHandler(\"shinyDataFrameMessage\", function (message) {\n    const evt = new CustomEvent(message.handler, {\n      detail: message.obj,\n    });\n    const el = document.getElementById(message.id);\n    el?.dispatchEvent(evt);\n  });\n});\n"],
  "mappings": "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",
  "names": ["slice", "options", "vnodeId", "isValidElement", "rerenderQueue", "prevDebounce", "defer", "depthSort", "i", "EMPTY_OBJ", "EMPTY_ARR", "IS_NON_DIMENSIONAL", "isArray", "Array", "assign", "obj", "props", "removeNode", "node", "parentNode", "removeChild", "createElement", "type", "children", "key", "ref", "normalizedProps", "arguments", "length", "call", "defaultProps", "createVNode", "original", "vnode", "__k", "__", "__b", "__e", "__d", "__c", "__h", "constructor", "__v", "createRef", "current", "Fragment", "Component", "context", "this", "getDomSibling", "childIndex", "indexOf", "sibling", "updateParentDomPointers", "child", "base", "enqueueRender", "c", "push", "process", "__r", "debounceRendering", "renderQueueLength", "component", "commitQueue", "oldVNode", "oldDom", "parentDom", "sort", "shift", "__P", "diff", "__n", "ownerSVGElement", "commitRoot", "diffChildren", "renderResult", "newParentVNode", "oldParentVNode", "globalContext", "isSvg", "excessDomChildren", "isHydrating", "j", "childVNode", "newDom", "firstChildDom", "refs", "oldChildren", "oldChildrenLength", "reorderChildren", "placeChild", "getLastDom", "nextSibling", "unmount", "applyRef", "tmp", "toChildArray", "out", "some", "nextDom", "sibDom", "outer", "appendChild", "insertBefore", "lastDom", "diffProps", "dom", "newProps", "oldProps", "hydrate", "setProperty", "setStyle", "style", "value", "test", "name", "oldValue", "useCapture", "o", "cssText", "replace", "toLowerCase", "l", "addEventListener", "eventProxyCapture", "eventProxy", "removeEventListener", "e", "removeAttribute", "setAttribute", "event", "newVNode", "isNew", "oldState", "snapshot", "clearProcessingException", "provider", "componentContext", "renderHook", "count", "newType", "contextType", "__E", "prototype", "render", "doRender", "sub", "state", "_sb", "__s", "getDerivedStateFromProps", "componentWillMount", "componentDidMount", "componentWillReceiveProps", "shouldComponentUpdate", "forEach", "componentWillUpdate", "componentDidUpdate", "getChildContext", "getSnapshotBeforeUpdate", "diffElementNodes", "diffed", "root", "cb", "oldHtml", "newHtml", "nodeType", "localName", "document", "createTextNode", "createElementNS", "is", "data", "childNodes", "dangerouslySetInnerHTML", "attributes", "__html", "innerHTML", "checked", "parentVNode", "skipRemove", "r", "componentWillUnmount", "replaceNode", "firstChild", "cloneElement", "createContext", "defaultValue", "contextId", "Consumer", "contextValue", "Provider", "subs", "ctx", "_props", "old", "splice", "error", "errorInfo", "ctor", "handled", "getDerivedStateFromError", "setState", "componentDidCatch", "update", "callback", "s", "forceUpdate", "Promise", "then", "bind", "resolve", "setTimeout", "a", "b", "currentIndex", "currentComponent", "previousComponent", "prevRaf", "currentHook", "afterPaintEffects", "EMPTY", "oldBeforeDiff", "options", "__b", "oldBeforeRender", "__r", "oldAfterDiff", "diffed", "oldCommit", "__c", "oldBeforeUnmount", "unmount", "getHookState", "index", "type", "__h", "hooks", "__H", "__", "length", "push", "__V", "useState", "initialState", "useReducer", "invokeOrReturn", "reducer", "init", "hookState", "_reducer", "action", "currentValue", "__N", "nextValue", "setState", "_hasScuFromHooks", "updateHookState", "p", "s", "c", "stateHooks", "filter", "x", "every", "prevScu", "call", "this", "shouldUpdate", "forEach", "hookItem", "props", "shouldComponentUpdate", "prevCWU", "componentWillUpdate", "__e", "tmp", "useEffect", "callback", "args", "state", "__s", "argsChanged", "_pendingArgs", "useLayoutEffect", "useRef", "initialValue", "useMemo", "current", "useImperativeHandle", "ref", "createHandle", "concat", "factory", "useCallback", "useContext", "context", "provider", "sub", "value", "useDebugValue", "formatter", "useId", "state", "getHookState", "currentIndex", "__", "root", "currentComponent", "__v", "__m", "mask", "flushAfterPaintEffects", "component", "afterPaintEffects", "shift", "__P", "__H", "__h", "forEach", "invokeCleanup", "invokeEffect", "e", "options", "__e", "__b", "vnode", "oldBeforeDiff", "__r", "oldBeforeRender", "hooks", "__c", "previousComponent", "hookItem", "__N", "EMPTY", "_pendingArgs", "diffed", "oldAfterDiff", "c", "length", "push", "prevRaf", "requestAnimationFrame", "afterNextFrame", "__V", "commitQueue", "some", "filter", "cb", "oldCommit", "unmount", "oldBeforeUnmount", "hasErrored", "s", "HAS_RAF", "callback", "raf", "done", "clearTimeout", "timeout", "cancelAnimationFrame", "setTimeout", "hook", "comp", "cleanup", "argsChanged", "oldArgs", "newArgs", "arg", "index", "invokeOrReturn", "f", "assign", "obj", "props", "i", "shallowDiffers", "a", "b", "is", "x", "y", "PureComponent", "p", "this", "memo", "c", "comparer", "shouldUpdate", "nextProps", "ref", "updateRef", "call", "current", "Memoed", "shouldComponentUpdate", "createElement", "displayName", "name", "prototype", "isReactComponent", "Component", "isPureReactComponent", "state", "oldDiffHook", "options", "__b", "vnode", "type", "__f", "REACT_FORWARD_SYMBOL", "Symbol", "for", "forwardRef", "fn", "Forwarded", "clone", "$$typeof", "render", "mapFn", "children", "toChildArray", "map", "Children", "forEach", "count", "length", "only", "normalized", "toArray", "oldCatchError", "__e", "error", "newVNode", "oldVNode", "errorInfo", "then", "component", "__c", "__k", "oldUnmount", "unmount", "detachedClone", "detachedParent", "parentDom", "effect", "__H", "__P", "child", "removeOriginal", "originalParent", "__v", "insertBefore", "__d", "Suspense", "__u", "_suspenders", "suspended", "__", "__a", "lazy", "loader", "prom", "Lazy", "exports", "default", "e", "SuspenseList", "_next", "_map", "__R", "__h", "promise", "suspendingVNode", "suspendingComponent", "push", "resolve", "resolved", "onResolved", "onSuspensionComplete", "suspendedVNode", "setState", "pop", "forceUpdate", "wasHydrating", "componentWillUnmount", "document", "detachedComponent", "__O", "fallback", "Fragment", "list", "node", "delete", "revealOrder", "size", "ContextProvider", "getChildContext", "context", "Portal", "_this", "container", "_container", "_temp", "nodeType", "parentNode", "childNodes", "appendChild", "before", "removeChild", "splice", "indexOf", "createPortal", "el", "containerInfo", "delegated", "get", "unsuspend", "wrappedUnsuspend", "Map", "reverse", "set", "componentDidUpdate", "componentDidMount", "REACT_ELEMENT_TYPE", "CAMEL_PROPS", "ON_ANI", "CAMEL_REPLACE", "IS_DOM", "onChangeInputType", "test", "parent", "callback", "textContent", "preactRender", "hydrate", "preactHydrate", "key", "Object", "defineProperty", "configurable", "v", "writable", "value", "oldEventHook", "event", "empty", "isPropagationStopped", "cancelBubble", "isDefaultPrevented", "defaultPrevented", "persist", "nativeEvent", "currentComponent", "classNameDescriptorNonEnumberable", "enumerable", "class", "oldVNodeHook", "normalizedProps", "lowerCased", "toLowerCase", "replace", "multiple", "Array", "isArray", "selected", "defaultValue", "className", "oldBeforeRender", "__r", "oldDiffed", "diffed", "dom", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "ReactCurrentDispatcher", "readContext", "__n", "createFactory", "type", "createElement", "bind", "isValidElement", "element", "$$typeof", "REACT_ELEMENT_TYPE", "cloneElement", "preactCloneElement", "apply", "arguments", "unmountComponentAtNode", "container", "__k", "preactRender", "findDOMNode", "component", "base", "nodeType", "unstable_batchedUpdates", "callback", "arg", "flushSync", "StrictMode", "Fragment", "startTransition", "cb", "useDeferredValue", "val", "useTransition", "useInsertionEffect", "useLayoutEffect", "useSyncExternalStore", "subscribe", "getSnapshot", "value", "_useState", "useState", "_instance", "__", "_getSnapshot", "forceUpdate", "is", "useEffect", "index", "useId", "useReducer", "useRef", "useImperativeHandle", "useMemo", "useCallback", "useContext", "useDebugValue", "version", "Children", "render", "hydrate", "createPortal", "createContext", "createRef", "Component", "PureComponent", "memo", "forwardRef", "Suspense", "SuspenseList", "lazy", "__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED", "functionalUpdate", "updater", "input", "makeStateUpdater", "key", "instance", "updater", "setState", "old", "functionalUpdate", "isFunction", "d", "Function", "isNumberArray", "Array", "isArray", "every", "val", "flattenBy", "arr", "getChildren", "flat", "recurse", "subArr", "forEach", "item", "push", "children", "length", "memo", "getDeps", "fn", "opts", "deps", "result", "depTime", "debug", "Date", "now", "newDeps", "depsChanged", "some", "dep", "index", "resultTime", "onChange", "depEndTime", "Math", "round", "resultEndTime", "resultFpsPercentage", "pad", "str", "num", "String", "console", "info", "max", "min", "createColumn", "table", "columnDef", "depth", "parent", "_ref", "_resolvedColumnDef$id", "defaultColumn", "_getDefaultColumnDef", "resolvedColumnDef", "accessorKey", "id", "replace", "undefined", "header", "accessorFn", "includes", "originalRow", "split", "_result", "warn", "process", "Error", "column", "columns", "getFlatColumns", "_column$columns", "flatMap", "_table$options$debugA", "options", "debugAll", "debugColumns", "getLeafColumns", "_getOrderColumnsFn", "orderColumns", "_column$columns2", "leafColumns", "_table$options$debugA2", "_features", "reduce", "obj", "feature", "Object", "assign", "createHeader", "_options$id", "isPlaceholder", "placeholderId", "subHeaders", "colSpan", "rowSpan", "headerGroup", "getLeafHeaders", "leafHeaders", "recurseHeader", "h", "map", "getContext", "Headers", "createTable", "getHeaderGroups", "getAllColumns", "getVisibleLeafColumns", "getState", "columnPinning", "left", "right", "allColumns", "_left$map$filter", "_right$map$filter", "leftColumns", "columnId", "find", "filter", "Boolean", "rightColumns", "centerColumns", "headerGroups", "buildHeaderGroups", "debugHeaders", "getCenterHeaderGroups", "getLeftHeaderGroups", "_left$map$filter2", "orderedLeafColumns", "_table$options$debugA3", "getRightHeaderGroups", "_right$map$filter2", "_table$options$debugA4", "getFooterGroups", "reverse", "_table$options$debugA5", "getLeftFooterGroups", "_table$options$debugA6", "getCenterFooterGroups", "_table$options$debugA7", "getRightFooterGroups", "_table$options$debugA8", "getFlatHeaders", "headers", "_table$options$debugA9", "getLeftFlatHeaders", "_table$options$debugA10", "getCenterFlatHeaders", "_table$options$debugA11", "getRightFlatHeaders", "_table$options$debugA12", "getCenterLeafHeaders", "flatHeaders", "_header$subHeaders", "_table$options$debugA13", "getLeftLeafHeaders", "_header$subHeaders2", "_table$options$debugA14", "getRightLeafHeaders", "_header$subHeaders3", "_table$options$debugA15", "center", "_left$0$headers", "_left$", "_center$0$headers", "_center$", "_right$0$headers", "_right$", "_table$options$debugA16", "columnsToGroup", "headerFamily", "_headerGroups$0$heade", "_headerGroups$", "maxDepth", "findMaxDepth", "getIsVisible", "createHeaderGroup", "headersToGroup", "join", "pendingParentHeaders", "headerToGroup", "latestPendingParentHeader", "isLeafHeader", "bottomHeaders", "recurseHeadersForSpans", "filteredHeaders", "childRowSpans", "childColSpan", "childRowSpan", "minChildRowSpan", "defaultColumnSizing", "size", "minSize", "maxSize", "Number", "MAX_SAFE_INTEGER", "getDefaultColumnSizingInfoState", "startOffset", "startSize", "deltaOffset", "deltaPercentage", "isResizingColumn", "columnSizingStart", "ColumnSizing", "getDefaultColumnDef", "getInitialState", "state", "columnSizing", "columnSizingInfo", "getDefaultOptions", "columnResizeMode", "onColumnSizingChange", "onColumnSizingInfoChange", "getSize", "_column$columnDef$min", "_column$columnDef$max", "columnSize", "getStart", "position", "getLeftVisibleLeafColumns", "getRightVisibleLeafColumns", "findIndex", "prevSiblingColumn", "resetSize", "setColumnSizing", "_ref2", "_", "rest", "getCanResize", "_column$columnDef$ena", "_table$options$enable", "enableResizing", "enableColumnResizing", "getIsResizing", "sum", "_header$column$getSiz", "prevSiblingHeader", "getResizeHandler", "getColumn", "canResize", "e", "persist", "isTouchStartEvent", "touches", "clientX", "newColumnSizing", "updateOffset", "eventType", "clientXPos", "setColumnSizingInfo", "_old$startOffset", "_old$startSize", "_ref3", "headerSize", "onMove", "onEnd", "mouseEvents", "moveHandler", "upHandler", "document", "removeEventListener", "touchEvents", "cancelable", "preventDefault", "stopPropagation", "_e$touches$", "passiveIfSupported", "passiveEventSupported", "passive", "addEventListener", "resetColumnSizing", "defaultState", "_table$initialState$c", "initialState", "resetHeaderSizeInfo", "_table$initialState$c2", "getTotalSize", "_table$getHeaderGroup", "_table$getHeaderGroup2", "getLeftTotalSize", "_table$getLeftHeaderG", "_table$getLeftHeaderG2", "getCenterTotalSize", "_table$getCenterHeade", "_table$getCenterHeade2", "getRightTotalSize", "_table$getRightHeader", "_table$getRightHeader2", "passiveSupported", "supported", "noop", "window", "err", "type", "Expanding", "expanded", "onExpandedChange", "paginateExpandedRows", "registered", "queued", "_autoResetExpanded", "_table$options$autoRe", "_queue", "autoResetAll", "autoResetExpanded", "manualExpanding", "resetExpanded", "setExpanded", "toggleAllRowsExpanded", "getIsAllRowsExpanded", "_table$initialState$e", "_table$initialState", "getCanSomeRowsExpand", "getPrePaginationRowModel", "flatRows", "row", "getCanExpand", "getToggleAllRowsExpandedHandler", "getIsSomeRowsExpanded", "values", "keys", "getRowModel", "getIsExpanded", "getExpandedDepth", "rowIds", "rowsById", "splitId", "getPreExpandedRowModel", "getSortedRowModel", "getExpandedRowModel", "_getExpandedRowModel", "createRow", "toggleExpanded", "_expanded", "exists", "oldExpanded", "rowId", "_table$options$getIsR", "getIsRowExpanded", "_table$options$getRow", "_row$subRows", "getRowCanExpand", "enableExpanding", "subRows", "getToggleExpandedHandler", "canExpand", "includesString", "filterValue", "_row$getValue", "_row$getValue$toStrin", "_row$getValue$toStrin2", "search", "toLowerCase", "getValue", "toString", "autoRemove", "testFalsey", "includesStringSensitive", "_row$getValue2", "_row$getValue2$toStri", "equalsString", "_row$getValue3", "_row$getValue3$toStri", "arrIncludes", "_row$getValue4", "arrIncludesAll", "_row$getValue5", "arrIncludesSome", "_row$getValue6", "equals", "weakEquals", "inNumberRange", "rowValue", "resolveFilterValue", "unsafeMin", "unsafeMax", "parsedMin", "parseFloat", "parsedMax", "isNaN", "Infinity", "temp", "filterFns", "Filters", "filterFn", "columnFilters", "globalFilter", "onColumnFiltersChange", "onGlobalFilterChange", "filterFromLeafRows", "maxLeafRowFilterDepth", "globalFilterFn", "getColumnCanGlobalFilter", "_table$getCoreRowMode", "_table$getCoreRowMode2", "value", "getCoreRowModel", "_getAllCellsByColumnId", "getAutoFilterFn", "firstRow", "getFilterFn", "_table$options$filter", "_table$options$filter2", "getCanFilter", "_table$options$enable2", "enableColumnFilter", "enableColumnFilters", "enableFilters", "getCanGlobalFilter", "_column$columnDef$ena2", "_table$options$enable3", "_table$options$enable4", "_table$options$getCol", "enableGlobalFilter", "getIsFiltered", "getFilterIndex", "getFilterValue", "_table$getState$colum", "_table$getState$colum2", "_table$getState$colum3", "_table$getState$colum4", "setFilterValue", "setColumnFilters", "previousfilter", "newFilter", "shouldAutoRemoveFilter", "_old$filter", "newFilterObj", "_old$map", "_getFacetedRowModel", "getFacetedRowModel", "getPreFilteredRowModel", "_getFacetedUniqueValues", "getFacetedUniqueValues", "Map", "_getFacetedMinMaxValues", "getFacetedMinMaxValues", "columnFiltersMeta", "getGlobalAutoFilterFn", "getGlobalFilterFn", "_table$options$filter3", "_table$options$filter4", "getAllLeafColumns", "updateFn", "_functionalUpdate", "setGlobalFilter", "resetGlobalFilter", "resetColumnFilters", "getFilteredRowModel", "_getFilteredRowModel", "manualFiltering", "_getGlobalFacetedRowModel", "getGlobalFacetedRowModel", "_getGlobalFacetedUniqueValues", "getGlobalFacetedUniqueValues", "_getGlobalFacetedMinMaxValues", "getGlobalFacetedMinMaxValues", "_leafRows", "childRows", "next", "nextValue", "extent", "mean", "leafRows", "count", "median", "mid", "floor", "nums", "sort", "a", "b", "unique", "from", "Set", "uniqueCount", "_columnId", "aggregationFns", "Grouping", "aggregatedCell", "props", "_toString", "_props$getValue", "aggregationFn", "grouping", "onGroupingChange", "groupedColumnMode", "toggleGrouping", "setGrouping", "getCanGroup", "enableGrouping", "getIsGrouped", "_table$getState$group", "getGroupedIndex", "_table$getState$group2", "indexOf", "getToggleGroupingHandler", "canGroup", "getAutoAggregationFn", "prototype", "call", "getAggregationFn", "_table$options$aggreg", "_table$options$aggreg2", "resetGrouping", "_table$initialState$g", "getPreGroupedRowModel", "getGroupedRowModel", "_getGroupedRowModel", "manualGrouping", "groupingColumnId", "getGroupingValue", "_groupingValuesCache", "hasOwnProperty", "original", "createCell", "cell", "getIsPlaceholder", "getIsAggregated", "nonGroupingColumns", "col", "groupingColumns", "g", "Ordering", "columnOrder", "onColumnOrderChange", "setColumnOrder", "resetColumnOrder", "orderedColumns", "columnOrderCopy", "columnsCopy", "targetColumnId", "shift", "foundIndex", "splice", "defaultPageIndex", "defaultPageSize", "getDefaultPaginationState", "pageIndex", "pageSize", "Pagination", "pagination", "onPaginationChange", "_autoResetPageIndex", "autoResetPageIndex", "manualPagination", "resetPageIndex", "setPagination", "safeUpdater", "newState", "resetPagination", "_table$initialState$p", "setPageIndex", "maxPageIndex", "pageCount", "_table$initialState$p2", "_table$initialState$p3", "resetPageSize", "_table$initialState$p4", "_table$initialState2", "_table$initialState2$", "setPageSize", "topRowIndex", "setPageCount", "_table$options$pageCo", "newPageCount", "getPageOptions", "getPageCount", "pageOptions", "fill", "i", "debugTable", "getCanPreviousPage", "getCanNextPage", "previousPage", "nextPage", "getPaginationRowModel", "_getPaginationRowModel", "_table$options$pageCo2", "ceil", "rows", "getDefaultPinningState", "Pinning", "onColumnPinningChange", "pin", "columnIds", "setColumnPinning", "_old$left3", "_old$right3", "_old$left", "_old$right", "_old$left2", "_old$right2", "getCanPin", "_d$columnDef$enablePi", "enablePinning", "getIsPinned", "leafColumnIds", "isLeft", "isRight", "getPinnedIndex", "getCenterVisibleCells", "_getAllVisibleCells", "allCells", "leftAndRight", "debugRows", "getLeftVisibleCells", "cells", "getRightVisibleCells", "resetColumnPinning", "getIsSomeColumnsPinned", "_pinningState$positio", "pinningState", "_pinningState$left", "_pinningState$right", "getLeftLeafColumns", "getRightLeafColumns", "getCenterLeafColumns", "RowSelection", "rowSelection", "onRowSelectionChange", "enableRowSelection", "enableMultiRowSelection", "enableSubRowSelection", "setRowSelection", "resetRowSelection", "_table$initialState$r", "toggleAllRowsSelected", "getIsAllRowsSelected", "preGroupedFlatRows", "getCanSelect", "toggleAllPageRowsSelected", "resolvedValue", "getIsAllPageRowsSelected", "mutateRowIsSelected", "getPreSelectedRowModel", "getSelectedRowModel", "rowModel", "selectRowsFn", "getFilteredSelectedRowModel", "getGroupedSelectedRowModel", "isAllRowsSelected", "paginationFlatRows", "isAllPageRowsSelected", "getIsSomeRowsSelected", "_table$getState$rowSe", "totalSelected", "getIsSomePageRowsSelected", "getIsSelected", "getIsSomeSelected", "getToggleAllRowsSelectedHandler", "target", "checked", "getToggleAllPageRowsSelectedHandler", "toggleSelected", "isSelected", "selectedRowIds", "isRowSelected", "isSubRowSelected", "getIsAllSubRowsSelected", "getCanSelectSubRows", "getCanMultiSelect", "getToggleSelectedHandler", "canSelect", "_target", "getRow", "newSelectedFlatRows", "newSelectedRowsById", "recurseRows", "_row$subRows2", "selection", "_selection$row$id", "allChildrenSelected", "someSelected", "subRow", "reSplitAlphaNumeric", "alphanumeric", "rowA", "rowB", "compareAlphanumeric", "alphanumericCaseSensitive", "text", "compareBasic", "textCaseSensitive", "datetime", "basic", "aStr", "bStr", "aa", "bb", "an", "parseInt", "bn", "combo", "sortingFns", "Sorting", "sorting", "sortingFn", "sortUndefined", "onSortingChange", "isMultiSortEvent", "shiftKey", "getAutoSortingFn", "firstRows", "slice", "isString", "getAutoSortDir", "getSortingFn", "_table$options$sortin", "_table$options$sortin2", "toggleSorting", "desc", "multi", "nextSortingOrder", "getNextSortingOrder", "hasManualValue", "setSorting", "existingSorting", "existingIndex", "newSorting", "sortAction", "nextDesc", "getCanMultiSort", "_table$options$maxMul", "maxMultiSortColCount", "getFirstSortDir", "_column$columnDef$sor", "sortDescFirst", "firstSortDirection", "isSorted", "getIsSorted", "enableSortingRemoval", "enableMultiRemove", "getCanSort", "enableSorting", "enableMultiSort", "_table$getState$sorti", "columnSort", "getSortIndex", "_table$getState$sorti2", "_table$getState$sorti3", "clearSorting", "getToggleSortingHandler", "canSort", "resetSorting", "_table$initialState$s", "getPreSortedRowModel", "_getSortedRowModel", "manualSorting", "Visibility", "columnVisibility", "onColumnVisibilityChange", "toggleVisibility", "getCanHide", "setColumnVisibility", "enableHiding", "getToggleVisibilityHandler", "getAllCells", "getVisibleCells", "makeVisibleColumnsMethod", "getColumns", "getVisibleFlatColumns", "getAllFlatColumns", "getCenterVisibleLeafColumns", "resetColumnVisibility", "toggleAllColumnsVisible", "_value", "getIsAllColumnsVisible", "getIsSomeColumnsVisible", "getToggleAllColumnsVisibilityHandler", "features", "_options$initialState", "defaultOptions", "mergeOptions", "coreInitialState", "_feature$getInitialSt", "queuedTimeout", "coreInstance", "cb", "Promise", "resolve", "then", "catch", "error", "setTimeout", "reset", "setOptions", "newOptions", "onStateChange", "_getRowId", "getRowId", "_getCoreRowModel", "_defaultColumn", "_props$renderValue$to", "_props$renderValue", "renderValue", "_getColumnDefs", "columnDefs", "recurseColumns", "groupingColumnDef", "_getAllFlatColumnsById", "flatColumns", "acc", "getRenderValue", "_cell$getValue", "renderFallbackValue", "rowIndex", "parentId", "_valuesCache", "_uniqueValuesCache", "getUniqueValues", "getLeafRows", "getParentRow", "getParentRows", "parentRows", "currentRow", "parentRow", "getCoreRowModel", "table", "memo", "options", "data", "rowModel", "rows", "flatRows", "rowsById", "accessRows", "originalRows", "depth", "parentRow", "i", "length", "row", "createRow", "_getRowId", "undefined", "id", "push", "getSubRows", "_row$originalSubRows", "originalSubRows", "subRows", "key", "debug", "_table$options$debugA", "debugAll", "debugTable", "onChange", "_autoResetPageIndex", "filterRows", "filterRowImpl", "filterFromLeafRows", "filterRowModelFromLeafs", "filterRowModelFromRoot", "rowsToFilter", "filterRow", "_table$options$maxLea", "newFilteredFlatRows", "newFilteredRowsById", "maxDepth", "maxLeafRowFilterDepth", "recurseFilterRows", "_row$subRows", "newRow", "original", "index", "parentId", "columnFilters", "_table$options$maxLea2", "pass", "_row$subRows2", "getFilteredRowModel", "getPreFilteredRowModel", "getState", "globalFilter", "columnFiltersMeta", "resolvedColumnFilters", "resolvedGlobalFilters", "forEach", "d", "_filterFn$resolveFilt", "column", "getColumn", "filterFn", "getFilterFn", "process", "console", "warn", "resolvedValue", "resolveFilterValue", "value", "filterableIds", "map", "globalFilterFn", "getGlobalFilterFn", "globallyFilterableColumns", "getAllLeafColumns", "filter", "getCanGlobalFilter", "_globalFilterFn$resol", "currentColumnFilter", "currentGlobalFilter", "j", "filterMeta", "__global__", "filterRowsImpl", "getFacetedRowModel", "columnId", "preRowModel", "Boolean", "getFacetedUniqueValues", "_table$getColumn", "facetedRowModel", "Map", "facetedUniqueValues", "values", "getUniqueValues", "has", "_facetedUniqueValues$", "set", "get", "getFacetedMinMaxValues", "_facetedRowModel$flat", "firstValue", "facetedMinMaxValues", "getSortedRowModel", "sorting", "getPreSortedRowModel", "sortingState", "sortedFlatRows", "availableSorting", "sort", "getCanSort", "columnInfoById", "sortEntry", "sortUndefined", "columnDef", "invertSorting", "sortingFn", "getSortingFn", "sortData", "sortedData", "rowA", "rowB", "_sortEntry$desc", "columnInfo", "isDesc", "desc", "sortInt", "aValue", "getValue", "bValue", "aUndefined", "bUndefined", "flexRender", "Comp", "props", "isReactComponent", "React", "createElement", "component", "isClassComponent", "isExoticComponent", "proto", "Object", "getPrototypeOf", "prototype", "$$typeof", "includes", "description", "useReactTable", "options", "resolvedOptions", "state", "onStateChange", "renderFallbackValue", "tableRef", "useState", "current", "createTable", "setState", "initialState", "setOptions", "prev", "updater", "i", "_extends", "i", "memo", "getDeps", "fn", "opts", "deps", "initialDeps", "result", "depTime", "key", "debug", "Date", "now", "newDeps", "depsChanged", "length", "some", "dep", "index", "resultTime", "depEndTime", "Math", "round", "resultEndTime", "resultFpsPercentage", "pad", "str", "num", "String", "console", "info", "max", "min", "onChange", "notUndefined", "value", "msg", "undefined", "Error", "approxEqual", "a", "b", "abs", "defaultKeyExtractor", "index", "defaultRangeExtractor", "range", "start", "Math", "max", "startIndex", "overscan", "end", "min", "endIndex", "count", "arr", "i", "push", "observeElementRect", "instance", "cb", "element", "scrollElement", "handler", "rect", "width", "height", "round", "getBoundingClientRect", "observer", "ResizeObserver", "entries", "entry", "borderBoxSize", "box", "inlineSize", "blockSize", "observe", "unobserve", "observeElementOffset", "instance", "cb", "element", "scrollElement", "handler", "options", "horizontal", "addEventListener", "passive", "removeEventListener", "measureElement", "element", "entry", "instance", "borderBoxSize", "box", "size", "Math", "round", "options", "horizontal", "getBoundingClientRect", "elementScroll", "offset", "instance", "adjustments", "behavior", "toOffset", "scrollElement", "scrollTo", "options", "horizontal", "Virtualizer", "opts", "unsubs", "isScrolling", "isScrollingTimeoutId", "scrollToIndexTimeoutId", "measurementsCache", "itemSizeCache", "Map", "pendingMeasuredCacheIndexes", "scrollDirection", "scrollAdjustments", "measureElementCache", "observer", "_ro", "get", "ResizeObserver", "entries", "forEach", "entry", "_measureElement", "target", "disconnect", "observe", "box", "unobserve", "range", "startIndex", "endIndex", "setOptions", "Object", "key", "value", "_extends", "debug", "initialOffset", "overscan", "paddingStart", "paddingEnd", "scrollPaddingStart", "scrollPaddingEnd", "getItemKey", "defaultKeyExtractor", "rangeExtractor", "defaultRangeExtractor", "onChange", "measureElement", "initialRect", "width", "height", "scrollMargin", "scrollingDelay", "indexAttribute", "initialMeasurementsCache", "lanes", "notify", "cleanup", "filter", "Boolean", "d", "_didMount", "_willUpdate", "getScrollElement", "_scrollToOffset", "scrollOffset", "undefined", "push", "observeElementRect", "rect", "prev", "scrollRect", "maybeNotify", "observeElementOffset", "clearTimeout", "setTimeout", "getSize", "memoOptions", "memo", "count", "getFurthestMeasurement", "measurements", "index", "furthestMeasurementsFound", "furthestMeasurements", "m", "measurement", "has", "lane", "previousFurthestMeasurement", "end", "set", "size", "Array", "from", "values", "sort", "a", "b", "getMeasurements", "min", "length", "Math", "slice", "i", "furthestMeasurement", "start", "measuredSize", "estimateSize", "calculateRange", "outerSize", "initialDeps", "getIndexes", "indexFromElement", "node", "attributeName", "indexStr", "getAttribute", "console", "warn", "parseInt", "item", "prevNode", "isConnected", "measuredItemSize", "itemSize", "delta", "info", "getVirtualItems", "indexes", "virtualItems", "k", "len", "getVirtualItemForOffset", "notUndefined", "findNearestBinarySearch", "getOffsetForAlignment", "align", "scrollSizeProp", "scrollSize", "document", "documentElement", "maxOffset", "max", "getOffsetForIndex", "isDynamicMode", "cancelScrollToIndex", "scrollToOffset", "scrollToIndex", "initialAlign", "elementInDOM", "approxEqual", "scrollBy", "getTotalSize", "scrollToFn", "measure", "low", "high", "getCurrentValue", "middle", "currentValue", "getOffset", "useIsomorphicLayoutEffect", "document", "useLayoutEffect", "useEffect", "useVirtualizerBase", "options", "rerender", "useReducer", "resolvedOptions", "onChange", "instance", "React", "useState", "Virtualizer", "setOptions", "_didMount", "_willUpdate", "useVirtualizer", "observeElementRect", "observeElementOffset", "scrollToFn", "elementScroll", "G", "e", "t", "x", "y", "i", "immer", "isSet", "current", "fn", "Immer", "base", "p", "r", "Immer", "useImmer", "initialValue", "useState", "freeze", "updateValue", "u", "useCallback", "updater", "produce", "x", "getSortedRowModel", "T", "_", "e", "fn", "p", "i", "x", "i", "y", "x", "h", "x", "min", "max", "_", "e", "from", "to", "e", "set", "h", "x", "h", "F", "i", "_", "F", "i", "y", "p", "T", "m"]
}
