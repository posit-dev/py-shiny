# Card

Cards are a common organizing unit for modern user interfaces (UI). At their core, they're just rectangular containers with borders and padding. However, when utilized properly to group related information, they help users better digest, engage, and navigate through content.

# experimental.ui.card_body { #shiny.experimental.ui.card_body }

`experimental.ui.card_body(*args, fillable=True, min_height=None, max_height=None, max_height_full_screen=MISSING, height=None, padding=None, gap=None, fill=True, class_=None, **kwargs)`

Card body container

A general container for the &quot;main content&quot; of a [](:func:`~shiny.ui.card`). This component is designed
to be provided as direct children to [](:func:`~shiny.ui.card`).

## Parameters

<code><span class="parameter-name">*args</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">()</span></code>

:   Contents to the card's body. Or tag attributes that are supplied to the
    resolved [](:class:`~htmltools.Tag`) object.

<code><span class="parameter-name">fillable</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether or not the card item should be a fillable (i.e. flexbox) container.

<code><span class="parameter-name">min_height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css._css_unit.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS length unit. If `max_height_full_screen` is missing, it is set to
    `max_height`.

<code><span class="parameter-name">height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css._css_unit.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit (e.g., `height="200px"`). Doesn't apply when a card is made
    `full_screen` (in this case, consider setting a `height` in
    [](:func:`~shiny.ui.card_body`)).

<code><span class="parameter-name">padding</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css._css_unit.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.ui.css._css_unit.CssUnit`)\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Padding to use for the body. This can be a numeric vector
    (which will be interpreted as pixels) or a character vector with valid CSS
    lengths. The length can be between one and four. If one, then that value
    will be used for all four sides. If two, then the first value will be used
    for the top and bottom, while the second value will be used for left and
    right. If three, then the first will be used for top, the second will be
    left and right, and the third will be bottom. If four, then the values will
    be interpreted as top, right, bottom, and left respectively.

<code><span class="parameter-name">gap</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css._css_unit.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A CSS length unit defining the `gap` (i.e., spacing) between elements provided
    to `*args`. This argument is only applicable when `fillable = TRUE`.

<code><span class="parameter-name">fill</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether to allow this element to grow/shrink to fit its `card` container.

<code><span class="parameter-name">class_</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Additional CSS classes for the returned Tag.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Additional HTML attributes for the returned Tag.

## Returns

| Type                                  | Description                           |
|---------------------------------------|---------------------------------------|
| [CardItem](`shiny.ui._card.CardItem`) | A [](:class:`~shiny.ui.CardItem`) object. |

## See Also

* [](:func:`~shiny.ui.layout_column_wrap`) for laying out multiple cards
    (or multiple columns inside a card).
* [](:func:`~shiny.ui.card`) for creating a card component.
* [](:func:`~shiny.ui.card_header`) for creating a header within the card.
* [](:func:`~shiny.ui.card_title`) for creating a title within the card body.
* [](:func:`~shiny.ui.card_footer`) for creating a footer within the card.

# experimental.ui.card_title { #shiny.experimental.ui.card_title }

`experimental.ui.card_title(*args, container=tags.h5, **kwargs)`

A card title container

[](:func:`~shiny.experimental.ui.card_title`) creates a general container for the &quot;title&quot; of
a [](:func:`~shiny.ui.card`). This component is designed
to be provided as a direct child to [](:func:`~shiny.ui.card`).

## Parameters

<code><span class="parameter-name">*args</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">()</span></code>

:   Contents to appear in the card's title, or tag attributes to pass to the
    resolved [](:class:`~htmltools.Tag`) object.

<code><span class="parameter-name">container</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagFunction](`htmltools.TagFunction`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">tags.h5</span></code>

:   Method for the returned [](:class:`~htmltools.Tag`) object. Defaults to
    [](:func:`~shiny.ui.tags`).h5.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Additional HTML attributes for the returned [](:class:`~htmltools.Tag`) object.

## Returns

| Type                                 | Description                        |
|--------------------------------------|------------------------------------|
| [Tagifiable](`htmltools.Tagifiable`) | An [](:class:`~htmltools.Tag`) object. |

## See Also

* [](:func:`~shiny.ui.card`) for creating a card component.
* [](:func:`~shiny.ui.card_header`) for creating a header within a card.
* [](:func:`~shiny.experimental.ui.card_body`) for putting content inside a card.
* [](:func:`~shiny.ui.card_footer`) for creating a footer within a card.
* [](:func:`~shiny.experimental.ui.card_image`) for adding an image to a card.

# experimental.ui.card_image { #shiny.experimental.ui.card_image }

`experimental.ui.card_image(file, *args, href=None, border_radius='top', mime_type=None, class_=None, height=None, fill=True, width=None, container=card_body, **kwargs)`

A card image container

[](:func:`~shiny.experimental.ui.card_image`) creates a general container for an image within a
[](:func:`~shiny.ui.card`). This component is designed to be
provided as a direct child to [](:func:`~shiny.ui.card`).

## Parameters

<code><span class="parameter-name">file</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| [Path](`pathlib.Path`) \| [PurePath](`pathlib.PurePath`) \| [io](`io`).[BytesIO](`io.BytesIO`) \| None</span></code>

:   A file path pointing to an image. The image will be base64 encoded and provided to
    the `src` attribute of the `<img>` tag. Alternatively, you may set this value to
    `None` and provide the `src` yourself via `*args:TagAttrs` or
    `**kwargs:TagAttrValue` (e.g., `{"src": "HOSTED_PATH_TO_IMAGE"}` or
    `src="HOSTED_PATH_TO_IMAGE"`).

<code><span class="parameter-name">*args</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrs](`htmltools.TagAttrs`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">()</span></code>

:   A dictionary of tag attributes that are supplied to the resolved
    [](:class:`~htmltools.Tag`) object.

<code><span class="parameter-name">href</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   An optional URL to link to.

<code><span class="parameter-name">border_radius</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['top', 'bottom', 'all', 'none'\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'top'</span></code>

:   Where to apply `border-radius` on the image.

<code><span class="parameter-name">mime_type</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The mime type of the `file`.

<code><span class="parameter-name">class_</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Additional CSS classes for the resolved [](:class:`~htmltools.Tag`) object.

<code><span class="parameter-name">height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit (e.g., `height="200px"`). `height` will not apply when a card is made
    `full_screen`. In this case, consider setting a `height` in
    [](:func:`~shiny.experimental.ui.card_body`).

<code><span class="parameter-name">fill</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether to allow this element to grow/shrink to fit its `card` container.

<code><span class="parameter-name">width</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit (e.g., `width="100%"`).

<code><span class="parameter-name">container</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ImgContainer](`shiny.experimental.ui._card.ImgContainer`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">card_body</span></code>

:   Method to wrap the returned [](:class:`~htmltools.Tag`) object. Defaults to
    [](:func:`~shiny.experimental.ui.card_body`).
    If [](:func:`~shiny.experimental.ui.card_body`) is used, each image will be in separate cards. If
    the `container` method does not return a [](:class:`~shiny.ui.CardItem`), it
    allows for consecutive non-`CardItem` objects to be bundled into a single
    [](:func:`~shiny.experimental.ui.card_body`) within [](:func:`~shiny.ui.card`).

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Additional HTML attributes for the resolved [](:class:`~htmltools.Tag`).

# experimental.ui.ImgContainer { #shiny.experimental.ui.ImgContainer }

`experimental.ui.ImgContainer()`

Wraps the return value of `card_image()`.

## Parameters

<code><span class="parameter-name">*args</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Tag](`htmltools.Tag`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">()</span></code>

:   The return value of `card_image()`.

## Returns

| Type                                 | Description                                                                                   |
|--------------------------------------|-----------------------------------------------------------------------------------------------|
| [Tagifiable](`htmltools.Tagifiable`) | A tagifiable object, such as a [](:class:`~htmltools.Tag`) or [](:class:`~shiny.ui.CardItem`) object. |

# experimental.ui.WrapperCallable { #shiny.experimental.ui.WrapperCallable }

`experimental.ui.WrapperCallable()`

Wraps children into a [](:class:`~shiny.ui.CardItem`).

## Parameters

<code><span class="parameter-name">*args</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">()</span></code>

:   `TagChild` children to wrap.

## Returns

| Type                                  | Description                           |
|---------------------------------------|---------------------------------------|
| [CardItem](`shiny.ui._card.CardItem`) | A [](:class:`~shiny.ui.CardItem`) object. |