# reactive.Value { #shiny.reactive.Value }

`reactive.Value(self, value=MISSING, *, read_only=False)`

Create a reactive value.

Reactive values are the source of reactivity in Shiny. Changes to reactive values
invalidate downstream reactive functions ([](:func:`~shiny.reactive.calc`),
[](:func:`~shiny.reactive.effect`), and `render` functions decorated with `@output`).
When these functions are invalidated, they get scheduled to re-execute.

Shiny input values are read-only reactive values. For example, `input.x` is a
reactive value object, and to get the current value, you can call `input.x()` or
`input.x.get()`. When you do that inside of a reactive function, the function takes
a dependency on the reactive value.

## Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[T](`shiny.reactive._reactives.T`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">MISSING</span></code>

:   An optional initial value.

<code><span class="parameter-name">read_only</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   If ``True``, then the reactive value cannot be `set()`.

## Returns

| Type   | Description                      |
|--------|----------------------------------|
|        | An instance of a reactive value. |

## Raises

| Type                                                                                      | Description                                                     |
|-------------------------------------------------------------------------------------------|-----------------------------------------------------------------|
| ~[shiny](`shiny`).[types](`shiny.types`).[SilentException](`shiny.types.SilentException`) | If [](:func:`~Value.get`) is called before a value is provided/set. |

## Note

A reactive value may only be read from within a reactive function (e.g.,
[](:func:`~shiny.reactive.calc`), [](:func:`~shiny.reactive.effect`),
[](:func:`shiny.render.text`), etc.) and, when doing so, the function takes a reactive
dependency on the value (i.e., when the value changes, the calling reactive function
will re-execute).



## See Also

[](:func:`~shiny.Inputs`) [](:func:`~shiny.reactive.calc`) [](:func:`~shiny.reactive.effect`)

## Examples

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_fluid(
    ui.input_action_button("minus", "-1"),
    " ",
    ui.input_action_button("plus", "+1"),
    ui.br(),
    ui.output_text("value"),
)


def server(input: Inputs, output: Outputs, session: Session):
    val = reactive.Value(0)

    @reactive.Effect
    @reactive.event(input.minus)
    def _():
        newVal = val.get() - 1
        val.set(newVal)

    @reactive.Effect
    @reactive.event(input.plus)
    def _():
        newVal = val.get() + 1
        val.set(newVal)

    @render.text
    def value():
        return str(val.get())


app = App(app_ui, server)
```

## Methods

| Name | Description |
| --- | --- |
| [freeze](#shiny.reactive.Value.freeze) | Freeze the reactive value.  Freezing is equivalent to unsetting the value, but it does not invalidate dependents. |
| [get](#shiny.reactive.Value.get) | Read the reactive value. |
| [is_set](#shiny.reactive.Value.is_set) | Check if the reactive value is set. |
| [set](#shiny.reactive.Value.set) | Set the reactive value to a new value. |
| [unset](#shiny.reactive.Value.unset) | Unset the reactive value. |

### freeze { #shiny.reactive.Value.freeze }

`reactive.Value.freeze()`

Freeze the reactive value.

Freezing is equivalent to unsetting the value, but it does not invalidate
dependents.

### get { #shiny.reactive.Value.get }

`reactive.Value.get()`

Read the reactive value.

#### Returns

| Type                               | Description   |
|------------------------------------|---------------|
| [T](`shiny.reactive._reactives.T`) | A value.      |

#### Raises

| Type                                                                                      | Description                                 |
|-------------------------------------------------------------------------------------------|---------------------------------------------|
| ~[shiny](`shiny`).[types](`shiny.types`).[SilentException](`shiny.types.SilentException`) | If the value is not set.                    |
| [RuntimeError](`RuntimeError`)                                                            | If called from outside a reactive function. |

### is_set { #shiny.reactive.Value.is_set }

`reactive.Value.is_set()`

Check if the reactive value is set.

#### Returns

| Type           | Description                                        |
|----------------|----------------------------------------------------|
| [bool](`bool`) | ``True`` if the value is set, ``False`` otherwise. |

### set { #shiny.reactive.Value.set }

`reactive.Value.set(value)`

Set the reactive value to a new value.

#### Parameters

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[T](`shiny.reactive._reactives.T`)</span></code>

:   A value.

#### Returns

| Type           | Description                                                                 |
|----------------|-----------------------------------------------------------------------------|
| [bool](`bool`) | ``True`` if the value was set to a different value and ``False`` otherwise. |

#### Raises

| Type                           | Description                              |
|--------------------------------|------------------------------------------|
| [RuntimeError](`RuntimeError`) | If called on a read-only reactive value. |

### unset { #shiny.reactive.Value.unset }

`reactive.Value.unset()`

Unset the reactive value.

#### Returns

| Type   | Description                                            |
|--------|--------------------------------------------------------|
| None   | ``True`` if the value was set prior to this unsetting. |