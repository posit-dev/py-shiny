# render.plot { #shiny.render.plot }

`render.plot(self, _fn=None, *, alt=None, width=MISSING, height=MISSING, **kwargs)`

Reactively render a plot object as an HTML image.

## Parameters

<code><span class="parameter-name">alt</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Alternative text for the image if it cannot be displayed or viewed (i.e., the
    user uses a screen reader).

<code><span class="parameter-name">width</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[float](`float`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">MISSING</span></code>

:   Width of the plot in pixels. If ``None`` or ``MISSING``, the width will be
    determined by the size of the corresponding [](:func:`~shiny.ui.output_plot`). (You
    should not need to use this argument in most Shiny apps--set the desired width
    on [](:func:`~shiny.ui.output_plot`) instead.)

<code><span class="parameter-name">height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[float](`float`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">MISSING</span></code>

:   Height of the plot in pixels. If ``None`` or ``MISSING``, the height will be
    determined by the size of the corresponding [](:func:`~shiny.ui.output_plot`). (You
    should not need to use this argument in most Shiny apps--set the desired height
    on [](:func:`~shiny.ui.output_plot`) instead.)

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[object](`object`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Additional keyword arguments passed to the relevant method for saving the image
    (e.g., for matplotlib, arguments to ``savefig()``; for PIL and plotnine,
    arguments to ``save()``).

## Returns

| Type                                                                                 | Description                                                                                                                                                                                                                                                                                                                                               |
|--------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|                                                                                      | A decorator for a function that returns any of the following:  1. A [](:class:`matplotlib.figure.Figure`) instance. 2. An [](:class:`matplotlib.artist.Artist`) instance. 3. A list/tuple of Figure/Artist instances. 4. An object with a 'figure' attribute pointing to a    [](:class:`matplotlib.figure.Figure`) instance. 5. A [](:class:`PIL.Image.Image`) instance. |
| It's also possible to use the ``matplotlib.pyplot`` interface; in that case, your    |                                                                                                                                                                                                                                                                                                                                                           |
| function should just call pyplot functions and not return anything. (Note that if    |                                                                                                                                                                                                                                                                                                                                                           |
| the decorated function is async, then it's not safe to use pyplot. Shiny will detect |                                                                                                                                                                                                                                                                                                                                                           |
| this case and throw an error asking you to use matplotlib's object-oriented          |                                                                                                                                                                                                                                                                                                                                                           |
| interface instead.)                                                                  |                                                                                                                                                                                                                                                                                                                                                           |

## Tip

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.ui.output_plot`) container (see [](:func:`~shiny.ui.output_plot`) for
example usage).



## See Also

[](:func:`~shiny.ui.output_plot`) [](:func:`~shiny.render.image`)