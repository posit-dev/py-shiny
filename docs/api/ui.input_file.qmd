# ui.input_file { #shiny.ui.input_file }

`ui.input_file(id, label, *, multiple=False, accept=None, width=None, button_label='Browse...', placeholder='No file selected', capture=None)`

Create a file upload control that can be used to upload one or more files.

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   An input id.

<code><span class="parameter-name">label</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span></code>

:   An input label.

<code><span class="parameter-name">multiple</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Whether the user should be allowed to select and upload multiple files at once.

<code><span class="parameter-name">accept</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Unique file type specifier(s) which give the browser a hint as to the type of
    file the server expects. Many browsers use this to prevent the user from
    selecting an invalid file. Examples of valid values include a case insensitive
    extension (e.g. ``.csv`` or ``.rds``), a valid MIME type (e.g. ``text/plain`` or
    ``application/pdf``) or one of ``audio/*``, ``video/*``, or ``image/*`` meaning
    any audio, video, or image type, respectively.

<code><span class="parameter-name">width</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The CSS width, e.g. '400px', or '100%'

<code><span class="parameter-name">button_label</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'Browse...'</span></code>

:   The label used on the button.

<code><span class="parameter-name">placeholder</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'No file selected'</span></code>

:   The text to show on the input before a file has been uploaded.

<code><span class="parameter-name">capture</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[Literal](`typing.Literal`)\['environment', 'user'\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   On mobile devices, this can be used to open the device's camera for input. If
    "environment", it will open the rear-facing camera. If "user", it will open the
    front-facing camera. By default, it will accept either still photos or video. To
    accept only still photos, use ``accept="image/*"``; to accept only video, use
    ``accept="video/*"``.

## Returns

| Type                   | Description   |
|------------------------|---------------|
| [Tag](`htmltools.Tag`) | A UI element. |

## Notes


::: {.callout-note title="Server value"}
A list of dictionaries (one for each file upload) with the following keys:

* ``name``: The filename provided by the web browser. This is *not* the path to read
    to get at the actual data that was uploaded (see 'datapath').
* ``size``: The size of the uploaded data, in bytes.
* ``type``: The MIME type reported by the browser (for example, 'text/plain'), or
    empty string if the browser didn't know.
* ``datapath``: The path to a temp file that contains the data that was uploaded.
    This file may be deleted if the user performs another upload operation.
:::



## See Also

[](:func:`~shiny.ui.download_button`)

## Examples

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import pandas as pd

from shiny import App, Inputs, Outputs, Session, reactive, render, ui
from shiny.types import FileInfo

app_ui = ui.page_fluid(
    ui.input_file("file1", "Choose CSV File", accept=[".csv"], multiple=False),
    ui.input_checkbox_group(
        "stats",
        "Summary Stats",
        choices=["Row Count", "Column Count", "Column Names"],
        selected=["Row Count", "Column Count", "Column Names"],
    ),
    ui.output_table("summary"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.Calc
    def parsed_file():
        file: list[FileInfo] | None = input.file1()
        if file is None:
            return pd.DataFrame()
        return pd.read_csv(  # pyright: ignore[reportUnknownMemberType]
            file[0]["datapath"]
        )

    @render.table
    def summary():
        df = parsed_file()

        if df.empty:
            return pd.DataFrame()

        # Get the row count, column count, and column names of the DataFrame
        row_count = df.shape[0]
        column_count = df.shape[1]
        names = df.columns.tolist()
        column_names = ", ".join(str(name) for name in names)

        # Create a new DataFrame to display the information
        info_df = pd.DataFrame(
            {
                "Row Count": [row_count],
                "Column Count": [column_count],
                "Column Names": [column_names],
            }
        )

        # input.stats() is a list of strings; subset the columns based on the selected
        # checkboxes
        return info_df.loc[:, input.stats()]


app = App(app_ui, server)
```