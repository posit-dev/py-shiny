# ui.input_select { #shiny.ui.input_select }

`ui.input_select(id, label, choices, *, selected=None, multiple=False, selectize=False, width=None, size=None)`

Create a select list that can be used to choose a single or multiple items from a
list of values.

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   An input id.

<code><span class="parameter-name">label</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span></code>

:   An input label.

<code><span class="parameter-name">choices</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[SelectChoicesArg](`shiny.ui._input_select.SelectChoicesArg`)</span></code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note
    that if a dictionary is provided, the keys are used as the (input) values so
    that the dictionary values can hold HTML labels. A dictionary of dictionaries is
    also supported, and in that case, the top-level keys are treated as
    ``<optgroup>`` labels.

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The values that should be initially selected, if any.

<code><span class="parameter-name">multiple</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Is selection of multiple items allowed?

<code><span class="parameter-name">selectize</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Whether to use selectize.js or not.

<code><span class="parameter-name">width</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The CSS width, e.g. '400px', or '100%'

<code><span class="parameter-name">size</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Number of items to show in the selection box; a larger number will result in a
    taller box. Normally, when ``multiple=False``, a select input will be a
    drop-down list, but when size is set, it will be a box instead.

## Returns

| Type                   | Description   |
|------------------------|---------------|
| [Tag](`htmltools.Tag`) | A UI element. |

## Notes

::: {.callout-note title="Server value"}
If `multiple=False`, the server value is a string with the value of the selected item.
If `multiple=True`, the server value is a tuple containing the values of the
selected items. When ``multiple=True`` and nothing is selected, this value
will be ``None``.
:::



## See Also

[](:func:`~shiny.ui.input_selectize`)
[](:func:`~shiny.ui.update_select`)
[](:func:`~shiny.ui.input_radio_buttons`)
[](:func:`~shiny.ui.input_checkbox_group`)

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_select(
        "state",
        "Choose a state:",
        {
            "East Coast": {"NY": "New York", "NJ": "New Jersey", "CT": "Connecticut"},
            "West Coast": {"WA": "Washington", "OR": "Oregon", "CA": "California"},
            "Midwest": {"MN": "Minnesota", "WI": "Wisconsin", "IA": "Iowa"},
        },
    ),
    ui.output_text("value"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def value():
        return "You choose: " + str(input.state())


app = App(app_ui, server)

```

