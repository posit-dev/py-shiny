# ui.panel_title { #shiny.ui.panel_title }

`ui.panel_title(title, window_title=MISSING)`

Create title(s) for the application.

## Parameters

<code><span class="parameter-name">title</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| [Tag](`htmltools.Tag`) \| [TagList](`htmltools.TagList`)</span></code>

:   A title to display in the app's UI.

<code><span class="parameter-name">window_title</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">MISSING</span></code>

:   A title to display on the browser tab.

## Returns

| Type                           | Description   |
|--------------------------------|---------------|
| [TagList](`htmltools.TagList`) | A UI element. |

## Note

This result of this function causes a side effect of adding a title tag to the head
of the document (this is necessary for the browser to display the title in the
browser window). You can also specify a page title explicitly using the title
parameter of the top-level page function (e.g., [](:func:`~shiny.ui.page_fluid`)).

## Examples

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, ui

app_ui = ui.page_fluid(ui.panel_title("Page title", "Window title"))


def server(input: Inputs, output: Outputs, session: Session):
    pass


app = App(app_ui, server)
```