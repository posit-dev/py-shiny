# ui.update_accordion { #shiny.ui.update_accordion }

`ui.update_accordion(id, *, show, session=None)`

Dynamically set accordions&#x27; states.

Dynamically (i.e., programmatically) update/modify [](:func:`~shiny.ui.accordion`)s in a Shiny app.
These functions require an `id` to be provided to the [](:func:`~shiny.ui.accordion`) and must also be
called within an active Shiny session.

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   A string that matches an existing [](:func:`~shiny.ui.accordion`)'s `id`.

<code><span class="parameter-name">show</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`) \| [str](`str`) \| [list](`list`)\[[str](`str`)\]</span></code>

:   Either a string or list of strings (used to identify particular
    [](:func:`~shiny.ui.accordion_panel`)(s) by their `value`) or a `bool` to set the state of all
    panels.

<code><span class="parameter-name">session</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A Shiny session object (the default should almost always be used).

## References

[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)



## See Also

* [](:func:`~shiny.ui.accordion`)
* [](:func:`~shiny.ui.accordion_panel`)
* [](:func:`~shiny.ui.insert_accordion_panel`)
* [](:func:`~shiny.ui.remove_accordion_panel`)
* [](:func:`~shiny.ui.update_accordion_panel`)

## Examples

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

items = [
    ui.accordion_panel(f"Section {letter}", f"Some narrative for section {letter}")
    for letter in "ABCDE"
]

app_ui = ui.page_fluid(
    ui.input_action_button("set_acc", "Only open sections A,C,E", class_="mt-3 mb-3"),
    # Provide an id to create a shiny input binding
    ui.accordion(*items, id="acc", open=["Section B", "Section D"], multiple=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.Effect
    @reactive.event(input.set_acc)
    def _():
        ui.update_accordion("acc", show=["Section A", "Section C", "Section E"])


app = App(app_ui, server)
```