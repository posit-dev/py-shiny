# Miscellaneous types



# types.MISSING_TYPE { #shiny.types.MISSING_TYPE }

`types.MISSING_TYPE()`



# types.MISSING { #shiny.types.MISSING }

`types.MISSING`



# types.FileInfo { #shiny.types.FileInfo }

`types.FileInfo()`

Class for information about a file upload.



## See Also

[](:func:`~shiny.ui.input_file`)



## Example

See [](:func:`~shiny.ui.input_file`).

## Attributes

| Name | Description |
| --- | --- |
| [datapath](#shiny.types.FileInfo.datapath) | The path to the file on the server. |
| [name](#shiny.types.FileInfo.name) | The name of the file being uploaded. |
| [size](#shiny.types.FileInfo.size) | The size of the file in bytes. |
| [type](#shiny.types.FileInfo.type) | The MIME type of the file. |

# types.ImgData { #shiny.types.ImgData }

`types.ImgData()`

Return type for [](:func:`~shiny.render.image`).



## See Also

[](:func:`~shiny.render.image`)



## Example

See [](:func:`~shiny.render.image`).

## Attributes

| Name | Description |
| --- | --- |
| [alt](#shiny.types.ImgData.alt) | The ``alt`` attribute of the ``<img>`` tag. |
| [coordmap](#shiny.types.ImgData.coordmap) | TODO |
| [height](#shiny.types.ImgData.height) | The ``height`` attribute of the ``<img>`` tag. |
| [src](#shiny.types.ImgData.src) | The ``src`` attribute of the ``<img>`` tag. |
| [style](#shiny.types.ImgData.style) | The ``style`` attribute of the ``<img>`` tag. |
| [width](#shiny.types.ImgData.width) | The ``width`` attribute of the ``<img>`` tag. |

# types.NavSetArg { #shiny.types.NavSetArg }

`types.NavSetArg()`

A value suitable for passing to a navigation container (e.g.,
[](:func:`~shiny.ui.navset_tab`)).

## Methods

| Name | Description |
| --- | --- |
| [get_value](#shiny.types.NavSetArg.get_value) | Get the value of this navigation item (if any).  This value is only used to determine what navigation item should be shown by default when none is specified (i.e., the first navigation item that returns a value is used to determine the container's ``selected`` value). |
| [resolve](#shiny.types.NavSetArg.resolve) | Resolve information provided by the navigation container. |

### get_value { #shiny.types.NavSetArg.get_value }

`types.NavSetArg.get_value()`

Get the value of this navigation item (if any).

This value is only used to determine what navigation item should be shown
by default when none is specified (i.e., the first navigation item that
returns a value is used to determine the container&#x27;s ``selected`` value).

### resolve { #shiny.types.NavSetArg.resolve }

`types.NavSetArg.resolve(selected, context)`

Resolve information provided by the navigation container.

#### Parameters

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span></code>

:   The value of the navigation item to be shown on page load.

<code><span class="parameter-name">context</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[dict](`dict`)\[[str](`str`), [Any](`typing.Any`)\]</span></code>

:   Additional context supplied by the navigation container.

# ui.Sidebar { #shiny.ui.Sidebar }

`ui.Sidebar(self, tag, collapse_tag, position, open, width, max_height_mobile, color_fg, color_bg)`

A sidebar object

Class returned from [](:func:`~shiny.ui.sidebar`). Please do not use this
class directly. Instead, supply the [](:func:`~shiny.ui.sidebar`) object to
[](:func:`~shiny.ui.layout_sidebar`).

## Attributes

| Name              | Type   | Description                                                                                                                                                                                                                                                                        |
|-------------------|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| tag               |        | The [](:class:`~htmltools.Tag`) object that represents the sidebar.                                                                                                                                                                                                                    |
| collapse_tag      |        | The [](:class:`~htmltools.Tag`) object that represents the collapse button.                                                                                                                                                                                                            |
| position          |        | Where the sidebar should appear relative to the main content.                                                                                                                                                                                                                      |
| open              |        | The initial state of the sidebar (open or collapsed).                                                                                                                                                                                                                              |
| width             |        | A valid CSS unit used for the width of the sidebar.                                                                                                                                                                                                                                |
| max_height_mobile |        | The maximum height of the horizontal sidebar when viewed on mobile devices. The default is `250px` unless the sidebar is included in a [](:func:`~shiny.ui.layout_sidebar`) with a specified height, in which case the default is to take up no more than 50% of the layout container. |
| color_fg          |        | A foreground color.                                                                                                                                                                                                                                                                |
| color_bg          |        | A background color.                                                                                                                                                                                                                                                                |

## Parameters

<code><span class="parameter-name">tag</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Tag](`htmltools.Tag`)</span></code>

:   The [](:class:`~htmltools.Tag`) object that represents the sidebar.

<code><span class="parameter-name">collapse_tag</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[Tag](`htmltools.Tag`)\]</span></code>

:   The [](:class:`~htmltools.Tag`) object that represents the collapse button.

<code><span class="parameter-name">position</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['left', 'right'\]</span></code>

:   Where the sidebar should appear relative to the main content.

<code><span class="parameter-name">open</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['desktop', 'open', 'closed', 'always'\]</span></code>

:   The initial state of the sidebar (open or collapsed).

<code><span class="parameter-name">width</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[CssUnit](`shiny.ui.css.CssUnit`)</span></code>

:   A valid CSS unit used for the width of the sidebar.

<code><span class="parameter-name">max_height_mobile</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`) \| [float](`float`)\]</span></code>

:   The maximum height of the horizontal sidebar when viewed on mobile devices.
    The default is `250px` unless the sidebar is included in a
    [](:func:`~shiny.ui.layout_sidebar`) with a specified height, in
    which case the default is to take up no more than 50% of the layout container.

<code><span class="parameter-name">color_fg</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span></code>

:   A foreground color.

<code><span class="parameter-name">color_bg</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span></code>

:   A background color.

## Methods

| Name | Description |
| --- | --- |
| [tagify](#shiny.ui.Sidebar.tagify) | Not implemented |

### tagify { #shiny.ui.Sidebar.tagify }

`ui.Sidebar.tagify()`

Not implemented

# ui.CardItem { #shiny.ui.CardItem }

`ui.CardItem(self, item)`

A wrapper around a [](:class:`~htmltools.Tag`) object that represents the content of a
card item (e.g., [](:func:`~shiny.ui.card_header`) or
[](:func:`~shiny.card_footer`)).

This class is used to allow for consecutive non-card items to be bundled into a
single group within [](:func:`~shiny.ui.card`).

## Parameters

<code><span class="parameter-name">item</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span></code>

:   A [](:class:`~htmltools.Tag`) object that represents the content of a card item
    (e.g., [](:func:`~shiny.ui.card_header`) or
    [](:func:`~shiny.card_footer`)).

## See Also

* [](:func:`~shiny.ui.card`) for creating a card component.
* [](:func:`~shiny.ui.card_header`) for creating a header within a card.
* [](:func:`~shiny.ui.card_footer`) for creating a footer within a card.

## Methods

| Name | Description |
| --- | --- |
| [resolve](#shiny.ui.CardItem.resolve) | Resolves an object with the `CardItem` class by returning the `item` provided at initialization. |
| [tagify](#shiny.ui.CardItem.tagify) | Tagify the `item` |

### resolve { #shiny.ui.CardItem.resolve }

`ui.CardItem.resolve()`

Resolves an object with the `CardItem` class by returning the `item` provided at initialization.

#### Returns

| Type                             | Description                            |
|----------------------------------|----------------------------------------|
| [TagChild](`htmltools.TagChild`) | The `item` provided at initialization. |

### tagify { #shiny.ui.CardItem.tagify }

`ui.CardItem.tagify()`

Tagify the `item`

#### Returns

| Type                           | Description                                    |
|--------------------------------|------------------------------------------------|
| [TagList](`htmltools.TagList`) | A tagified [](:class:`~htmltools.TagList`) object. |

# ui.AccordionPanel { #shiny.ui.AccordionPanel }

`ui.AccordionPanel(self, *args, data_value, icon, title, id, **kwargs)`

The internal class used to represent an accordion panel.

This class is used to represent an accordion panel. It is not intended to be
instantiated directly. Instead, use [](:func:`~shiny.ui.accordion_panel`).

## Parameters

<code><span class="parameter-name">*args</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">()</span></code>

:   Contents to appear in the accordion panel body, or tag attributes that are supplied to the
    returned [](:class:`~htmltools.Tag`) object.

<code><span class="parameter-name">data_value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   A character string that uniquely identifies this panel.

<code><span class="parameter-name">icon</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`) \| None</span></code>

:   A [](:class:`~htmltools.Tag`) which is positioned just before the `title`.

<code><span class="parameter-name">title</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`) \| None</span></code>

:   A title to appear in the [](:func:`~shiny.ui.accordion_panel`)'s header.

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| None</span></code>

:   A unique id for this panel.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Tag attributes to the `accordion-body` div Tag.

## See Also

* [](:func:`~shiny.ui.accordion`)
* [](:func:`~shiny.ui.update_accordion`)
* [](:func:`~shiny.ui.insert_accordion_panel`)
* [](:func:`~shiny.ui.remove_accordion_panel`)
* [](:func:`~shiny.ui.update_accordion_panel`)

## Methods

| Name | Description |
| --- | --- |
| [resolve](#shiny.ui.AccordionPanel.resolve) | Resolve the :class:`~shiny.ui.AccordionPanel` into a :class:`~htmltools.Tag`. |
| [tagify](#shiny.ui.AccordionPanel.tagify) | Resolve the :class:`~shiny.ui.AccordionPanel` into a :class:`~htmltools.Tag`. |

### resolve { #shiny.ui.AccordionPanel.resolve }

`ui.AccordionPanel.resolve()`

Resolve the [](:class:`~shiny.ui.AccordionPanel`) into a
[](:class:`~htmltools.Tag`).

#### Returns

| Type                   | Description                                                                          |
|------------------------|--------------------------------------------------------------------------------------|
| [Tag](`htmltools.Tag`) | A [](:class:`~htmltools.Tag`) object representing the [](:class:`~shiny.ui.AccordionPanel`). |

### tagify { #shiny.ui.AccordionPanel.tagify }

`ui.AccordionPanel.tagify()`

Resolve the [](:class:`~shiny.ui.AccordionPanel`) into a
[](:class:`~htmltools.Tag`).

#### Returns

| Type                   | Description                    |
|------------------------|--------------------------------|
| [Tag](`htmltools.Tag`) | A tagified `resolve()`d value. |

# ui.css.CssUnit { #shiny.ui.css.CssUnit }

`ui.css.CssUnit`

Possible python types that can be converted into a CSS unit. Numeric values will be converted to pixels. Values equal to `0` will be converted to `"0"`. Strings will be passed through as-is.

# ui._input_slider.SliderValueArg { #shiny.ui._input_slider.SliderValueArg }

`ui._input_slider.SliderValueArg`

Type variable.

Usage::

  T = TypeVar(&#x27;T&#x27;)  # Can be anything
  A = TypeVar(&#x27;A&#x27;, str, bytes)  # Must be str or bytes

Type variables exist primarily for the benefit of static type
checkers.  They serve as the parameters for generic types as well
as for generic function definitions.  See class Generic for more
information on generic types.  Generic functions work as follows:

  def repeat(x: T, n: int) -&gt; List[T]:
      &#x27;&#x27;&#x27;Return a list containing n references to x.&#x27;&#x27;&#x27;
      return [x]*n

  def longest(x: A, y: A) -&gt; A:
      &#x27;&#x27;&#x27;Return the longest of two strings.&#x27;&#x27;&#x27;
      return x if len(x) &gt;= len(y) else y

The latter example&#x27;s signature is essentially the overloading
of (str, str) -&gt; str and (bytes, bytes) -&gt; bytes.  Also note
that if the arguments are instances of some subclass of str,
the return type is still plain str.

At runtime, isinstance(x, T) and issubclass(C, T) will raise TypeError.

Type variables defined with covariant=True or contravariant=True
can be used to declare covariant or contravariant generic types.
See PEP 484 for more details. By default generic types are invariant
in all type variables.

Type variables can be introspected. e.g.:

  T.__name__ == &#x27;T&#x27;
  T.__constraints__ == ()
  T.__covariant__ == False
  T.__contravariant__ = False
  A.__constraints__ == (str, bytes)

Note that only type variables defined in global scope can be pickled.

# ui._input_slider.SliderStepArg { #shiny.ui._input_slider.SliderStepArg }

`ui._input_slider.SliderStepArg`

