# ui.update_select { #shiny.ui.update_select }

`ui.update_select(id, *, label=None, choices=None, selected=None, session=None)`

Change the value of a select input on the client.

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   An input id.

<code><span class="parameter-name">label</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   An input label.

<code><span class="parameter-name">choices</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[SelectChoicesArg](`shiny.ui._input_select.SelectChoicesArg`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note
    that if a dictionary is provided, the keys are used as the (input) values so
    that the dictionary values can hold HTML labels. A dictionary of dictionaries is
    also supported, and in that case, the top-level keys are treated as
    ``<optgroup>`` labels.

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The values that should be initially selected, if any.

<code><span class="parameter-name">session</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via
    [](:func:`~shiny.session.get_current_session`).

## Note


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~update_radio_buttons`), [](:func:`~update_checkbox_group`), and
[](:func:`~update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.




## See Also

[](:func:`~shiny.ui.input_select`)
[](:func:`~shiny.ui.update_selectize`)

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.tags.p("The checkbox group controls the select input"),
    ui.input_checkbox_group(
        "inCheckboxGroup", "Input checkbox", ["Item A", "Item B", "Item C"]
    ),
    ui.input_select("inSelect", "Select input", ["Item A", "Item B", "Item C"]),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.Effect
    def _():
        x = input.inCheckboxGroup()

        # Can use [] to remove all choices
        if x is None:
            x = []
        elif isinstance(x, str):
            x = [x]

        ui.update_select(
            "inSelect",
            label="Select input label " + str(len(x)),
            choices=x,
            selected=x[len(x) - 1] if len(x) > 0 else None,
        )


app = App(app_ui, server)

```

