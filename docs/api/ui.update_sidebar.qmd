# ui.update_sidebar { #shiny.ui.update_sidebar }

`ui.update_sidebar(id, *, show=None, session=None)`

Update a sidebar&#x27;s visibility.

Set a [](:func:`~shiny.ui.sidebar`) state during an active Shiny user session.

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The `id` of the [](:func:`~shiny.ui.sidebar`) to toggle.

<code><span class="parameter-name">show</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[bool](`bool`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The desired visible state of the sidebar, where `True` opens the sidebar and `False` closes the sidebar (if not already in that state).

<code><span class="parameter-name">session</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A Shiny session object (the default should almost always be used).

## See Also

* [](:func:`~shiny.ui.sidebar`)
* [](:func:`~shiny.ui.layout_sidebar`)

## Examples

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, render, ui

app_ui = ui.page_sidebar(
    ui.sidebar("Sidebar content", id="sidebar"),
    ui.input_action_button("open_sidebar", label="Open sidebar", class_="me-3"),
    ui.input_action_button("close_sidebar", label="Close sidebar", class_="me-3"),
    ui.br(),
    ui.br(),
    ui.output_text_verbatim("state"),
    fillable=False,
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.Effect
    @reactive.event(input.open_sidebar)
    def _():
        ui.update_sidebar("sidebar", show=True)

    @reactive.Effect
    @reactive.event(input.close_sidebar)
    def _():
        ui.update_sidebar("sidebar", show=False)

    @render.text
    def state():
        return f"input.sidebar(): {input.sidebar()}"


app = App(app_ui, server=server)
```