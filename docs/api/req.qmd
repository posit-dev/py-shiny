# req { #shiny.req }

`req(*args, cancel_output=False)`

Throw a silent exception for falsy values.

This is a convenient shorthand for throwing [](:func:`~shiny.types.SilentException`) /
[](:func:`~shiny.types.SilentCancelOutputException`) if any of the arguments are falsy.

The term &quot;falsy&quot; generally indicates that a value is considered `False` when
encountered in a logical context. We use the term a little loosely here; our usage
tries to match the intuitive notions of &quot;Is this value missing or available?&quot;, or
&quot;Has the user provided an answer?&quot;, or in the case of action buttons, &quot;Has the
button been clicked?&quot;. So `False`, `None`, `0`, and `""` would be examples of Falsy
values.

## Parameters

<code><span class="parameter-name">*args</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[T](`shiny._validation.T`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">()</span></code>

:   Any number of arguments to check.

<code><span class="parameter-name">cancel_output</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   If ``True``, throw [](:func:`~shiny.types.SilentCancelOutputException`) instead of
    [](:func:`~shiny.types.SilentException`).

## Returns

| Type                               | Description                                                         |
|------------------------------------|---------------------------------------------------------------------|
| [T](`shiny._validation.T`) \| None | The first argument. If no arguments are provided, returns ``None``. |

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, render, req, ui
from shiny.types import SafeException

app_ui = ui.page_fluid(
    ui.input_action_button("safe", "Throw a safe error"),
    ui.output_ui("safe"),
    ui.input_action_button("unsafe", "Throw an unsafe error"),
    ui.output_ui("unsafe"),
    ui.input_text(
        "txt",
        "Enter some text below, then remove it. Notice how the text is never fully removed.",
    ),
    ui.output_ui("txt_out"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.Calc
    def safe_click():
        req(input.safe())
        return input.safe()

    @render.ui
    def safe():
        raise SafeException(f"You've clicked {str(safe_click())} times")

    @render.ui
    def unsafe():
        req(input.unsafe())
        raise Exception(f"Super secret number of clicks: {str(input.unsafe())}")

    @reactive.Effect
    def _():
        req(input.unsafe())
        print("unsafe clicks:", input.unsafe())
        # raise Exception("Observer exception: this should cause a crash")

    @render.ui
    def txt_out():
        req(input.txt(), cancel_output=True)
        return input.txt()


app = App(app_ui, server)
app.sanitize_errors = True

```

