# ui.TagList { #shiny.ui.TagList }

`ui.TagList(self, *args)`

Create an HTML tag list (i.e., a fragment of HTML)

## Parameters

<code><span class="parameter-name">*args</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools._core.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">()</span></code>

:   The tag children to add to the list.

## Examples

```python
>>> from htmltools import TagList, div
>>> TagList("hello", div(id="foo", class_="bar"))
hello
<div id="foo" class="bar"></div>
```

## Methods

| Name | Description |
| --- | --- |
| [append](#shiny.ui.TagList.append) | Append tag children to the end of the list. |
| [extend](#shiny.ui.TagList.extend) | Extend the children by appending an iterable of children. |
| [get_dependencies](#shiny.ui.TagList.get_dependencies) | Get any dependencies needed to render the HTML. |
| [get_html_string](#shiny.ui.TagList.get_html_string) | Return the HTML string for this tag list. |
| [insert](#shiny.ui.TagList.insert) | Insert tag children before a given index. |
| [render](#shiny.ui.TagList.render) | Get string representation as well as its HTML dependencies. |
| [save_html](#shiny.ui.TagList.save_html) | Save to a HTML file. |
| [show](#shiny.ui.TagList.show) | Preview as a complete HTML document. |
| [tagify](#shiny.ui.TagList.tagify) | Convert any tagifiable children to Tag/TagList objects. |

### append { #shiny.ui.TagList.append }

`ui.TagList.append(*args)`

Append tag children to the end of the list.

### extend { #shiny.ui.TagList.extend }

`ui.TagList.extend(x)`

Extend the children by appending an iterable of children.

### get_dependencies { #shiny.ui.TagList.get_dependencies }

`ui.TagList.get_dependencies(dedup=True)`

Get any dependencies needed to render the HTML.

#### Parameters

<code><span class="parameter-name">dedup</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether to deduplicate the dependencies.

### get_html_string { #shiny.ui.TagList.get_html_string }

`ui.TagList.get_html_string(indent=0, eol='\n', *, add_ws=True, _escape_strings=True)`

Return the HTML string for this tag list.

#### Parameters

<code><span class="parameter-name">indent</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[int](`int`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">0</span></code>

:   Number of spaces to indent each line of the HTML.

<code><span class="parameter-name">eol</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'\n'</span></code>

:   End-of-line character(s).

<code><span class="parameter-name">add_ws</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether to add whitespace between the opening tag and the first child. If
    either this is True, or the child's add_ws attribute is True, then
    whitespace will be added; if they are both False, then no whitespace will be
    added.

### insert { #shiny.ui.TagList.insert }

`ui.TagList.insert(index, x)`

Insert tag children before a given index.

### render { #shiny.ui.TagList.render }

`ui.TagList.render()`

Get string representation as well as its HTML dependencies.

### save_html { #shiny.ui.TagList.save_html }

`ui.TagList.save_html(file, *, libdir='lib', include_version=True)`

Save to a HTML file.

#### Parameters

<code><span class="parameter-name">file</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   The file to save to.

<code><span class="parameter-name">libdir</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'lib'</span></code>

:   The directory to save the dependencies to.

<code><span class="parameter-name">include_version</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether to include the version number in the dependency folder name.

#### Returns

| Type         | Description                          |
|--------------|--------------------------------------|
| [str](`str`) | The path to the generated HTML file. |

### show { #shiny.ui.TagList.show }

`ui.TagList.show(renderer='auto')`

Preview as a complete HTML document.

#### Parameters

<code><span class="parameter-name">renderer</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['auto', 'ipython', 'browser'\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'auto'</span></code>

:   The renderer to use.

### tagify { #shiny.ui.TagList.tagify }

`ui.TagList.tagify()`

Convert any tagifiable children to Tag/TagList objects.