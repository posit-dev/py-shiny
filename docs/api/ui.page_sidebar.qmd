# ui.page_sidebar { #shiny.ui.page_sidebar }

`ui.page_sidebar(sidebar, *args, title=None, fillable=False, fillable_mobile=False, window_title=MISSING, lang=None, **kwargs)`

Create a page with a sidebar and a title.

## Parameters

<code><span class="parameter-name">sidebar</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Sidebar](`shiny.ui._sidebar.Sidebar`)</span></code>

:   Content to display in the sidebar.

<code><span class="parameter-name">*args</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">()</span></code>

:   UI elements.

<code><span class="parameter-name">title</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`) \| [Tag](`htmltools.Tag`) \| [TagList](`htmltools.TagList`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A title to display at the top of the page.

<code><span class="parameter-name">fillable</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Whether or not the main content area should be considered a fillable
    (i.e., flexbox) container.

<code><span class="parameter-name">fillable_mobile</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Whether or not ``fillable`` should apply on mobile devices.

<code><span class="parameter-name">window_title</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">MISSING</span></code>

:   The browser's window title (defaults to the host URL of the page). Can also be
    set as a side effect via [](:func:`~shiny.ui.panel_title`).

<code><span class="parameter-name">lang</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   ISO 639-1 language code for the HTML page, such as ``"en"`` or ``"ko"``. This
    will be used as the lang in the ``<html>`` tag, as in ``<html lang="en">``. The
    default, `None`, results in an empty string.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Additional attributes passed to [](:func:`~shiny.ui.layout_sidebar`).

## Returns

| Type                   | Description   |
|------------------------|---------------|
| [Tag](`htmltools.Tag`) | A UI element. |

## Examples

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_sidebar(
    ui.sidebar(
        ui.input_slider("n", "N", min=0, max=100, value=20),
    ),
    ui.card(
        ui.output_plot("plot"),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @output
    @render.plot(alt="A histogram")
    def plot() -> object:
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


app = App(app_ui, server)
```