# ui.update_slider { #shiny.ui.update_slider }

`ui.update_slider(id, *, label=None, value=None, min=None, max=None, step=None, time_format=None, timezone=None, session=None)`

Change the value of a slider input on the client.

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   An input id.

<code><span class="parameter-name">label</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   An input label.

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[SliderValueArg](`shiny.ui._input_slider.SliderValueArg`) \| [tuple](`tuple`)\[[SliderValueArg](`shiny.ui._input_slider.SliderValueArg`), [SliderValueArg](`shiny.ui._input_slider.SliderValueArg`)\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A new value.

<code><span class="parameter-name">min</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[SliderValueArg](`shiny.ui._input_slider.SliderValueArg`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The minimum allowed value.

<code><span class="parameter-name">max</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[SliderValueArg](`shiny.ui._input_slider.SliderValueArg`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum allowed value.

<code><span class="parameter-name">step</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[SliderStepArg](`shiny.ui._input_slider.SliderStepArg`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Specifies the interval between each selectable value on the slider. Either
    ``None`` (the default), which uses a heuristic to determine the step size or a
    single number. If the values are dates, step is in days; if the values are
    date-times, step is in seconds.

<code><span class="parameter-name">time_format</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Only used if the slider values are [](:class:`~datetime.date`) or
    [](:class:`~datetime.datetime`) objects. A time format string, to be passed to the
    Javascript strftime library. See https://github.com/samsonjs/strftime for more
    details. For Dates, the default is "%F" (like "2015-07-01"), and for Datetimes,
    the default is "%F %T" (like "2015-07-01 15:32:10").

<code><span class="parameter-name">timezone</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Only used if the values are [](:class:`~datetime.datetime`) objects. A string
    specifying the time zone offset for the displayed times, in the format "+HHMM"
    or "-HHMM". If ``None`` (the default), times will be displayed in the browser's
    time zone. The value "+0000" will result in UTC time.

<code><span class="parameter-name">session</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A [](:class:`~shiny.Session`) instance. If not provided, it is inferred via
    [](:func:`~shiny.session.get_current_session`).

## Note


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~update_radio_buttons`), [](:func:`~update_checkbox_group`), and
[](:func:`~update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.




## See Also

[](:func:`~shiny.ui.input_slider`)

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fixed(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.tags.p("The first slider controls the second"),
            ui.input_slider("control", "Controller:", min=0, max=20, value=10, step=1),
            ui.input_slider("receive", "Receiver:", min=0, max=20, value=10, step=1),
        ),
        ui.panel_main("Main app content"),
    )
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.Effect
    def _():
        val = input.control()
        # Control the value, min, max, and step.
        # Step size is 2 when input value is even; 1 when value is odd.
        ui.update_slider(
            "receive", value=val, min=int(val / 2), max=val + 4, step=(val + 1) % 2 + 1
        )


app = App(app_ui, server)

```

