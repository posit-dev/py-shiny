# Context manager components



# express.ui.sidebar { #shiny.express.ui.sidebar }

`express.ui.sidebar(width=250, position='left', open='always', id=None, title=None, bg=None, fg=None, class_=None, max_height_mobile='auto', gap=None, padding=None)`

Context manager for sidebar element

This function wraps [](:func:`~shiny.ui.sidebar`).

## Parameters

<code><span class="parameter-name">width</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[CssUnit](`shiny.ui.css.CssUnit`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">250</span></code>

:   A valid CSS unit used for the width of the sidebar.

<code><span class="parameter-name">position</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['left', 'right'\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'left'</span></code>

:   Where the sidebar should appear relative to the main content.

<code><span class="parameter-name">open</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['desktop', 'open', 'closed', 'always'\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'always'</span></code>

:   The initial state of the sidebar.

    * `"desktop"`: the sidebar starts open on desktop screen, closed on mobile
    * `"open"` or `True`: the sidebar starts open
    * `"closed"` or `False`: the sidebar starts closed
    * `"always"` or `None`: the sidebar is always open and cannot be closed

    In [](:func:`~shiny.ui.update_sidebar`), `open` indicates the desired state of the
    sidebar. Note that [](:func:`~shiny.ui.update_sidebar`) can only open or close the
    sidebar, so it does not support the `"desktop"` and `"always"` options.

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A character string. Required if wanting to re-actively read (or update) the
    `collapsible` state in a Shiny app.

<code><span class="parameter-name">title</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`) \| [str](`str`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A character title to be used as the sidebar title, which will be wrapped in a
    `<div>` element with class `sidebar-title`. You can also provide a custom
    [](:class:`~htmltools.Tag`) for the title element, in which case you'll
    likely want to give this element `class = "sidebar-title"`.

<code><span class="parameter-name">bg</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A background or foreground color.

<code><span class="parameter-name">class_</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   CSS classes for the sidebar container element, in addition to the fixed
    `.sidebar` class.

<code><span class="parameter-name">max_height_mobile</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`) \| [float](`float`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'auto'</span></code>

:   A CSS length unit (passed through [](:func:`~shiny.ui.css.as_css_unit`)) defining
    the maximum height of the horizontal sidebar when viewed on mobile devices. Only
    applies to always-open sidebars that use `open = "always"`, where by default the
    sidebar container is placed below the main content container on mobile devices.

<code><span class="parameter-name">gap</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A CSS length unit defining the vertical `gap` (i.e., spacing) between elements
    provided to `*args`.

<code><span class="parameter-name">padding</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Padding within the sidebar itself. This can be a numeric vector (which will be
    interpreted as pixels) or a character vector with valid CSS lengths. `padding`
    may be one to four values.

    * If a single value, then that value will be used for all four sides.
    * If two, then the first value will be used for the top and bottom, while
      the second value will be used for left and right.
    * If three values, then the first will be used for top, the second will be left
      and right, and the third will be bottom.
    * If four, then the values will be interpreted as top, right, bottom, and left
      respectively.

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.card(
        ui.layout_sidebar(
            ui.sidebar("Left sidebar content", id="sidebar_left"),
            ui.output_text_verbatim("state_left"),
        )
    ),
    ui.card(
        ui.layout_sidebar(
            ui.sidebar("Right sidebar content", id="sidebar_right", position="right"),
            ui.output_text_verbatim("state_right"),
        ),
    ),
    ui.card(
        ui.layout_sidebar(
            ui.sidebar("Closed sidebar content", id="sidebar_closed", open="closed"),
            ui.output_text_verbatim("state_closed"),
        )
    ),
    ui.card(
        ui.layout_sidebar(
            ui.sidebar("Always sidebar content", id="sidebar_always", open="always"),
            ui.output_text_verbatim("state_always"),
        )
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.text
    def state_left():
        return f"input.sidebar_left(): {input.sidebar_left()}"

    @render.text
    def state_right():
        return f"input.sidebar_right(): {input.sidebar_right()}"

    @render.text
    def state_closed():
        return f"input.sidebar_closed(): {input.sidebar_closed()}"

    @render.text
    def state_always():
        return f"input.sidebar_always(): {input.sidebar_always()}"


app = App(app_ui, server)

```



# express.ui.layout_sidebar { #shiny.express.ui.layout_sidebar }

`express.ui.layout_sidebar(fillable=True, fill=True, bg=None, fg=None, border=None, border_radius=None, border_color=None, gap=None, padding=None, height=None, **kwargs)`

Context manager for sidebar layout

This function wraps [](:func:`~shiny.ui.layout_sidebar`).

Create a sidebar layout component which can be dropped inside any Shiny UI page
method (e.g. [](:func:`~shiny.shiny.ui.page_fillable`)) or [](:func:`~shiny.ui.card`)
context.

The first child needs to be of class [](:class:`~shiny.ui.Sidebar`) object created by
[](:func:`~shiny.express.ui.sidebar`). The remaining arguments will contain the contents
to the main content area. Or tag attributes that are supplied to the resolved
[](:class:`~htmltools.Tag`) object.

## Parameters

<code><span class="parameter-name">fillable</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether or not the main content area should be wrapped in a fillable container.
    See [](:func:`~shiny.ui.as_fillable_container`) for details.

<code><span class="parameter-name">fill</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether or not the sidebar layout should be wrapped in a fillable container. See
    [](:func:`~shiny.ui.as_fill_item`) for details.

<code><span class="parameter-name">bg</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A background or foreground color.

<code><span class="parameter-name">border</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[bool](`bool`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Whether or not to show a border around the sidebar layout.

<code><span class="parameter-name">border_radius</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[bool](`bool`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Whether or not to round the corners of the sidebar layout.

<code><span class="parameter-name">border_color</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A border color.

<code><span class="parameter-name">gap</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A CSS length unit defining the vertical `gap` (i.e., spacing) between elements
    provided to `*args`. This value will only be used if `fillable` is `True`.

<code><span class="parameter-name">padding</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Padding within the sidebar itself. This can be a numeric vector (which will be
    interpreted as pixels) or a character vector with valid CSS lengths. `padding`
    may be one to four values. If one, then that value will be used for all four
    sides. If two, then the first value will be used for the top and bottom, while
    the second value will be used for left and right. If three, then the first will
    be used for top, the second will be left and right, and the third will be
    bottom. If four, then the values will be interpreted as top, right, bottom, and
    left respectively.

<code><span class="parameter-name">height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit to use for the height.

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.sidebar(
            ui.input_slider("n", "N", min=0, max=100, value=20),
        ),
        ui.output_plot("plot"),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot(alt="A histogram")
    def plot() -> object:
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


app = App(app_ui, server)

```



# express.ui.layout_column_wrap { #shiny.express.ui.layout_column_wrap }

`express.ui.layout_column_wrap(width=MISSING, fixed_width=False, heights_equal='all', fill=True, fillable=True, height=None, height_mobile=None, gap=None, class_=None, **kwargs)`

Context manager for a grid-like, column-first layout

This function wraps [](:func:`~shiny.ui.layout_column_wrap`).

Wraps a 1d sequence of UI elements into a 2d grid. The number of columns (and rows)
in the grid dependent on the column `width` as well as the size of the display.

## Parameters

<code><span class="parameter-name">width</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[CssUnit](`shiny.ui.css.CssUnit`) \| None \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">MISSING</span></code>

:   The desired width of each card. It can be one of the following:

    * A (unit-less) number between 0 and 1, specified as `1/num`, where `num`
      represents the number of desired columns.
    * A CSS length unit representing either the minimum (when `fixed_width=False`)
      or fixed width (`fixed_width=True`).
    * `None`, which allows power users to set the `grid-template-columns` CSS
      property manually, either via a `style` attribute or a CSS stylesheet.
    * If missing, a value of `200px` will be used.

<code><span class="parameter-name">fixed_width</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   When `width` is greater than 1 or is a CSS length unit, e.g. `"200px"`,
    `fixed_width` indicates whether that `width` value represents the absolute size
    of each column (`fixed_width=TRUE`) or the minimum size of a column
    (`fixed_width=FALSE`).

    When `fixed_width=FALSE`, new columns are added to a row when `width` space is
    available and columns will never exceed the container or viewport size.

    When `fixed_width=TRUE`, all columns will be exactly `width` wide, which may
    result in columns overflowing the parent container.

<code><span class="parameter-name">heights_equal</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['all', 'row'\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'all'</span></code>

:   If `"all"` (the default), every card in every row of the grid will have the same
    height. If `"row"`, then every card in _each_ row of the grid will have the same
    height, but heights may vary between rows.

<code><span class="parameter-name">fill</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether or not to allow the layout to grow/shrink to fit a fillable container
    with an opinionated height (e.g., [](:func:`~shiny.ui.page_fillable`)).

<code><span class="parameter-name">fillable</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether or not each element is wrapped in a fillable container.

<code><span class="parameter-name">height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit to use for the height.

<code><span class="parameter-name">height_mobile</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit to use for the height when on mobile devices (or narrow
    windows).

<code><span class="parameter-name">gap</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit to use for the gap between columns.

<code><span class="parameter-name">class_</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A CSS class to apply to the containing element.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Additional attributes to apply to the containing element.

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, ui

y = ui.card("A simple card")

app_ui = ui.page_fluid(
    # Always has 2 columns (on non-mobile)
    ui.layout_column_wrap(y, y, y, width=1 / 2),
    ui.hr(),
    # Has three columns when viewport is wider than 750px
    ui.layout_column_wrap(y, y, y, width="250px"),
)


app = App(app_ui, server=None)

```



# express.ui.layout_columns { #shiny.express.ui.layout_columns }

`express.ui.layout_columns(col_widths=None, row_heights=None, fill=True, fillable=True, gap=None, class_=None, height=None, **kwargs)`

Context manager for responsive, column-based grid layouts, based on a 12-column
grid.

This function wraps [](:func:`~shiny.ui.layout_columns`).

## Parameters

<code><span class="parameter-name">col_widths</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[BreakpointsUser](`shiny.ui._layout_columns.BreakpointsUser`)\[[int](`int`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The widths of the columns, possibly at different breakpoints. Can be one of the
    following:

    * `None` (the default): Automatically determines a sensible number of columns
      based on the number of children given to the layout.
    * A list or tuple of integers between 1 and 12, where each element represents
      the number of columns for the relevant UI element. Column widths are recycled
      to extend the values in `col_widths` to match the actual number of items in
      the layout, and children are wrapped onto the next row when a row exceeds 12
      column units. For example, `col_widths=(4, 8, 12)` allocates 4 columns to the
      first element, 8 columns to the second element, and 12 columns to the third
      element (which wraps to the next row). Negative values are also allowed, and
      are treated as empty columns. For example, `col_widths=(-2, 8, -2)` would
      allocate 8 columns to an element (with 2 empty columns on either side).
    * A dictionary of column widths at different breakpoints. The keys should be one
      of `"xs"`, `"sm"`, `"md"`, `"lg"`, `"xl"`, or `"xxl"`, and the values are
      either of the above. For example, `col_widths={"sm": (3, 3, 6), "lg": (4)}`.

<code><span class="parameter-name">row_heights</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[BreakpointsUser](`shiny.ui._layout_columns.BreakpointsUser`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The heights of the rows, possibly at different breakpoints. Can be one of the
    following:

    * A numeric vector, where each value represents the [fractional
      unit](https://css-tricks.com/introduction-fr-css-unit/) (`fr`) height of the
      relevant row. If there are more rows than values provided, the pattern will be
      repeated. For example, `row_heights=(1, 2)` allows even rows to take up twice
      as much space as odd rows.
    * A list of numeric or CSS length units, where each value represents the height
      of the relevant row. If more rows are needed than values provided, the pattern
      will repeat. For example, `row_heights=["auto", 1]` allows the height of odd
      rows to be driven my it's contents and even rows to be
      [`1fr`](https://css-tricks.com/introduction-fr-css-unit/).
    * A single string containing CSS length units. In this case, the value is
      supplied directly to `grid-auto-rows`.
    * A dictionary of row heights at different breakpoints, where each key is a
      breakpoint name (one of `"xs"`, `"sm"`, `"md"`, `"lg"`, `"xl"`, or `"xxl"`)
      and where the values may be any of the above options.

<code><span class="parameter-name">fill</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether or not to allow the layout to grow/shrink to fit a fillable container
    with an opinionated height (e.g., [](:func:`~shiny.ui.page_fillable`)).

<code><span class="parameter-name">fillable</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether or not each element is wrapped in a fillable container.

<code><span class="parameter-name">gap</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit to use for the gap between columns.

<code><span class="parameter-name">class_</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   CSS class(es) to apply to the containing element.

<code><span class="parameter-name">height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit to use for the height.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Additional attributes to apply to the containing element.

## Returns

| Type                                                                                                   | Description                         |
|--------------------------------------------------------------------------------------------------------|-------------------------------------|
| [RecallContextManager](`shiny.express._recall_context.RecallContextManager`)\[[Tag](`htmltools.Tag`)\] | An [](:class:`~htmltools.Tag`) element. |

## See Also

* [](:func:`~shiny.express.layout.layout_column_wrap`) for laying out elements into a
  uniform grid.



## Reference

* [Bootstrap CSS Grid](https://getbootstrap.com/docs/5.3/layout/grid/)
* [Bootstrap Breakpoints](https://getbootstrap.com/docs/5.3/layout/breakpoints/)

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from model_plots import *  # model plots and cards

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.panel_title(ui.h2("Model Dashboard")),
    ui.markdown("Using `ui.layout_columns()` for the layout."),
    ui.layout_columns(
        card_loss,
        card_acc,
        card_feat,
        col_widths={"sm": (5, 7, 12)},
        # row_heights=(2, 3),
        # height="700px",
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot
    def loss_over_time():
        return plot_loss_over_time()

    @render.plot
    def accuracy_over_time():
        return plot_accuracy_over_time()

    @render.plot
    def feature_importance():
        return plot_feature_importance()


app = App(app_ui, server)

## file: model_plots.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import ui


def plot_loss_over_time():
    epochs = np.arange(1, 101)
    loss = 1000 / np.sqrt(epochs) + np.random.rand(100) * 25

    fig = plt.figure(figsize=(10, 6))
    plt.plot(epochs, loss)
    plt.xlabel("Epochs")
    plt.ylabel("Loss")
    return fig


def plot_accuracy_over_time():
    epochs = np.arange(1, 101)
    accuracy = np.sqrt(epochs) / 12 + np.random.rand(100) * 0.15
    accuracy = [np.min([np.max(accuracy[:i]), 1]) for i in range(1, 101)]

    fig = plt.figure(figsize=(10, 6))
    plt.plot(epochs, accuracy)
    plt.xlabel("Epochs")
    plt.ylabel("Accuracy")
    return fig


def plot_feature_importance():
    features = ["Product Category", "Price", "Brand", "Rating", "Number of Reviews"]
    importance = np.random.rand(5)

    fig = plt.figure(figsize=(10, 6))
    plt.barh(features, importance)
    plt.xlabel("Importance")
    return fig


card_loss = ui.card(
    ui.card_header("Loss Over Time"),
    ui.output_plot("loss_over_time"),
    full_screen=True,
)

card_acc = ui.card(
    ui.card_header("Accuracy Over Time"),
    ui.output_plot("accuracy_over_time"),
    full_screen=True,
)

card_feat = ui.card(
    ui.card_header("Feature Importance"),
    ui.output_plot("feature_importance"),
    full_screen=True,
)

```



# express.ui.card { #shiny.express.ui.card }

`express.ui.card(full_screen=False, height=None, max_height=None, min_height=None, fill=True, class_=None, **kwargs)`

Context manager for Bootstrap card component

This function wraps [](:func:`~shiny.ui.card`).

A general purpose container for grouping related UI elements together with a border
and optional padding. To learn more about `card()`s, see [this
article](https://rstudio.github.io/bslib/articles/cards.html).

## Parameters

<code><span class="parameter-name">full_screen</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   If `True`, an icon will appear when hovering over the card body. Clicking the
    icon expands the card to fit viewport size.

<code><span class="parameter-name">height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit (e.g., `height="200px"`). Doesn't apply when a card is made
    `full_screen` (in this case, consider setting a `height` in
    [](:func:`~shiny.experimental.ui.card_body`)).

<code><span class="parameter-name">fill</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether or not to allow the card to grow/shrink to fit a fillable container with
    an opinionated height (e.g., [](:func:`~shiny.ui.page_fillable`)).

<code><span class="parameter-name">class_</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Additional CSS classes for the returned Tag.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   HTML attributes on the returned Tag.

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, ui

app_ui = ui.page_fluid(
    ui.card(
        ui.card_header("This is the header"),
        ui.p("This is the body."),
        ui.p("This is still the body."),
        ui.card_footer("This is the footer"),
        full_screen=True,
    ),
)


app = App(app_ui, server=None)

```



# express.ui.accordion { #shiny.express.ui.accordion }

`express.ui.accordion(id=None, open=None, multiple=True, class_=None, width=None, height=None, **kwargs)`

Context manager for a vertically collapsing accordion.

This function wraps [](:func:`~shiny.ui.accordion`).

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   If provided, you can use `input.id()` in your server logic to determine which of
    the [](:func:`~shiny.ui.accordion_panel`)s are currently active. The
    value will correspond to the [](:func:`~shiny.ui.accordion_panel`)'s
    `value` argument.

<code><span class="parameter-name">open</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[bool](`bool`) \| [str](`str`) \| [list](`list`)\[[str](`str`)\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A list of [](:func:`~shiny.ui.accordion_panel`) values to open (i.e.,
    show) by default. The default value of `None` will open the first
    [](:func:`~shiny.ui.accordion_panel`). Use a value of `True` to open
    all (or `False` to open none) of the items. It's only possible to open more than
    one panel when `multiple=True`.

<code><span class="parameter-name">multiple</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether multiple [](:func:`~shiny.ui.accordion_panel`) can be open at
    once.

<code><span class="parameter-name">class_</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Additional CSS classes to include on the accordion div.

<code><span class="parameter-name">width</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit; for example, height="100%".

<code><span class="parameter-name">height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit; for example, height="100%".

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Attributes to this tag.

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, render, ui


def make_items():
    return [
        ui.accordion_panel(f"Section {letter}", f"Some narrative for section {letter}")
        for letter in "ABCDE"
    ]


# # First shown by default
# ui.accordion(*make_items())

# # Nothing shown by default
# ui.accordion(*make_items(), open=False)
# # Everything shown by default
# ui.accordion(*make_items(), open=True)

# # Show particular sections
# ui.accordion(*make_items(), open="Section B")
# ui.accordion(*make_items(), open=["Section A", "Section B"])


app_ui = ui.page_fluid(
    ui.markdown("#### Accordion: (`multiple=False`)"),
    # Provide an id to create a shiny input binding
    ui.accordion(*make_items(), id="acc_single", multiple=False),
    ui.output_text_verbatim("acc_single_val", placeholder=True),
    ui.tags.br(),
    ui.markdown("#### Accordion: (`multiple=True`)"),
    ui.accordion(*make_items(), id="acc_multiple"),
    ui.output_text_verbatim("acc_multiple_val", placeholder=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.Effect
    def _():
        print(input.acc())

    @render.text
    def acc_multiple_val():
        return "input.acc_multiple(): " + str(input.acc_multiple())

    @render.text
    def acc_single_val():
        return "input.acc_single(): " + str(input.acc_single())


app = App(app_ui, server)

```



# express.ui.accordion_panel { #shiny.express.ui.accordion_panel }

`express.ui.accordion_panel(title, *, value=MISSING, icon=None, **kwargs)`

Context manager for single accordion panel.

This function wraps [](:func:`~shiny.ui.accordion_panel`).

## Parameters

<code><span class="parameter-name">title</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span></code>

:   A title to appear in the [](:func:`~shiny.ui.accordion_panel`)'s header.

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\] \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">MISSING</span></code>

:   A character string that uniquely identifies this panel. If `MISSING`, the
    `title` will be used.

<code><span class="parameter-name">icon</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A [](:class:`~htmltools.Tag`) which is positioned just before the `title`.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Tag attributes to the `accordion-body` div Tag.

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, render, ui

items = [
    ui.accordion_panel(f"Section {letter}", f"Some narrative for section {letter}")
    for letter in "ABCDE"
]

app_ui = ui.page_fluid(
    # Provide an id to create a shiny input binding
    ui.accordion(*items, id="acc"),
    ui.h4("Accordion:"),
    ui.output_text_verbatim("acc_val", placeholder=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.Effect
    def _():
        print(input.acc())

    @render.text
    def acc_val():
        return "input.acc(): " + str(input.acc())


app = App(app_ui, server)

```



# express.ui.nav_panel { #shiny.express.ui.nav_panel }

`express.ui.nav_panel(title, *, value=None, icon=None)`

Context manager for nav item pointing to some internal content.

This function wraps [](:func:`~shiny.ui.nav`).

## Parameters

<code><span class="parameter-name">title</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span></code>

:   A title to display. Can be a character string or UI elements (i.e., tags).

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The value of the item. This is used to determine whether the item is active
    (when an ``id`` is provided to the nav container), programmatically select the
    item (e.g., [](:func:`~shiny.ui.update_navs`)), and/or be provided to the
    ``selected`` argument of the navigation container (e.g.,
    [](:func:`~shiny.ui.navset_tab`)).

<code><span class="parameter-name">icon</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   An icon to appear inline with the button/link.

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from typing import List

from shiny import App, Inputs, Outputs, Session, reactive, ui
from shiny.types import NavSetArg


def nav_controls(prefix: str) -> List[NavSetArg]:
    return [
        ui.nav_panel("a", prefix + ": tab a content"),
        ui.nav_panel("b", prefix + ": tab b content"),
        ui.nav_panel("c", prefix + ": tab c content"),
        ui.nav_spacer(),
        ui.nav_menu(
            "Links",
            ui.nav_control(
                ui.a(
                    "Shiny",
                    href="https://shiny.posit.co/py/",
                    target="_blank",
                )
            ),
            "----",
            "Plain text",
            "----",
            ui.nav_control(
                ui.a(
                    "Posit",
                    href="https://posit.co",
                    target="_blank",
                )
            ),
            align="right",
        ),
    ]


app_ui = ui.page_navbar(
    *nav_controls("page_navbar"),
    title="page_navbar()",
    id="navbar_id",
    footer=ui.div(
        {"style": "width:80%;margin: 0 auto"},
        ui.tags.style(
            """
            h4 {
                margin-top: 3em;
            }
            """
        ),
        ui.h4("navset_tab()"),
        ui.navset_tab(*nav_controls("navset_tab()")),
        ui.h4("navset_pill()"),
        ui.navset_pill(*nav_controls("navset_pill()")),
        ui.h4("navset_underline()"),
        ui.navset_underline(*nav_controls("navset_underline()")),
        ui.h4("navset_card_tab()"),
        ui.navset_card_tab(*nav_controls("navset_card_tab()")),
        ui.h4("navset_card_pill()"),
        ui.navset_card_pill(*nav_controls("navset_card_pill()")),
        ui.h4("navset_card_underline()"),
        ui.navset_card_underline(*nav_controls("navset_card_underline()")),
        ui.h4("navset_pill_list()"),
        ui.navset_pill_list(*nav_controls("navset_pill_list()")),
    )
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.Effect
    def _():
        print("Current navbar page: ", input.navbar_id())


app = App(app_ui, server)

## file: __pycache__/app-basic.cpython-311.pyc
## type: binary
pw0NCgAAAAB74qZlKQEAAOMAAAAAAAAAAAAAAAAKAAAAAAAAAPPWAAAAlwBkAGQBbABtAVoBbQJaAm0DWgMBAAIAZQNqBAAAAAAAAAAAAgBlA2oFAAAAAAAAAABkAqYBAACrAQAAAAAAAAAAAgBlA2oGAAAAAAAAAAACAGUDagcAAAAAAAAAAGQDZASmAgAAqwIAAAAAAAAAAAIAZQNqBwAAAAAAAAAAZAVkBqYCAACrAgAAAAAAAAAApgIAAKsCAAAAAAAAAACmAgAAqwIAAAAAAAAAAFoIZAdlAmYCZAiEBFoJAgBlAWUIZQmmAgAAqwIAAAAAAAAAAFoKZAlTACkK6QAAAAApA9oDQXBw2gZJbnB1dHPaAnVpehFCYXNpYyBOYXYgRXhhbXBsZdoDT25lehJGaXJzdCB0YWIgY29udGVudC7aA1R3b3oTU2Vjb25kIHRhYiBjb250ZW50LtoFaW5wdXRjAQAAAAAAAAAAAAAAAQAAAAMAAADzBgAAAJcAZABTACkBTqkAKQFyCAAAAHMBAAAAIPpuL1VzZXJzL2dhcnJpY2svd29yay9wb3NpdC1kZXYvcHktc2hpbnkud29ya3RyZWVzL2V4cHJlc3MvcGFuZWwtdGl0bGUvc2hpbnkvYXBpLWV4YW1wbGVzL25hdl9wYW5lbC9hcHAtYmFzaWMucHnaBnNlcnZlcnIMAAAADAAAAHMHAAAAgADYBAiARPMAAAAATikL2gVzaGlueXIDAAAAcgQAAAByBQAAANoKcGFnZV9maXhlZNoLcGFuZWxfdGl0bGXaCm5hdnNldF90YWLaCW5hdl9wYW5lbNoGYXBwX3VpcgwAAADaA2FwcHIKAAAAcg0AAAByCwAAAPoIPG1vZHVsZT5yFQAAAAEAAABzrQAAAPADAQEB2AAh0AAh0AAh0AAh0AAh0AAh0AAh0AAh0AAh0AAh4AkWiBKMHdgEEoBChE7QEybRBCfUBCfYBBGAQoRN2AgUiAKMDJBV0Bww0Qgx1Agx2AgUiAKMDJBV0Bwx0Qgy1Agy8QUDBQb0AAMFBvEFBgoC9AAGCgKABvASAQEJkCbwAAEBCfAAAQEJ8AABAQnwAAEBCfAIAAcKgGOIJpAm0QYZ1AYZgAOAA4ADcg0AAAA=
## file: app-basic.py
from shiny import App, Inputs, ui

app_ui = ui.page_fixed(
    ui.panel_title("Basic Nav Example"),
    ui.navset_tab(
        ui.nav_panel("One", "First tab content."),
        ui.nav_panel("Two", "Second tab content."),
    ),
)


def server(input: Inputs):
    pass


app = App(app_ui, server)

```



# express.ui.nav_control { #shiny.express.ui.nav_control }

`express.ui.nav_control()`

Context manager for a control in the navigation container.

This function wraps [](:func:`~shiny.ui.nav_control`).

# express.ui.nav_menu { #shiny.express.ui.nav_menu }

`express.ui.nav_menu(title, *, value=None, icon=None, align='left')`

Context manager for a menu of nav items.

This function wraps [](:func:`~shiny.ui.nav_menu`).

## Parameters

<code><span class="parameter-name">title</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span></code>

:   A title to display. Can be a character string or UI elements (i.e., tags).

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The value of the item. This is used to determine whether the item is active
    (when an ``id`` is provided to the nav container), programmatically select the
    item (e.g., [](:func:`~shiny.ui.update_navs`)), and/or be provided to the
    ``selected`` argument of the navigation container (e.g.,
    [](:func:`~shiny.ui.navset_tab`)).

<code><span class="parameter-name">icon</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   An icon to appear inline with the button/link.

<code><span class="parameter-name">align</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['left', 'right'\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'left'</span></code>

:   Horizontal alignment of the dropdown menu relative to dropdown toggle.

# express.ui.navset_bar { #shiny.express.ui.navset_bar }

`express.ui.navset_bar(title, id=None, selected=None, sidebar=None, fillable=True, gap=None, padding=None, position='static-top', header=None, footer=None, bg=None, inverse=False, underline=True, collapsible=True, fluid=True)`

Context manager for a set of nav items as a tabset inside a card container.

This function wraps [](:func:`~shiny.ui.navset_bar`).

## Parameters

<code><span class="parameter-name">title</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span></code>

:   Title to display in the navbar.

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   If provided, will create an input value that holds the currently selected nav
    item.

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Choose a particular nav item to select by default value (should match it's
    ``value``).

<code><span class="parameter-name">sidebar</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[ui](`shiny.ui`).[Sidebar](`shiny.ui.Sidebar`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A [](:class:`~shiny.ui.Sidebar`) component to display on every
    [](:func:`~shiny.ui.nav_panel`) page.

<code><span class="parameter-name">fillable</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`) \| [list](`list`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether or not to allow fill items to grow/shrink to fit the browser window. If
    `True`, all `nav()` pages are fillable. A character vector, matching the value
    of `nav()`s to be filled, may also be provided. Note that, if a `sidebar` is
    provided, `fillable` makes the main content portion fillable.

<code><span class="parameter-name">gap</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A CSS length unit defining the gap (i.e., spacing) between elements provided to
    `*args`.

<code><span class="parameter-name">padding</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Padding to use for the body. This can be a numeric vector (which will be
    interpreted as pixels) or a character vector with valid CSS lengths. The length
    can be between one and four. If one, then that value will be used for all four
    sides. If two, then the first value will be used for the top and bottom, while
    the second value will be used for left and right. If three, then the first will
    be used for top, the second will be left and right, and the third will be
    bottom. If four, then the values will be interpreted as top, right, bottom, and
    left respectively.

<code><span class="parameter-name">position</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['static-top', 'fixed-top', 'fixed-bottom', 'sticky-top'\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'static-top'</span></code>

:   Determines whether the navbar should be displayed at the top of the page with
    normal scrolling behavior ("static-top"), pinned at the top ("fixed-top"), or
    pinned at the bottom ("fixed-bottom"). Note that using "fixed-top" or
    "fixed-bottom" will cause the navbar to overlay your body content, unless you
    add padding (e.g., ``tags.style("body {padding-top: 70px;}")``).

<code><span class="parameter-name">header</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display above the selected content.

<code><span class="parameter-name">footer</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display below the selected content.

<code><span class="parameter-name">bg</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Background color of the navbar (a CSS color).

<code><span class="parameter-name">inverse</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Either ``True`` for a light text color or ``False`` for a dark text color.

<code><span class="parameter-name">collapsible</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   ``True`` to automatically collapse the navigation elements into an expandable
    menu on mobile devices or narrow window widths.

<code><span class="parameter-name">fluid</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   ``True`` to use fluid layout; ``False`` to use fixed layout.

# express.ui.navset_card_pill { #shiny.express.ui.navset_card_pill }

`express.ui.navset_card_pill(id=None, selected=None, title=None, sidebar=None, header=None, footer=None)`

Context manager for a set of nav items as a tabset inside a card container.

This function wraps [](:func:`~shiny.ui.navset_card_pill`).

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   If provided, will create an input value that holds the currently selected nav
    item.

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Choose a particular nav item to select by default value (should match it's
    ``value``).

<code><span class="parameter-name">sidebar</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[ui](`shiny.ui`).[Sidebar](`shiny.ui.Sidebar`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A [](:class:`shiny.ui.Sidebar`) component to display on every [](:func:`~shiny.ui.nav`) page.

<code><span class="parameter-name">header</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display above the selected content.

<code><span class="parameter-name">footer</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display below the selected content.

# express.ui.navset_card_tab { #shiny.express.ui.navset_card_tab }

`express.ui.navset_card_tab(id=None, selected=None, title=None, sidebar=None, header=None, footer=None)`

Context manager for a set of nav items as a tabset inside a card container.

This function wraps [](:func:`~shiny.ui.navset_card_tab`).

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   If provided, will create an input value that holds the currently selected nav
    item.

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Choose a particular nav item to select by default value (should match it's
    ``value``).

<code><span class="parameter-name">sidebar</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[ui](`shiny.ui`).[Sidebar](`shiny.ui.Sidebar`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A [](:class:`shiny.ui.Sidebar`) component to display on every [](:func:`~shiny.ui.nav`) page.

<code><span class="parameter-name">header</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display above the selected content.

<code><span class="parameter-name">footer</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display below the selected content.

# express.ui.navset_card_underline { #shiny.express.ui.navset_card_underline }

`express.ui.navset_card_underline(id=None, selected=None, title=None, sidebar=None, header=None, footer=None, placement='above')`

Context manager for a set of nav items as a tabset inside a card container.

This function wraps [](:func:`~shiny.ui.navset_card_underline`).

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   If provided, will create an input value that holds the currently selected nav
    item.

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Choose a particular nav item to select by default value (should match it's
    ``value``).

<code><span class="parameter-name">sidebar</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[ui](`shiny.ui`).[Sidebar](`shiny.ui.Sidebar`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A [](:class:`shiny.ui.Sidebar`) component to display on every [](:func:`~shiny.ui.nav`) page.

<code><span class="parameter-name">header</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display above the selected content.

<code><span class="parameter-name">footer</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display below the selected content.

<code><span class="parameter-name">placement</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['above', 'below'\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'above'</span></code>

:   Placement of the nav items relative to the content.

# express.ui.navset_hidden { #shiny.express.ui.navset_hidden }

`express.ui.navset_hidden(id=None, selected=None, header=None, footer=None)`

Context manager for nav contents without the nav items.

This function wraps [](:func:`~shiny.ui.navset_hidden`).

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   If provided, will create an input value that holds the currently selected nav
    item.

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Choose a particular nav item to select by default value (should match it's
    ``value``).

<code><span class="parameter-name">header</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display above the selected content.

<code><span class="parameter-name">footer</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display below the selected content.

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_radio_buttons(
                "controller", "Controller", ["1", "2", "3"], selected="1"
            )
        ),
        ui.panel_main(
            ui.navset_hidden(
                ui.nav_panel(None, "Panel 1 content", value="panel1"),
                ui.nav_panel(None, "Panel 2 content", value="panel2"),
                ui.nav_panel(None, "Panel 3 content", value="panel3"),
                id="hidden_tabs",
            ),
        ),
    )
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.Effect
    @reactive.event(input.controller)
    def _():
        ui.update_navs("hidden_tabs", selected="panel" + str(input.controller()))


app = App(app_ui, server)

```



# express.ui.navset_pill { #shiny.express.ui.navset_pill }

`express.ui.navset_pill(id=None, selected=None, header=None, footer=None)`

Context manager for a set of nav items as a pillset.

This function wraps [](:func:`~shiny.ui.navset_pill`).

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   If provided, will create an input value that holds the currently selected nav
    item.

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Choose a particular nav item to select by default value (should match it's
    ``value``).

<code><span class="parameter-name">header</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display above the selected content.

<code><span class="parameter-name">footer</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display below the selected content.

# express.ui.navset_pill_list { #shiny.express.ui.navset_pill_list }

`express.ui.navset_pill_list(id=None, selected=None, header=None, footer=None, well=True, widths=(4, 8))`

Context manager for a set of nav items as a tabset inside a card container.

This function wraps [](:func:`~shiny.ui.navset_pill_list`).

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   If provided, will create an input value that holds the currently selected nav
    item.

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Choose a particular nav item to select by default value (should match its
    ``value``).

<code><span class="parameter-name">header</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display above the selected content.

<code><span class="parameter-name">footer</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display below the selected content.

<code><span class="parameter-name">well</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   ``True`` to place a well (gray rounded rectangle) around the navigation list.

<code><span class="parameter-name">widths</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[tuple](`tuple`)\[[int](`int`), [int](`int`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">(4, 8)</span></code>

:   Column widths of the navigation list and tabset content areas respectively.

# express.ui.navset_tab { #shiny.express.ui.navset_tab }

`express.ui.navset_tab(id=None, selected=None, header=None, footer=None)`

Context manager for a set of nav items as a tabset.

This function wraps [](:func:`~shiny.ui.navset_tab`).

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   If provided, will create an input value that holds the currently selected nav
    item.

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Choose a particular nav item to select by default value (should match it's
    ``value``).

<code><span class="parameter-name">header</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display above the selected content.

<code><span class="parameter-name">footer</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display below the selected content.

# express.ui.navset_underline { #shiny.express.ui.navset_underline }

`express.ui.navset_underline(id=None, selected=None, header=None, footer=None)`

Context manager for a set of nav items whose active/focused navigation links are
styled with an underline.

This function wraps [](:func:`~shiny.ui.navset_underline`).

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   If provided, will create an input value that holds the currently selected nav
    item.

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Choose a particular nav item to select by default value (should match it's
    ``value``).

<code><span class="parameter-name">header</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display above the selected content.

<code><span class="parameter-name">footer</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   UI to display below the selected content.

# express.ui.value_box { #shiny.express.ui.value_box }

`express.ui.value_box(showcase=None, showcase_layout='left center', full_screen=False, theme=None, height=None, max_height=None, fill=True, class_=None, **kwargs)`

Context manager for a value box

This function wraps [](:func:`~shiny.ui.value_box`).

An opinionated ([](:func:`~shiny.ui.card`)-powered) box, designed for displaying a title
(the 1st child), value (the 2nd child), and other explanation text (other children,
if any). Optionally, a `showcase` can provide for context for what the `value`
represents (for example, it could hold an icon, or even a
[](:func:`~shiny.ui.output_plot`)).

## Parameters

<code><span class="parameter-name">showcase</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[TagChild](`htmltools.TagChild`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A [](:class:`~htmltools.Tag`) child to showcase (e.g., an icon, a
    [](:func:`~shiny.ui.output_plot`), etc).

<code><span class="parameter-name">showcase_layout</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ui](`shiny.ui`).[_valuebox](`shiny.ui._valuebox`).[SHOWCASE_LAYOUTS_STR](`shiny.ui._valuebox.SHOWCASE_LAYOUTS_STR`) \| [ui](`shiny.ui`).[ShowcaseLayout](`shiny.ui.ShowcaseLayout`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'left center'</span></code>

:   One of `"left center"` (default), `"top right"` or `"bottom"`. Alternatively,
    you can customize the showcase layout options with the
    [](:func:`~shiny.ui.showcase_left_center`), :func:`~shiny.ui.showcase_top_right()`,
    or :func:`~shiny.ui.showcase_bottom()` functions. Use the options functions when
    you want to control the height or width of the showcase area.

<code><span class="parameter-name">theme</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`) \| [ui](`shiny.ui`).[ValueBoxTheme](`shiny.ui.ValueBoxTheme`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The name of a theme (e.g. `"primary"`, `"danger"`, `"purple"`, `"bg-green"`,
    `"text-red"`) for the value box, or a theme constructed with
    [](:func:`~shiny.ui.value_box_theme`). The theme names provide a convenient way to
    use your app's Bootstrap theme colors as the foreground or background colors of
    the value box. For more control, you can create your own theme with
    [](:func:`~shiny.ui.value_box_theme`) where you can pass foreground and background
    colors directly. Bootstrap supported color themes: `"blue"`, `"purple"`,
    `"pink"`, `"red"`, `"orange"`, `"yellow"`, `"green"`, `"teal"`, and `"cyan"`.
    These colors can be used with `bg-NAME`, `text-NAME`, and
    `bg-gradient-NAME1-NAME2` to change the background, foreground, or use a
    background gradient respectively. If a `theme` string does not start with
    `text-` or `bg-`, it will be auto prefixed with `bg-`.

<code><span class="parameter-name">full_screen</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   If `True`, an icon will appear when hovering over the card body. Clicking the
    icon expands the card to fit viewport size.

<code><span class="parameter-name">height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit (e.g., `height="200px"`). Doesn't apply when a card is made
    `full_screen`.

<code><span class="parameter-name">fill</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether to allow the value box to grow/shrink to fit a fillable container with
    an opinionated height (e.g., [](:func:`~shiny.ui.page_fillable`)).

<code><span class="parameter-name">class_</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Utility classes for customizing the appearance of the summary card. Use `bg-*`
    and `text-*` classes (e.g, `"bg-danger"` and `"text-light"`) to customize the
    background/foreground colors.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Additional attributes to pass to [](:func:`~shiny.ui.card`).

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from icons import piggy_bank

from shiny import App, ui

app_ui = ui.page_fluid(
    ui.layout_column_wrap(
        ui.value_box(
            "KPI Title",
            "$1 Billion Dollars",
            "Up 30% VS PREVIOUS 30 DAYS",
            showcase=piggy_bank,
            theme="bg-gradient-orange-cyan",
            full_screen=True,
        ),
        ui.value_box(
            "KPI Title",
            "$1 Billion Dollars",
            "Up 30% VS PREVIOUS 30 DAYS",
            showcase=piggy_bank,
            theme="text-green",
            showcase_layout="top right",
            full_screen=True,
        ),
        ui.value_box(
            "KPI Title",
            "$1 Billion Dollars",
            "Up 30% VS PREVIOUS 30 DAYS",
            showcase=piggy_bank,
            theme="purple",
            showcase_layout="bottom",
            full_screen=True,
        ),
    )
)


app = App(app_ui, server=None)

## file: icons.py
from shiny import ui

piggy_bank = ui.HTML(
    '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" class="bi bi-piggy-bank " style="fill:currentColor;height:100%;" aria-hidden="true" role="img" ><path d="M5 6.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0zm1.138-1.496A6.613 6.613 0 0 1 7.964 4.5c.666 0 1.303.097 1.893.273a.5.5 0 0 0 .286-.958A7.602 7.602 0 0 0 7.964 3.5c-.734 0-1.441.103-2.102.292a.5.5 0 1 0 .276.962z"></path>\n<path fill-rule="evenodd" d="M7.964 1.527c-2.977 0-5.571 1.704-6.32 4.125h-.55A1 1 0 0 0 .11 6.824l.254 1.46a1.5 1.5 0 0 0 1.478 1.243h.263c.3.513.688.978 1.145 1.382l-.729 2.477a.5.5 0 0 0 .48.641h2a.5.5 0 0 0 .471-.332l.482-1.351c.635.173 1.31.267 2.011.267.707 0 1.388-.095 2.028-.272l.543 1.372a.5.5 0 0 0 .465.316h2a.5.5 0 0 0 .478-.645l-.761-2.506C13.81 9.895 14.5 8.559 14.5 7.069c0-.145-.007-.29-.02-.431.261-.11.508-.266.705-.444.315.306.815.306.815-.417 0 .223-.5.223-.461-.026a.95.95 0 0 0 .09-.255.7.7 0 0 0-.202-.645.58.58 0 0 0-.707-.098.735.735 0 0 0-.375.562c-.024.243.082.48.32.654a2.112 2.112 0 0 1-.259.153c-.534-2.664-3.284-4.595-6.442-4.595zM2.516 6.26c.455-2.066 2.667-3.733 5.448-3.733 3.146 0 5.536 2.114 5.536 4.542 0 1.254-.624 2.41-1.67 3.248a.5.5 0 0 0-.165.535l.66 2.175h-.985l-.59-1.487a.5.5 0 0 0-.629-.288c-.661.23-1.39.359-2.157.359a6.558 6.558 0 0 1-2.157-.359.5.5 0 0 0-.635.304l-.525 1.471h-.979l.633-2.15a.5.5 0 0 0-.17-.534 4.649 4.649 0 0 1-1.284-1.541.5.5 0 0 0-.446-.275h-.56a.5.5 0 0 1-.492-.414l-.254-1.46h.933a.5.5 0 0 0 .488-.393zm12.621-.857a.565.565 0 0 1-.098.21.704.704 0 0 1-.044-.025c-.146-.09-.157-.175-.152-.223a.236.236 0 0 1 .117-.173c.049-.027.08-.021.113.012a.202.202 0 0 1 .064.199z"></path></svg>'
)

```



# express.ui.panel_well { #shiny.express.ui.panel_well }

`express.ui.panel_well(**kwargs)`

Context manager for a well panel

This function wraps [](:func:`~shiny.ui.panel_well`).

A well panel is a simple container with a border and some padding. It&#x27;s useful for
grouping related content together.

# express.ui.panel_conditional { #shiny.express.ui.panel_conditional }

`express.ui.panel_conditional(condition, **kwargs)`

Context manager for a conditional panel

This function wraps [](:func:`~shiny.ui.panel_conditional`).

Show UI elements only if a ``JavaScript`` condition is ``true``.

## Parameters

<code><span class="parameter-name">condition</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   A JavaScript expression that will be evaluated repeatedly to determine whether
    the panel should be displayed.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Attributes to place on the panel tag.

## Note

In the JS expression, you can refer to input and output JavaScript objects that
contain the current values of input and output. For example, if you have an input
with an id of foo, then you can use input.foo to read its value. (Be sure not to
modify the input/output objects, as this may cause unpredictable behavior.)

You are not recommended to use special JavaScript characters such as a period . in
the input id&#x27;s, but if you do use them anyway, for example, ``id = &quot;foo.bar&quot;``, you
will have to use ``input[&quot;foo.bar&quot;]`` instead of ``input.foo.bar`` to read the input
value.



## Tip

A more powerful (but slower) way to conditionally show UI content is to use
[](:func:`~shiny.render.ui`).

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, Inputs, Outputs, Session, ui

app_ui = ui.page_fluid(
    ui.input_checkbox("show", "Show radio buttons", False),
    ui.panel_conditional(
        "input.show", ui.input_radio_buttons("radio", "Choose ", ["slider", "select"])
    ),
    ui.panel_conditional(
        "input.show && input.radio === 'slider'",
        ui.input_slider("slider", None, min=0, max=100, value=50),
    ),
    ui.panel_conditional(
        "input.show && input.radio === 'select'",
        ui.input_select("slider", None, ["A", "B", "C"]),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    pass


app = App(app_ui, server)

```



# express.ui.panel_fixed { #shiny.express.ui.panel_fixed }

`express.ui.panel_fixed(top=None, left=None, right=None, bottom=None, width=None, height=None, draggable=False, cursor='auto', **kwargs)`

Context manager for a panel of absolutely positioned content.

This function wraps [](:func:`~shiny.ui.panel_fixed`).

This function is equivalent to calling [](:func:`~shiny.ui.panel_absolute`) with
``fixed=True`` (i.e., the panel does not scroll with the rest of the page). See
[](:func:`~shiny.ui.panel_absolute`) for more information.

## Parameters

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Arguments passed along to [](:func:`~shiny.ui.panel_absolute`).

## See Also

[](:func:`~shiny.ui.panel_absolute`)

# express.ui.panel_absolute { #shiny.express.ui.panel_absolute }

`express.ui.panel_absolute(top=None, left=None, right=None, bottom=None, width=None, height=None, draggable=False, fixed=False, cursor='auto', **kwargs)`

Context manager for a panel of absolutely positioned content.

This function wraps [](:func:`~shiny.ui.panel_absolute`).

Creates a ``&lt;div&gt;`` tag whose CSS position is set to absolute (or fixed if ``fixed =
True``). The way absolute positioning works in HTML is that absolute coordinates are
specified relative to its nearest parent element whose position is not set to static
(which is the default), and if no such parent is found, then relative to the page
borders. If you&#x27;re not sure what that means, just keep in mind that you may get
strange results if you use this function from inside of certain types of panels.

## Parameters

<code><span class="parameter-name">top</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Distance between the top of the panel, and the top of the page or parent
    container.

<code><span class="parameter-name">left</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Distance between the left side of the panel, and the left of the page or parent
    container.

<code><span class="parameter-name">right</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Distance between the right side of the panel, and the right of the page or
    parent container.

<code><span class="parameter-name">bottom</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Distance between the bottom of the panel, and the bottom of the page or parent
    container.

<code><span class="parameter-name">width</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Width of the panel.

<code><span class="parameter-name">height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Height of the panel.

<code><span class="parameter-name">draggable</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   If ``True``, allows the user to move the panel by clicking and dragging.

<code><span class="parameter-name">fixed</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Positions the panel relative to the browser window and prevents it from being
    scrolled with the rest of the page.

<code><span class="parameter-name">cursor</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['auto', 'move', 'default', 'inherit'\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'auto'</span></code>

:   The type of cursor that should appear when the user mouses over the panel. Use
    ``"move"`` for a north-east-south-west icon, ``"default"`` for the usual cursor
    arrow, or ``"inherit"`` for the usual cursor behavior (including changing to an
    I-beam when the cursor is over text). The default is ``"auto"``, which is
    equivalent to ``"move" if draggable else "inherit"``.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagAttrValue](`htmltools.TagAttrValue`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Attributes added to the content's container tag.

## Tip

The position (``top``, ``left``, ``right``, ``bottom``) and size (``width``,
``height``) parameters are all optional, but you should specify exactly two of top,
bottom, and height and exactly two of left, right, and width for predictable
results.

Like most other distance parameters in Shiny, the position and size parameters take
a number (interpreted as pixels) or a valid CSS size string, such as ``&quot;100px&quot;``
(100 pixels) or ``&quot;25%&quot;``.

For arcane HTML reasons, to have the panel fill the page or parent you should
specify 0 for ``top``, ``left``, ``right``, and ``bottom`` rather than the more
obvious ``width = &quot;100%&quot;`` and ``height = &quot;100%&quot;``.

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, Inputs, Outputs, Session, ui

app_ui = ui.page_fluid(
    ui.panel_title("A basic absolute panel example", "Demo"),
    ui.panel_absolute(
        ui.panel_well(
            "Drag me around!", ui.input_slider("n", "N", min=0, max=100, value=20)
        ),
        draggable=True,
        width="300px",
        right="50px",
        top="50%",
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    pass


app = App(app_ui, server)

```

