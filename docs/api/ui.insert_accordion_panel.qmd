# ui.insert_accordion_panel { #shiny.ui.insert_accordion_panel }

`ui.insert_accordion_panel(id, panel, target=None, position='after', session=None)`

Insert an [](:func:`~shiny.ui.accordion_panel`).

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   A string that matches an existing [](:func:`~shiny.ui.accordion`)'s `id`.

<code><span class="parameter-name">panel</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[AccordionPanel](`shiny.ui._accordion.AccordionPanel`)</span></code>

:   An [](:func:`~shiny.ui.accordion_panel`) object to insert.

<code><span class="parameter-name">target</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The `value` of an existing panel to insert next to.

<code><span class="parameter-name">position</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Literal](`typing.Literal`)\['after', 'before'\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'after'</span></code>

:   Should `panel` be added before or after the target? When `target=None`,
    `"after"` will append after the last panel and `"before"` will prepend before
    the first panel.

<code><span class="parameter-name">session</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A Shiny session object (the default should almost always be used).

## References

[Bootstrap Accordion](https://getbootstrap.com/docs/5.3/components/accordion/)



## See Also

* [](:func:`~shiny.ui.accordion`)
* [](:func:`~shiny.ui.accordion_panel`)
* [](:func:`~shiny.ui.update_accordion`)
* [](:func:`~shiny.ui.remove_accordion_panel`)
* [](:func:`~shiny.ui.update_accordion_panel`)

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
import random

from shiny import App, Inputs, Outputs, Session, reactive, ui


def make_panel(letter: str) -> ui.AccordionPanel:
    return ui.accordion_panel(
        f"Section {letter}", f"Some narrative for section {letter}"
    )


items = [make_panel(letter) for letter in "ABCDE"]

app_ui = ui.page_fluid(
    ui.input_action_button("add_panel", "Add random panel", class_="mt-3 mb-3"),
    ui.accordion(*items, id="acc", multiple=True),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.Effect
    @reactive.event(input.add_panel)
    def _():
        ui.insert_accordion_panel("acc", make_panel(str(random.randint(0, 10000))))


app = App(app_ui, server)

```

