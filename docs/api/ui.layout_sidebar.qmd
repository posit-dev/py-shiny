# ui.layout_sidebar { #shiny.ui.layout_sidebar }

`ui.layout_sidebar(sidebar, *args, fillable=True, fill=True, bg=None, fg=None, border=None, border_radius=None, border_color=None, gap=None, padding=None, height=None, **kwargs)`

Sidebar layout

Create a sidebar layout component which can be dropped inside any Shiny UI page
method (e.g. [](:func:`~shiny.shiny.ui.page_fillable`)) or
[](:func:`~shiny.ui.card`) context.

## Parameters

<code><span class="parameter-name">*args</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">()</span></code>

:   One argument needs to be of class [](:class:`~shiny.ui.Sidebar`) object created by
    [](:func:`~shiny.ui.sidebar`). The remaining arguments will contain the contents to
    the main content area. Or tag attributes that are supplied to the resolved
    [](:class:`~htmltools.Tag`) object.

<code><span class="parameter-name">fillable</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether or not the main content area should be wrapped in a fillable container.
    See [](:func:`~shiny.ui.as_fillable_container`) for details.

<code><span class="parameter-name">fill</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">True</span></code>

:   Whether or not the sidebar layout should be wrapped in a fillable container. See
    [](:func:`~shiny.ui.as_fill_item`) for details.

<code><span class="parameter-name">bg</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A background or foreground color.

<code><span class="parameter-name">border</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[bool](`bool`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Whether or not to show a border around the sidebar layout.

<code><span class="parameter-name">border_radius</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[bool](`bool`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Whether or not to round the corners of the sidebar layout.

<code><span class="parameter-name">border_color</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A border color.

<code><span class="parameter-name">gap</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A CSS length unit defining the vertical `gap` (i.e., spacing) between elements
    provided to `*args`. This value will only be used if `fillable` is `True`.

<code><span class="parameter-name">padding</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`) \| [list](`list`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Padding within the sidebar itself. This can be a numeric vector (which will be
    interpreted as pixels) or a character vector with valid CSS lengths. `padding`
    may be one to four values.

    * If a single value, then that value will be used for all four sides.
    * If two, then the first value will be used for the top and bottom, while
      the second value will be used for left and right.
    * If three values, then the first will be used for top, the second will be left
      and right, and the third will be bottom.
    * If four, then the values will be interpreted as top, right, bottom, and left
      respectively.

<code><span class="parameter-name">height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[CssUnit](`shiny.ui.css.CssUnit`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Any valid CSS unit to use for the height.

## Returns

| Type                                  | Description                       |
|---------------------------------------|-----------------------------------|
| [CardItem](`shiny.ui._card.CardItem`) | A [](:class:`~htmltools.Tag`) object. |

## See Also

* [](:func:`~shiny.ui.sidebar`)

## Examples

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.sidebar(
            ui.input_slider("n", "N", min=0, max=100, value=20),
        ),
        ui.output_plot("plot"),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot(alt="A histogram")
    def plot() -> object:
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


app = App(app_ui, server)
```