# ui.output_plot { #shiny.ui.output_plot }

`ui.output_plot(id, width='100%', height='400px', *, inline=False, click=False, dblclick=False, hover=False, brush=False, fill=MISSING)`

Create a output container for a static plot.

Place a [](:func:`~shiny.render.plot`) result in the user interface. See
[](:func:`~shiny.render.plot`) for more details on what types of plots are supported.

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   An output id.

<code><span class="parameter-name">width</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| [float](`float`) \| [int](`int`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'100%'</span></code>

:   The CSS width, e.g. '400px', or '100%'.

<code><span class="parameter-name">height</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`) \| [float](`float`) \| [int](`int`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">'400px'</span></code>

:   The CSS height, e.g. '100%' or '600px'.

<code><span class="parameter-name">inline</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   If ``True``, the result is displayed inline.

<code><span class="parameter-name">click</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`) \| [ClickOpts](`shiny.ui._plot_output_opts.ClickOpts`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   This can be a boolean or an object created by [](:func:`~shiny.ui.click_opts`). The
    default is `False`, but if you use `True` (or equivalently, `click_opts()`), the
    plot will send coordinates to the server whenever it is clicked, and the value
    will be accessible via `input.xx_click()`, where `xx` is replaced with the ID of
    this plot. The input value will be a dictionary with `x` and `y` elements
    indicating the mouse position.

<code><span class="parameter-name">dblclick</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`) \| [DblClickOpts](`shiny.ui._plot_output_opts.DblClickOpts`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   This is just like the `click` parameter, but for double-click events.

<code><span class="parameter-name">hover</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`) \| [HoverOpts](`shiny.ui._plot_output_opts.HoverOpts`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Similar to the `click` argument, this can be a boolean or an object created by
    [](:func:`~shiny.ui.hover_opts`). The default is `False`, but if you use `True` (or
    equivalently, `hover_opts()`), the plot will send coordinates to the server
    whenever it is clicked, and the value will be accessible via `input.xx_hover()`,
    where `xx` is replaced with the ID of this plot. The input value will be a
    dictionary with `x` and `y` elements indicating the mouse position. To control
    the hover time or hover delay type, use [](:func:`~shiny.ui.hover_opts`).

<code><span class="parameter-name">brush</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`) \| [BrushOpts](`shiny.ui._plot_output_opts.BrushOpts`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   Similar to the `click` argument, this can be a boolean or an object created by
    [](:func:`~shiny.ui.brush_opts`). The default is `False`, but if you use `True` (or
    equivalently, `brush_opts()`), the plot will allow the user to "brush" in the
    plotting area, and will send information about the brushed area to the server,
    and the value will be accessible via `input.plot_brush()`. Brushing means that
    the user will be able to draw a rectangle in the plotting area and drag it
    around. The value will be a named list with `xmin`, `xmax`, `ymin`, and `ymax`
    elements indicating the brush area. To control the brush behavior, use
    [](:func:`~shiny.ui.brush_opts`). Multiple `output_image`/`output_plot` calls may
    share the same `id` value; brushing one image or plot will cause any other
    brushes with the same `id` to disappear.

<code><span class="parameter-name">fill</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`) \| [MISSING_TYPE](`shiny.types.MISSING_TYPE`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">MISSING</span></code>

:   Whether or not to allow the plot output to grow/shrink to fit a fillable
    container with an opinionated height (e.g., [](:func:`~shiny.ui.page_fillable`)). If
    no `fill` value is provided, it will default to the inverse of `inline`.

## Returns

| Type                   | Description   |
|------------------------|---------------|
| [Tag](`htmltools.Tag`) | A UI element  |

## See Also

* [](:func:`~shiny.render.plot`)
* [](:func:`~shiny.ui.output_image`)

## Examples

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fluid(
    ui.input_slider(
        "n", "input_slider()", min=10, max=100, value=50, step=5, animate=True
    ),
    ui.output_plot("p"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot
    def p():
        np.random.seed(19680801)
        x_rand = 100 + 15 * np.random.randn(437)
        fig, ax = plt.subplots()
        ax.hist(x_rand, int(input.n()), density=True)
        return fig


app = App(app_ui, server)
```