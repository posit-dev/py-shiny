# ui.page_fixed { #shiny.ui.page_fixed }

`ui.page_fixed(*args, title=None, lang=None, **kwargs)`

Create a fixed page.

## Parameters

<code><span class="parameter-name">*args</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`) \| [TagAttrs](`htmltools.TagAttrs`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">()</span></code>

:   UI elements.

<code><span class="parameter-name">title</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The browser window title (defaults to the host URL of the page). Can also be set
    as a side effect via [](:func:`~shiny.ui.panel_title`).

<code><span class="parameter-name">lang</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   ISO 639-1 language code for the HTML page, such as ``"en"`` or ``"ko"``. This
    will be used as the lang in the ``<html>`` tag, as in ``<html lang="en">``. The
    default, `None`, results in an empty string.

<code><span class="parameter-name">**kwargs</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">{}</span></code>

:   Attributes on the page level container.

## Returns

| Type                   | Description   |
|------------------------|---------------|
| [Tag](`htmltools.Tag`) | A UI element. |

## See Also

[](:func:`~shiny.ui.page_fluid`)
[](:func:`~shiny.ui.page_bootstrap`)
[](:func:`~shiny.ui.page_navbar`)

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
import matplotlib.pyplot as plt
import numpy as np

from shiny import App, Inputs, Outputs, Session, render, ui

app_ui = ui.page_fixed(
    ui.layout_sidebar(
        ui.panel_sidebar(
            ui.input_slider("n", "N", min=0, max=100, value=20),
        ),
        ui.panel_main(
            ui.output_plot("plot"),
        ),
    ),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.plot(alt="A histogram")
    def plot() -> object:
        np.random.seed(19680801)
        x = 100 + 15 * np.random.randn(437)

        fig, ax = plt.subplots()
        ax.hist(x, input.n(), density=True)
        return fig


app = App(app_ui, server)

```

