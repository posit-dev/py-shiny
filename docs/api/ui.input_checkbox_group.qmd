# ui.input_checkbox_group { #shiny.ui.input_checkbox_group }

`ui.input_checkbox_group(id, label, choices, *, selected=None, inline=False, width=None)`

Create a group of checkboxes that can be used to toggle multiple choices
independently.

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   An input id.

<code><span class="parameter-name">label</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[TagChild](`htmltools.TagChild`)</span></code>

:   An input label.

<code><span class="parameter-name">choices</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[ChoicesArg](`shiny.ui._input_check_radio.ChoicesArg`)</span></code>

:   Either a list of choices or a dictionary mapping choice values to labels. Note
    that if a dictionary is provided, the keys are used as the (input) values so
    that the dictionary values can hold HTML labels.

<code><span class="parameter-name">selected</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`) \| [list](`list`)\[[str](`str`)\]\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The values that should be initially selected, if any.

<code><span class="parameter-name">inline</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   If `True`, the result is displayed inline.

<code><span class="parameter-name">width</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The CSS width, e.g. '400px', or '100%'.

## Returns

| Type                   | Description   |
|------------------------|---------------|
| [Tag](`htmltools.Tag`) | A UI element. |

## Notes

::: {.callout-note title="Server value"}
A tuple of string(s) with the selected value(s) (if any).
:::



## See Also

[](:func:`~shiny.ui.update_checkbox_group`)
[](:func:`~shiny.ui.input_checkbox`)
[](:func:`~shiny.ui.input_radio_buttons`)

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, Inputs, Outputs, Session, render, req, ui

app_ui = ui.page_fluid(
    ui.input_checkbox_group(
        "colors",
        "Choose color(s):",
        {
            "red": ui.span("Red", style="color: #FF0000;"),
            "green": ui.span("Green", style="color: #00AA00;"),
            "blue": ui.span("Blue", style="color: #0000AA;"),
        },
    ),
    ui.output_ui("val"),
)


def server(input: Inputs, output: Outputs, session: Session):
    @render.ui
    def val():
        req(input.colors())
        return "You chose " + ", ".join(input.colors())


app = App(app_ui, server)

```

