# render.image { #shiny.render.image }

`render.image(self, _fn=None, *, delete_file=False)`

Reactively render a image file as an HTML image.

## Parameters

<code><span class="parameter-name">delete_file</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[bool](`bool`)</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">False</span></code>

:   If ``True``, the image file will be deleted after rendering.

## Returns

| Type   | Description                                                                     |
|--------|---------------------------------------------------------------------------------|
|        | A decorator for a function that returns an [](:func:`~shiny.types.ImgData`) object. |

## Tip

The name of the decorated function (or ``@output(id=...)``) should match the ``id``
of a [](:func:`~shiny.ui.output_image`) container (see [](:func:`~shiny.ui.output_image`)
for example usage).



## See Also

* [](:func:`~shiny.ui.output_image`)
* [](:func:`~shiny.types.ImgData`)
* [](:func:`~shiny.render.plot`)

## Examples

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400

## file: app.py
from shiny import App, Inputs, Outputs, Session, render, ui
from shiny.types import ImgData

app_ui = ui.page_fluid(ui.output_image("image"))


def server(input: Inputs, output: Outputs, session: Session):
    @render.image
    def image():
        from pathlib import Path

        ex_dir = Path(__file__).resolve().parent.parent
        img: ImgData = {
            "src": str(ex_dir / "output_image" / "posit-logo.png"),
            "width": "100px",
        }
        return img


app = App(app_ui, server)
```