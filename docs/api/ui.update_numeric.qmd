# ui.update_numeric { #shiny.ui.update_numeric }

`ui.update_numeric(id, *, label=None, value=None, min=None, max=None, step=None, session=None)`

Change the value of a number input on the client.

## Parameters

<code><span class="parameter-name">id</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[str](`str`)</span></code>

:   An input id.

<code><span class="parameter-name">label</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[str](`str`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   An input label.

<code><span class="parameter-name">value</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[float](`float`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   A new value.

<code><span class="parameter-name">min</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[float](`float`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The minimum allowed value.

<code><span class="parameter-name">max</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[float](`float`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The maximum allowed value.

<code><span class="parameter-name">step</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[float](`float`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   Interval to use when stepping between min and max.

<code><span class="parameter-name">session</span><span class="parameter-annotation-sep">:</span> <span class="parameter-annotation">[Optional](`typing.Optional`)\[[Session](`shiny.session.Session`)\]</span> <span class="parameter-default-sep">=</span> <span class="parameter-default">None</span></code>

:   The [](:class:`~shiny.Session`) object passed to the server function of a [](:func:`~shiny.App`).

## Note


The input updater functions send a message to the client, telling it to change the
settings of an input object. The messages are collected and sent after all the
observers (including outputs) have finished running.

The syntax of these functions is similar to the functions that created the inputs in
the first place. For example, [](:func:`~shiny.ui.input_numeric`) and
[](:func:`~shiny.ui.update_numeric`) take a similar set of arguments.

Any arguments with ``None`` values will be ignored; they will not result in any
changes to the input object on the client.

For [](:func:`~update_radio_buttons`), [](:func:`~update_checkbox_group`), and
[](:func:`~update_select`), the set of choices can be cleared by using ``choices=[]``.
Similarly, for these inputs, the selected item can be cleared by using
`selected=[]`.




## See Also

[](:func:`~shiny.ui.input_numeric`)

## Examples


```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical
#| viewerHeight: 400
## file: app.py
from shiny import App, Inputs, Outputs, Session, reactive, ui

app_ui = ui.page_fluid(
    ui.input_slider("controller", "Controller", min=0, max=20, value=10),
    ui.input_numeric("inNumber", "Input number", 0),
    ui.input_numeric("inNumber2", "Input number 2", 0),
)


def server(input: Inputs, output: Outputs, session: Session):
    @reactive.Effect
    def _():
        x = input.controller()
        ui.update_numeric("inNumber", value=x)
        ui.update_numeric(
            "inNumber2",
            label="Number label " + str(x),
            value=x,
            min=x - 10,
            max=x + 10,
            step=5,
        )


app = App(app_ui, server)

```

